{
    "docs": [
        {
            "location": "/", 
            "text": "Welcome to Darren_blog\n\n\n\u5f20\u5927\u9e4f\u4e2a\u4eba\u535a\u5ba2\n\n\nProject layout\n\n\ndocs/\n    index.md  \n    data_analysis/lagou_job_analysis/\u62c9\u52fe\u62db\u8058\u804c\u4f4d\u6570\u636e\u5206\u6790\n    data_analysis/p2p_runaway_analysis/p2p\u7f51\u8d37\u5e73\u53f0\u8dd1\u8def\u5206\u6790\n    machine_learning/logistic_regression/Logistic_regression\u7684Python\u4ee3\u7801\u5b9e\u73b0\n    machine_learning/perceptron_classifier/\u611f\u77e5\u5668python\u4ee3\u7801\u5b9e\u73b0", 
            "title": "Darren_blog"
        }, 
        {
            "location": "/#welcome-to-darren_blog", 
            "text": "\u5f20\u5927\u9e4f\u4e2a\u4eba\u535a\u5ba2", 
            "title": "Welcome to Darren_blog"
        }, 
        {
            "location": "/#project-layout", 
            "text": "docs/\n    index.md  \n    data_analysis/lagou_job_analysis/\u62c9\u52fe\u62db\u8058\u804c\u4f4d\u6570\u636e\u5206\u6790\n    data_analysis/p2p_runaway_analysis/p2p\u7f51\u8d37\u5e73\u53f0\u8dd1\u8def\u5206\u6790\n    machine_learning/logistic_regression/Logistic_regression\u7684Python\u4ee3\u7801\u5b9e\u73b0\n    machine_learning/perceptron_classifier/\u611f\u77e5\u5668python\u4ee3\u7801\u5b9e\u73b0", 
            "title": "Project layout"
        }, 
        {
            "location": "/data_analysis/lagou_job_analysis/lagou_job_analysis_forshow/", 
            "text": "\u62c9\u52fe\u7f51\u62db\u8058\u804c\u4f4d\u4fe1\u606f\u6570\u636e\u5206\u6790\n\n\n\u80cc\u666f\u4ecb\u7ecd\n\n\n\u91c7\u7528scrapy\u6846\u67b6\u91c7\u96c6\u4e86\u62c9\u52fe\u7f518\u67084\u65e5\u7684\u6240\u6709\u62db\u8058\u804c\u4f4d\u4fe1\u606f\uff0c\u8fdb\u884c\u7b80\u5355\u7684\u6570\u636e\u5206\u6790\uff0c\u4e3b\u8981\u76ee\u7684\u662f\u5206\u6790IT\u884c\u4e1a\u76ee\u524d\u62db\u8058\u7684\u6574\u4f53\u72b6\u51b5\uff0c\u5206\u6790\u6280\u672f\u7c7b\u4e2d\u540e\u7aef\u5f00\u53d1\u7684\u62db\u8058\u5f62\u52bf\u4ee5\u53caPython\u7f16\u7a0b\u8bed\u8a00\u7684\u62db\u8058\u9700\u6c42\u3002\n\n\n# \u5bfc\u5165\u76f8\u5173\u6a21\u5757\nimport pandas as pd \nimport numpy as np \nimport matplotlib.pyplot as plt\nimport time\nimport datetime\nimport re\nimport seaborn as sns\nsns.set(style=\nticks\n, palette=\nmuted\n, font_scale=1.3, color_codes=True, context=\ntalk\n)\nimport sys\nreload(sys)\nsys.setdefaultencoding('utf-8')\n%matplotlib inline\nfrom matplotlib.font_manager import FontProperties \nfont = FontProperties(fname=r\n/usr/share/fonts/truetype/arphic/ukai.ttc\n)\nfrom os import path\npath.dirname(__name__)\n\n\n\n\n\u6570\u636e\u91c7\u96c6\n\n\n\u9996\u5148\u662f\u83b7\u53d6\u6570\u636e\uff0c\u4f7f\u7528Python\u7684Scrapy\u6846\u67b6\u91c7\u96c6\u6570\u636e\uff0c\u6570\u636e\u91c7\u96c6\u8fc7\u7a0b\u5728\u6b64\u7565\u8fc7...\n\n\n\u91c7\u96c6\u7684\u6570\u636e\u5b58\u50a8\u5728csv\u6587\u4ef6\u4e2d\uff0c\u8be5\u6570\u636e\u96c6\u662f\u91c7\u96c6\u62c9\u52fe\u7f51\u4e00\u5929\u5185\u53d1\u5e03\u7684\u804c\u4f4d\u62db\u8058\u4fe1\u606f\uff0c\u603b\u51718\u4e07\u591a\u6761\u62db\u8058\u4fe1\u606f\u3002\n\n\n\u6570\u636e\u5206\u6790\n\n\n\u6570\u636e\u6e05\u6d17\n\n\n\u62c9\u52fe\u7f51\u7684\u62db\u8058\u4fe1\u606f\u4ee5Json\u683c\u5f0f\u53d1\u9001\u5230\u524d\u7aef\uff0c\u6574\u4f53\u6570\u636e\u6bd4\u8f83\u89c4\u6574\uff0c\u7f3a\u5931\u6570\u636e\u8f83\u5c11\uff0c\u5728\u672c\u5206\u6790\u6d41\u7a0b\u524d\u4e8b\u5148\u5bf9\u539f\u59cb\u6570\u636e\u96c6\u7684\u91cd\u8981\u5b57\u6bb5\u8fdb\u884c\u4e86\u7f3a\u5931\u503c\u586b\u8865\u5904\u7406\u3001\u5bf9\u4e00\u4e9b\u5206\u7c7b\u53d8\u91cf\u8fdb\u884c\u4e86\u91cd\u65b0\u5f52\u7c7b\u5408\u5e76\u7b49\u6570\u636e\u6e05\u6d17\u52a8\u4f5c\uff0c\u56e0\u6b64\uff0c\u67e5\u770b\u73b0\u5728\u6570\u636e\u7684\u7f3a\u5931\u60c5\u51b5\uff0c\u53ea\u6709dist\u3001position_advantagei\u4e24\u4e2a\u7279\u5f81\u6709\u7f3a\u5931\u6570\u636e\n\n\ndata = pd.read_csv(\n/home/darren/Desktop/lagou_position/scrapy/lagou_job_all_dropduplicated.csv\n, encoding=\nutf-8\n)    \n\n\n\n\n# \u67e5\u770bcompany_size\u7f3a\u5931\u7684\u6837\u672c\u6570\u91cf\ndata[data.company_size.isnull()].shape\n# \u7528\n\u5c11\u4e8e15\u4eba\n\u586b\u8865\u7f3a\u5931\u7684\u6570\u636e\ndata.company_size.fillna(u\n\u5c11\u4e8e15\u4eba\n, inplace=True)\n\n\n\n\n\u67e5\u770b\u6570\u636e\u96c6\u4e2d\u975e\u7a7a\u6570\u636e\u767e\u5206\u6bd4\n\n\n#\u5404\u4e2a\u7279\u5f81\u975e\u7a7a\u7684\u6837\u672c\u6570\u91cf\nnot_null = data.count()\nall = data.shape[0]\n# \u67e5\u770b\u6570\u636e\u96c6\u4e2d\u975e\u7a7a\u6570\u636e\u767e\u5206\u6bd4\nnot_null / all * 100\n\n\n\n\nfinance_stage         100.000000\ncity                  100.000000\ndist                   98.252158\nsalary                100.000000\njob_nature            100.000000\nindustry_field        100.000000\ncompany               100.000000\nthird_tag             100.000000\npublished_time        100.000000\nsecond_tag            100.000000\nposition_advantage     99.990527\nfirst_tag             100.000000\nlast_login            100.000000\nwork_experience       100.000000\nposition_type         100.000000\nposition              100.000000\neducation             100.000000\ncrawl                 100.000000\ncompany_size          100.000000\nday                   100.000000\ndtype: float64\n\n\n\nIT\u884c\u4e1a\u6574\u4f53\u7684\u63cf\u8ff0\u6027\u5206\u6790\n\n\n# position_advantage\u548cdist\u7684\u7f3a\u5931\u503c\u6682\u4e0d\u5904\u7406\n# \u83b7\u53d6\u6570\u636e\u96c6\u7684\u67d0\u4e9b\u6837\u672c\u7279\u5f81\u7528\u4e8e\u53ef\u89c6\u5316\u8f93\u51fa\nfeatures = data.columns.values.tolist()\n\n\n\n\n# \u63d0\u53d6\u4e0esalary\u76f8\u5173\u5ea6\u8f83\u5927\u7684\u7279\u5f81\uff0c\u7528\u4e8e\u63cf\u8ff0\u6027\u63a2\u7d22\u4e0e\u53ef\u89c6\u5316\u8f93\u51fa\nfor x in [u\ncompany_size\n, u\nposition_type\n, u\nday\n, u\nthird_tag\n, u\nsalary\n, u\ndist\n, u\ncompany\n, u\npublished_time\n, u\nposition_advantage\n, u\nlast_login\n, u\nposition\n, u\ncrawl\n]:  # \n    features.remove(x) \n\n\n\n\n# \u5b9a\u4e49\u4e00\u4e9b\u7279\u5f81\u548c\u8bc4\u4f30\u7684\u6620\u5c04\nfeature_name = [u\n\u4f01\u4e1a\u91d1\u878d\u72b6\u51b5\n, u\n\u57ce\u5e02\n, u\n\u5de5\u4f5c\u7c7b\u578b\n, u\n\u884c\u4e1a\u9886\u57df\n, u\n\u804c\u4f4d\u5c0f\u7c7b\n, u\n\u804c\u4f4d\u5927\u7c7b\n, u\n\u5de5\u4f5c\u7ecf\u9a8c\n, u\n\u5b66\u5386\n]  # u\n\u804c\u4f4d\u7c7b\u578b\n, ,u\n\u516c\u53f8\u89c4\u6a21\n\nfeature_dict = dict(zip(features,feature_name))\nfeature_dict\nmethod_dict = {\nmean\n: u\n\u5e73\u5747\u85aa\u8d44\n, \nmedian\n: u\n\u85aa\u8d44\u4e2d\u4f4d\u6570\n, \nsize\n: u\n\u62db\u8058\u804c\u4f4d\u6570\u91cf\n}\n\n\n\n\ndef feature_target_bar(evalute_method_str):\n    \n\n    \u4ee5bar_plot\u7684\u65b9\u5f0f\u5c06IT\u884c\u4e1a\u6574\u4f53\u7684\u4e00\u4e9b\u7279\u5f81\u4e0e\u85aa\u8d44\u5173\u7cfb\u8fdb\u884c\u53ef\u89c6\u5316\u8f93\u51fa\n    \n\n    fig, axes = plt.subplots(4,2, figsize=(18,40), sharex=False, sharey=False)\n    axes_subject_list = [j for i in axes.tolist() for j in i]\n    evalute_method = \nnp.\n + evalute_method_str\n    for index, feature in enumerate(features):\n        df_salary= data.groupby(feature)[\nsalary\n].aggregate([eval(evalute_method)]).sort_values(evalute_method_str, ascending=False)\n        g = sns.barplot(y=df_salary.index, x=df_salary[evalute_method_str], ax=axes_subject_list[index], palette=\nhusl\n)\n        axes_subject_list[index].set_yticklabels(g.get_yticklabels(), fontproperties=font, fontsize=18)\n        axes_subject_list[index].set_xlabel(\n)\n        axes_subject_list[index].set_title(u\n\u4e0d\u540c\n + feature_dict[feature] + method_dict[evalute_method_str], fontsize=25, fontproperties=font)    \n        axes_subject_list[index].set_ylabel(\n) \n        axes_subject_list[index].xaxis.grid(True, linestyle = \n-.\n,)    \n    text = method_dict[evalute_method_str] + 'k(\uffe5)' if evalute_method_str in [\nmean\n, \nmedian\n] else method_dict[evalute_method_str]\n    # \u5c06x\u8f74\u4ee5\u6587\u672cplt.text\u7684\u5f62\u5f0f\u5199\u5165axis\u5bf9\u8c61\u4e2d\n    plt.text(-3.8, 5.0, s=text, ha='center', va='center', fontsize=25, fontproperties=font)\n    fig.tight_layout()\n    # fig.savefig(\n/home/darren/Desktop/salary_mean \n features.png\n)\n\n\n\n\nIT\u884c\u4e1a\u6574\u4f53\u62db\u8058\u9700\u6c42\n\n\n\u4e3b\u8981\u63a2\u8ba8\u804c\u4f4d\u62db\u8058\u9700\u6c42\u3001\u804c\u4f4d\u5e73\u5747/\u4e2d\u4f4d\u6570\u85aa\u8d44\u4e0e\u62db\u8058\u4f01\u4e1a\u7684\u91d1\u878d\u72b6\u51b5\u3001\u4f01\u4e1a\u89c4\u6a21\uff0c\u6240\u5c5e\u884c\u4e1a\u7684\u7ec6\u5206\u9886\u57df\uff0c\u6c42\u804c\u8005\u5b66\u5386\u3001\u5de5\u4f5c\u7ecf\u9a8c\u7684\u5173\u7cfb\u3002\u4e4b\u6240\u4ee5\u8981\u8bc4\u4f30\u85aa\u8d44\u7684\u4e2d\u4f4d\u6570\uff0c\u4e3b\u8981\u662f\u5c3d\u91cf\u51cf\u5c0f\u4e00\u4e9b\u9ad8\u85aa\u5c97\u4f4d\u7684\u85aa\u8d44\u53ef\u80fd\u4f1a\u5f15\u8d77\u7684\u5de6\u504f\u73b0\u8c61\u3002\n\n\nfor i in method_dict.keys():\n    feature_target_bar(i)\n\n\n\n\n\n\n\n\n\n\n\u4e0d\u540c\u89c4\u6a21\u7684\u516c\u53f8\u7684\u62db\u8058\u9700\u6c42\u548c\u85aa\u8d44\u56fe\u662f\u53ccy\u8f74\u5750\u6807\u56fe\uff0c\u53f3\u4fa7y\u8f74\u5750\u6807\u8868\u793a\u7684\u662f\u4e0d\u540c\u89c4\u6a21\u7684\u516c\u53f8\u7684\u62db\u8058\u9700\u6c42\u5360\u603b\u62db\u8058\u9700\u6c42\u7684\u767e\u5206\u6bd4\uff08\u6ce8\u610f\u548c\u4e0b\u9762\u7684\u53ccy\u5750\u6807\u8f74\u7684\u767e\u5206\u6bd4\u7684\u533a\u522b\uff09\n\n\n# \u804c\u4f4d\u62db\u8058\u9700\u6c42\u3001\u5e73\u5747\u85aa\u8d44\u4e0e\u516c\u53f8\u89c4\u6a21\u7684\u5173\u7cfb\nd_company_salary = data.groupby('company_size')[\nsalary\n].aggregate([np.size, np.mean, np.median]).sort_values(\nsize\n, ascending=True)\nd_company_salary[\nproperty\n] = d_company_salary[\nsize\n] / d_company_salary[\nsize\n].sum() * 100\nfig, ax1 = plt.subplots(figsize=(8,6))  # \u4f7f\u7528subplots()\u521b\u5efa\u7a97\u53e3\nax2 = ax1.twinx() # \u521b\u5efa\u7b2c\u4e8c\u4e2a\u5750\u6807\u8f74\nx_list = range(len(d_company_salary))\nax1.plot(x_list, d_company_salary[\nmean\n], linewidth = 2, ls=\n-.\n, marker=\n^\n, label=u\n\u5e73\u5747\u85aa\u8d44\n) \nax1.plot(x_list, d_company_salary[\nmedian\n], linewidth = 2, ls='--', marker=\nv\n, label=u\n\u85aa\u8d44\u4e2d\u4f4d\u6570\n) \nax2.plot(x_list, d_company_salary[\nproperty\n], linewidth = 3, color=\nc\n, marker=\no\n, label=u\n\u804c\u4f4d\u9700\u6c42\u91cf %\n) \nax1.set_xlabel(u'\u516c\u53f8\u89c4\u6a21', fontproperties=font, fontsize = 16) \nax1.set_ylabel(u'\u85aa\u8d44 k(\uffe5)', fontproperties=font, fontsize = 16)\nax2.set_ylabel(u'\u62db\u8058\u804c\u4f4d\u767e\u5206\u6bd4 %', fontproperties=font, fontsize = 16)\nax1.set_xlim(0, 5.4)  # \u6b64\u5904\u5fc5\u987b\u8bbe\u7f6e set_xlim(0,...),\u8d77\u59cb\u4f4d\u7f6e\u5fc5\u987b\u662f0\uff0c\u5426\u521915\u4eba\u4ee5\u4e0b\u5c31\u4e0d\u663e\u793a\uff1f\nax1.set_xticklabels(d_company_salary.index, fontproperties=font, fontsize=16, rotation=30)\nax1.xaxis.grid(True, linestyle = \n-.\n,)\nax1.yaxis.grid(True, linestyle = \n-.\n,)\nax1.legend(loc=2, prop=font)\nax2.legend(loc=4, prop=font)\nax1.set_title(u'\u4e0d\u540c\u89c4\u6a21\u7684\u516c\u53f8\u7684\u62db\u8058\u9700\u6c42\u548c\u85aa\u8d44',fontproperties=font,fontsize=25)\n\n\n\n\nmatplotlib.text.Text at 0x7f21a4798610\n\n\n\n\n\n\n\u7531\u4e8e\u62c9\u52fe\u7f51\u662f\u4e13\u4e1a\u7684\u4e92\u8054\u7f51\u62db\u8058\u5e73\u53f0\uff0c\u62db\u8058\u4fe1\u606f\u4ee5IT\u884c\u4e1a\u4e3a\u4e3b\uff0c\u6574\u4f53\u85aa\u8d44\u6c34\u5e73\u662f\u504f\u9ad8\u7684\u3002\u4ece\u4e0a\u9762\u7684\u67f1\u72b6\u56fe\u53ef\u770b\u51fa\uff0c\u62db\u8058\u85aa\u8d44\u4e0e\u62db\u8058\u4f01\u4e1a\u7684\u91d1\u878d\u72b6\u51b5\u3001\u62db\u8058\u4f01\u4e1a\u6240\u5c5e\u7684\u884c\u4e1a\u9886\u57df\u3001\u6c42\u804c\u8005\u7684\u5b66\u5386\u4e0e\u5de5\u4f5c\u7ecf\u9a8c\u7b49\u7279\u5f81\u5747\u6709\u5173\u8054\u6027\u3002\n\n\n\u6839\u636e\u62db\u8058\u4f01\u4e1a\u7684\u91d1\u878d\u72b6\u51b5\u53ef\u5206\u6210\u4e0a\u5e02\u516c\u53f8\u3001\u6210\u719f\u3001\u6210\u957f\u3001\u521d\u521b\u6027\u516c\u53f8\uff0c\u6839\u636e\u4e0a\u9762\u7684\u67f1\u72b6\u56fe\u660e\u663e\u770b\u51fa\u521d\u521b\u6027\u516c\u53f8\u7684\u85aa\u8d44\u504f\u4f4e\uff0c\u800c\u6210\u719f\u6027\u4e14\u878d\u8d44\u89c4\u6a21\u8f83\u5927\u7684\u4f01\u4e1a\u7684\u85aa\u8d44\u8f83\u9ad8\u3002\n\n\n\u5206\u6790\u4e00\u7ebf\u548c\u70ed\u95e8\u4e8c\u7ebf\u57ce\u5e02\u7684\u85aa\u8d44\u67f1\u72b6\u56fe\uff0c\u660e\u663e\u770b\u51fa\u4e00\u7ebf\u57ce\u5e02\u7684\u5e73\u5747\u85aa\u8d44\u660e\u663e\u9ad8\u4e8e\u5176\u4ed6\u57ce\u5e02\uff08\u5929\u6d25\u9664\u5916\uff09\uff0c\u5c24\u5176\u4ee5\u5317\u4eac\u7684\u85aa\u8d44\u6700\u9ad8\uff0c\u800c\u4e8c\u7ebf\u7684\u676d\u5dde\u85aa\u8d44\u4e5f\u8f83\u9ad8\uff0c\u53ef\u80fd\u4e0e\u963f\u91cc\u5df4\u5df4\u7b49\u4e92\u8054\u7f51\u516c\u53f8\u5750\u843d\u676d\u5dde\u6709\u5173\u3002\n\n\n\u4e92\u8054\u7f51\u76f8\u5173\u7684\u804c\u4f4d\u85aa\u8d44\uff08\u804c\u4e1a\u5c0f\u7c7b\uff09\u4e2d\u660e\u663e\u770b\u51fa\uff0c\u4eba\u5de5\u667a\u80fd\u7684\u85aa\u8d44\u6700\u9ad8\uff0c\u8fd9\u4e5f\u53cd\u6620\u51fa\u5f53\u524d\u7684\u4eba\u5de5\u667a\u80fd\u9886\u57df\u7684\u5927\u70ed\u3002\n\n\n\u6b64\u5916\uff0c\u5bf9\u6bd4\u5e73\u5747\u85aa\u8d44\u548c\u85aa\u8d44\u7684\u4e2d\u4f4d\u6570\u53ef\u4ee5\u53d1\u73b0\u4e00\u4e9b\u4e0d\u540c\u4e4b\u5904\uff0c\u8fd9\u662f\u7531\u4e8e\u4e00\u4e9b\u79bb\u7fa4\u7684\u6837\u672c\u70b9\u5c06\u6837\u672c\u5747\u503c\u62c9\u4f4e\u6216\u62c9\u9ad8\uff0c\u7528\u4e2d\u4f4d\u6570\u80fd\u8f83\u597d\u7684\u53cd\u6620\u96c6\u4e2d\u8d8b\u52bf\u3002\n\n\n\u4ece\u516c\u53f8\u89c4\u6a21\u4e0e\u85aa\u8d44\u548c\u62db\u8058\u9700\u6c42\u66f2\u7ebf\u770b\uff0cIT\u884c\u4e1a\u62db\u8058\u804c\u4f4d\u9700\u6c42\u6700\u591a\u7684\u4e0d\u662f\u5927\u578b\u516c\u53f8\u800c\u662f50-500\u4eba\u89c4\u6a21\u7684\u516c\u53f8\uff0c\u85aa\u8d44\u4e0a\uff0c\u5927\u578b\u516c\u53f8\u7684\u85aa\u8d44\u6700\u9ad8\uff0c50-500\u89c4\u6a21\u7684\u6b21\u4e4b\uff0c50\u4eba\u4ee5\u4e0b\u7684\u516c\u53f8\u62db\u8058\u9700\u6c42\u548c\u85aa\u8d44\u90fd\u8f83\u4f4e\u3002\n\n\n\u7b80\u800c\u6982\u4e4b\uff0c\u4ece\u5404\u4e2a\u57ce\u5e02\u7684\u62db\u8058\u804c\u4f4d\u9700\u6c42\u770b\uff0c\u5317\u4eac\u7684\u62db\u8058\u804c\u4f4d\u6700\u591a\uff0c\u4e0a\u6d77\u6b21\u4e4b\uff0c\u4ece\u516c\u53f8\u89c4\u6a21\u770b\u4e2d\u578b\u516c\u53f8\u7684\u62db\u8058\u5bfb\u6c42\u6700\u5927\uff0c\u5927\u578b\u516c\u53f8\u6b21\u4e4b\uff0c\u5c0f\u578b\u516c\u53f8\u7684\u9700\u6c42\u91cf\u8f83\u5c0f\uff1b\u4ece\u85aa\u8d44\u4e0a\u770b\uff0c\u5927\u578b\u516c\u53f8\u7684\u85aa\u8d44\u6700\u9ad8\uff0c\u5176\u6b21\u662f\u4e2d\u578b\u516c\u53f8\uff0c\u5c0f\u516c\u53f8\u6700\u4f4e\uff0c\u56e0\u6b64\uff0cIT\u884c\u4e1a\u7684\u6700\u4f73\u6c42\u804c\u5730\u4e3a\u5317\u4eac\u6216\u4e0a\u6d77\uff0c\u516c\u53f8\u53ef\u9009\u62e9\u4e2d\u578b\u7684\u4e0a\u5e02\u6216\u6210\u719f\u578b\u516c\u53f8\u3002\n\n\nIT\u884c\u4e1a\u5404\u9886\u57df\u63cf\u8ff0\u6027\u5206\u6790\n\n\n\u4ee5\u4e0a\u662f\u4ece\u6574\u4f53\u4e0a\u5bf9\u62c9\u52fe\u7f51\u7684IT\u62db\u8058\u8fdb\u884c\u5b9a\u6027\u5206\u6790\uff0c\u63a5\u4e0b\u6765\u5bf9IT\u884c\u4e1a\u4e03\u5927\u9886\u57df\uff0c\u6280\u672f\u3001\u4ea7\u54c1\u3001\u8fd0\u8425\u3001\u804c\u80fd\u3001\u91d1\u878d\u3001\u5e02\u573a\u4e0e\u9500\u552e\u3001\u8bbe\u8ba1\u8fdb\u884c\u7b80\u5355\u7684\u63cf\u8ff0\u6027\u5206\u6790\n\n\n# \u4e0d\u540c\u804c\u4e1a\u7684\u804c\u4f4d\u6570\u91cf\u3001\u5e73\u5747\u85aa\u8d44\u3001\u85aa\u8d44\u4e2d\u4f4d\u6570\nIT_domains = data.groupby([\nfirst_tag\n, \nthird_tag\n])[\nsalary\n].aggregate([np.size, np.mean, np.median])\nIT_domains = IT_domains.reset_index()\n\n\n\n\n# IT\u884c\u4e1a\u5404\u9886\u57df\u7684\u804c\u4f4d\u6bd4\u4f8b\nposition_num  = IT_domains.groupby([\nfirst_tag\n])[\nsize\n].sum() / IT_domains[\nsize\n].sum() * 100\n# IT\u884c\u4e1a\u5404\u9886\u57df\u7684\u5e73\u5747\u85aa\u8d44\nposition_mean = IT_domains.groupby([\nfirst_tag\n])[\nmean\n].mean().sort_values(ascending=False) \n\n\n\n\nplt.figure(figsize=(8,6))\ng = sns.barplot(y=position_mean.index, x=position_mean.values, palette=\nBuPu_d\n)\nplt.yticks(g.get_yticks(), fontproperties=font, fontsize=16)\nplt.xlabel(u\n\u5e73\u5747\u85aa\u8d44 k (\uffe5)\n, fontsize=16, fontproperties=font)\nplt.ylabel(\n)\nplt.title(u\nIT\u884c\u4e1a\u4e0d\u540c\u9886\u57df\u85aa\u8d44\n, fontproperties=font, fontsize=25)\nplt.gca().xaxis.grid(True, linestyle = \n-.\n,)\n\n\n\n\n\n\n\nplt.pie\u53c2\u6570\nx       (\u6bcf\u4e00\u5757)\u7684\u6bd4\u4f8b\uff0c\u5982\u679csum(x) \n 1\u4f1a\u4f7f\u7528sum(x)\u5f52\u4e00\u5316\nlabels  (\u6bcf\u4e00\u5757)\u997c\u56fe\u5916\u4fa7\u663e\u793a\u7684\u8bf4\u660e\u6587\u5b57\nexplode (\u6bcf\u4e00\u5757)\u79bb\u5f00\u4e2d\u5fc3\u8ddd\u79bb\nstartangle  \u8d77\u59cb\u7ed8\u5236\u89d2\u5ea6,\u9ed8\u8ba4\u56fe\u662f\u4ecex\u8f74\u6b63\u65b9\u5411\u9006\u65f6\u9488\u753b\u8d77,\u5982\u8bbe\u5b9a=90\u5219\u4ecey\u8f74\u6b63\u65b9\u5411\u753b\u8d77\nshadow  \u662f\u5426\u9634\u5f71\nlabeldistance label\u7ed8\u5236\u4f4d\u7f6e,\u76f8\u5bf9\u4e8e\u534a\u5f84\u7684\u6bd4\u4f8b, \u5982\n1\u5219\u7ed8\u5236\u5728\u997c\u56fe\u5185\u4fa7\nautopct \u63a7\u5236\u997c\u56fe\u5185\u767e\u5206\u6bd4\u8bbe\u7f6e,\u53ef\u4ee5\u4f7f\u7528format\u5b57\u7b26\u4e32\u6216\u8005format function\n        '%1.1f'\u6307\u5c0f\u6570\u70b9\u524d\u540e\u4f4d\u6570(\u6ca1\u6709\u7528\u7a7a\u683c\u8865\u9f50)\npctdistance \u7c7b\u4f3c\u4e8elabeldistance,\u6307\u5b9aautopct\u7684\u4f4d\u7f6e\u523b\u5ea6\nradius  \u63a7\u5236\u997c\u56fe\u534a\u5f84\n\n\nvals = range(len(position_num)) #\u521b\u5efa\u6570\u636e\u7cfb\u5217\nlabels = position_num.index.values.tolist()\nplt.figure(1, figsize=(7,7))\nplt.pie(position_num.values, labels=labels, autopct='%1.2f%%', \n        pctdistance=.8, shadow=False, startangle=60,radius=1.2, \n        labeldistance=1.06, colors=('b', 'g', 'r', 'c', 'y', 'orange', 'm'),\n        textprops={\nfontproperties\n: font, \nfontsize\n:12})\nplt.title(u'IT\u884c\u4e1a\u5404\u9886\u57df\u804c\u4f4d\u9700\u6c42\u767e\u5206\u6bd4',fontsize=25, fontproperties=font)\nplt.axis('equal') \n\n\n\n\n(-1.3429042534959512,\n 1.329370895558277,\n -1.3334685921667122,\n 1.3271730638043182)\n\n\n\n\n\nIT\u884c\u4e1a\u4e03\u5927\u9886\u57df\u4e2d\u804c\u4f4d\u9700\u6c42\u6700\u591a\u7684\u662f\u6280\u672f\u7c7b\uff0c\u5176\u6b21\u662f\u4ea7\u54c1\u7c7b\uff0c\u53d1\u5e03\u804c\u4f4d\u6700\u5c11\u7684\u662f\u91d1\u878d\u7c7b\uff0c\u800c\u85aa\u8d44\u65b9\u9762\uff0c\u5e73\u5747\u85aa\u8d44\u6700\u9ad8\u7684\u662f\u91d1\u878d\u7c7b\uff0c\u5176\u6b21\u662f\u6280\u672f\u7c7b\u3002\n\n\nIT\u884c\u4e1a\u85aa\u8d44\u4e0e\u57ce\u5e02\n\n\n# \u5bf9\u4e0d\u540c\u57ce\u5e02\u548cIT\u884c\u4e1a\u4e03\u5927\u9886\u57df\u8fdb\u884c\u5206\u7ec4\uff0c\u5e76\u5bf9\u7279\u5f81salary\u8fdb\u884c\u6570\u91cf\u7edf\u8ba1\u3001\u5e73\u5747\u3001\u4e2d\u4f4d\u6570\u8ba1\u7b97\nd_city = data.groupby([\ncity\n, \nfirst_tag\n])[\nsalary\n].aggregate([np.size, np.mean, np.median])\nd_city = d_city.reset_index() \n# \u5efa\u7acb\u57ce\u5e02\u540d\u5b57\u5217\u8868\u7528\u4e8e\u540e\u7eed\u56fe\u7684tickslabels\ncity_list = data.groupby([\ncity\n])[\nsalary\n].mean().sort_values(ascending=False).index.values.tolist()\n\n\n\n\nplt.figure(figsize=(12,20))\n# with sns.color_palette(sns.palplot(sns.xkcd_palette(colors)),  n_colors=9):\ng = sns.barplot(y=\nfirst_tag\n, x=\nmean\n, data=d_city, hue=\ncity\n, hue_order=city_list, palette=\nSet1\n)\nplt.yticks(g.get_yticks(), fontproperties=font, fontsize=16)\nplt.xlabel(u\n\u5e73\u5747\u85aa\u8d44 k (\uffe5)\n, fontsize=16, fontproperties=font)\nplt.ylabel(\n)\nplt.title(u\nIT\u884c\u4e1a\u5404\u9886\u57df\u5404\u57ce\u5e02\u85aa\u8d44\n, fontproperties=font, fontsize=25)\nplt.gca().xaxis.grid(True, linestyle = \n-.\n,)\nplt.legend(loc=7,prop=font, fontsize=17)\n\n\n\n\nmatplotlib.legend.Legend at 0x7f219c64f950\n\n\n\n\n\n\nplt.figure(figsize=(12,20))\ng = sns.barplot(y=\nfirst_tag\n, x=\nsize\n, data=d_city, hue=\ncity\n, hue_order=city_list, palette=\nSet1\n)\nplt.yticks(g.get_yticks(), fontproperties=font, fontsize=16)\nplt.xlabel(u\n\u62db\u8058\u804c\u4f4d\u6570\u91cf\n, fontsize=16, fontproperties=font)\nplt.ylabel(\n)\nplt.title(u\nIT\u884c\u4e1a\u5404\u9886\u57df\u5404\u57ce\u5e02\u62db\u8058\u804c\u4f4d\u6570\u91cf\n, fontproperties=font, fontsize=25)\nplt.gca().xaxis.grid(True, linestyle = \n-.\n,)\nplt.legend(loc=7,prop=font, fontsize=17)\n\n\n\n\nmatplotlib.legend.Legend at 0x7f219c0e4250\n\n\n\n\n\n\n\u4eceIT\u884c\u4e1a\u5404\u4e2a\u9886\u57df\u7684\u5e73\u5747\u85aa\u8d44\u548c\u62db\u8058\u804c\u4f4d\u6570\u91cf\u53ef\u77e5\uff0c\u65e0\u8bba\u4ece\u62db\u8058\u6570\u91cf\u8fd8\u662f\u5e73\u5747\u85aa\u8d44\u5317\u4eac\u7684\u8001\u5927\u5730\u4f4d\u5f88\u7262\u56fa\uff08\u9664\u4e86\u91d1\u878d\u9886\u57df\uff09\uff0c\u5176\u6b21\u662f\u4e0a\u6d77\uff0c\u518d\u4e4b\u662f\u6df1\u5733\uff0c\u7136\u540e\u662f\u676d\u5dde\u3001\u5e7f\u5dde\u3002\u5f88\u6709\u610f\u601d\u7684\u4e00\u4e2a\u73b0\u8c61\u662fIT\u884c\u4e1a\u7684\u91d1\u878d\u9886\u57df\uff0c\u867d\u7136\u5317\u4eac\u7684\u62db\u8058\u9700\u6c42\u4ecd\u65e7\u662f\u6700\u5927\u7684\uff0c\u4f46\u5e73\u5747\u85aa\u8d44\u4f4e\u4e8e\u4e0a\u6d77\u548c\u6df1\u5733\uff0c\u8fd9\u4e0e\u4e2d\u56fd\u5357\u65b9\u7684\u4e00\u7ebf\u57ce\u5e02\u7684\u91d1\u878d\u884c\u4e1a\u53d1\u5c55\u76f8\u543b\u5408\uff0c\u53e6\u4e00\u4e2a\u73b0\u8c61\u662f\u53a6\u95e8\u7684\u91d1\u878d\u9886\u57df\u85aa\u8d44\u6700\u9ad8\uff0c\u8d85\u8fc7\u4e86\u4e0a\u6d77\uff0c\u4f46\u62db\u8058\u804c\u4f4d\u6570\u91cf\u592a\u5c11\uff0c\u53ea\u67093\u4e2a\u804c\u4f4d\u9700\u6c42\u3002\n\n\n\u53a6\u95e8\u7684IT\u884c\u4e1a\u4e03\u5927\u7ec6\u5206\u9886\u57df\u7684\u62db\u8058\u6574\u4f53\u72b6\u51b5\n\n\n\u5176\u4e2d\uff0csize\u8868\u793a\u7684\u662f\u62db\u8058\u804c\u4f4d\u7684\u6570\u91cf\uff0cmean\u8868\u793a\u7684\u662f\u804c\u4f4d\u7684\u5e73\u5747\u85aa\u8d44\uff0cmidian\u8868\u793a\u7684\u662f\u85aa\u8d44\u4e2d\u4f4d\u6570\n\n\nd_city[d_city[\ncity\n] == u\n\u53a6\u95e8\n]\n\n\n\n\n\n\n\n  \n\n    \n\n      \n\n      \ncity\n\n      \nfirst_tag\n\n      \nsize\n\n      \nmean\n\n      \nmedian\n\n    \n\n  \n\n  \n\n    \n\n      \n21\n\n      \n\u53a6\u95e8\n\n      \n\u4ea7\u54c1\n\n      \n378.0\n\n      \n10.279101\n\n      \n10.00\n\n    \n\n    \n\n      \n22\n\n      \n\u53a6\u95e8\n\n      \n\u5e02\u573a\u4e0e\u9500\u552e\n\n      \n184.0\n\n      \n8.388587\n\n      \n7.25\n\n    \n\n    \n\n      \n23\n\n      \n\u53a6\u95e8\n\n      \n\u6280\u672f\n\n      \n403.0\n\n      \n12.493797\n\n      \n11.50\n\n    \n\n    \n\n      \n24\n\n      \n\u53a6\u95e8\n\n      \n\u804c\u80fd\n\n      \n59.0\n\n      \n6.745763\n\n      \n5.00\n\n    \n\n    \n\n      \n25\n\n      \n\u53a6\u95e8\n\n      \n\u8bbe\u8ba1\n\n      \n188.0\n\n      \n9.425532\n\n      \n9.00\n\n    \n\n    \n\n      \n26\n\n      \n\u53a6\u95e8\n\n      \n\u8fd0\u8425\n\n      \n393.0\n\n      \n7.541985\n\n      \n6.00\n\n    \n\n    \n\n      \n27\n\n      \n\u53a6\u95e8\n\n      \n\u91d1\u878d\n\n      \n3.0\n\n      \n29.666667\n\n      \n30.00\n\n    \n\n  \n\n\n\n\n\n\n\nIT\u884c\u4e1a\u4e0d\u540c\u9886\u57df\u7684\u85aa\u8d44\u4e0e\u6c42\u804c\u8005\u5173\u7cfb\u5206\u6790\n\n\n# \u4e3b\u8981\u4ece\u6c42\u804c\u8005\u7684\u5b66\u5386\u548c\u5de5\u4f5c\u7ecf\u9a8c\u63a2\u8ba8IT\u4e03\u5927\u5206\u652f\u9886\u57df\u7684\u85aa\u8d44\u548c\u62db\u8058\u9700\u6c42\njobseeker_education = data.groupby([\neducation\n, \nfirst_tag\n])[\nsalary\n].aggregate([np.size, np.mean])\njobseeker_education = jobseeker_education.reset_index()\neducation_list = data.groupby(\neducation\n)[\nsalary\n].count().sort_values(ascending=False).index.values.tolist()\nparam_dist = {\neducation\n: u\n\u5b66\u5386\n, \ncity\n: u\n\u57ce\u5e02\n, \nwork_experience\n: u\n\u5de5\u4f5c\u7ecf\u9a8c\n, \nsize\n: u\n\u6570\u91cf\n, \nmean\n: u\n\u5e73\u5747\u85aa\u8d44\n}\njobseeker_experience = data.groupby([\nwork_experience\n, \nfirst_tag\n])[\nsalary\n].aggregate([np.size, np.mean])\njobseeker_experience = jobseeker_experience.reset_index()\nexperience_list = data.groupby(\nwork_experience\n)[\nsalary\n].count().sort_values(ascending=False).index.values.tolist()\n\n\n\n\ndef domains_relation(dataframe, evalute_method, hue_param, hue_order=None):    \n    plt.figure(figsize=(8,6))\n    g = sns.barplot(x=\nfirst_tag\n, y=evalute_method, data=dataframe, hue=hue_param, hue_order=hue_order, palette=\nSet1\n)\n    plt.xticks(g.get_xticks(), fontproperties=font, fontsize=16)\n    plt.ylabel(u\n\u62db\u8058\u804c\u4f4d{}\n.format(param_dist.get(evalute_method)), fontsize=16, fontproperties=font)\n    plt.xlabel(\n)\n    plt.title(u\nIT\u884c\u4e1a\u5404\u9886\u57df\u62db\u8058\u804c\u4f4d{0}\u4e0e{1}\n.format(param_dist.get(evalute_method), param_dist.get(hue_param)), fontproperties=font, fontsize=20)\n    plt.gca().yaxis.grid(True, linestyle = \n-.\n,)\n    plt.legend(loc=\nbest\n,prop=font, fontsize=17)\n\n\n\n\nfor method in [\nsize\n, \nmean\n]:\n    domains_relation(jobseeker_education, method, \neducation\n, education_list)\n\n\n\n\n\n\n\n\nfor method in [\nsize\n, \nmean\n]:\n    domains_relation(jobseeker_experience, method, \nwork_experience\n, experience_list)\n\n\n\n\n\n\n\n\n\u62db\u8058\u9700\u6c42\u8981\u6c42\u6700\u591a\u7684\u5b66\u5386\u662f\u672c\u79d1\uff0c\u5176\u6b21\u662f\u5927\u4e13\uff0c\u53ea\u6709\u5728\u5e02\u573a\u4e0e\u9500\u552e\u9886\u57df\uff0c\u672c\u79d1\u9700\u6c42\u7565\u4f4e\u4e8e\u5927\u4e13\uff1b\u5de5\u4f5c\u7ecf\u9a8c\u4e0a\uff0c\u6280\u672f\u76f8\u5173\u7684\u9886\u57df\u9700\u6c42\u6700\u5927\u7684\u662f3-5\u5e74\u5de5\u4f5c\u7ecf\u9a8c\uff0c\u5176\u6b21\u662f1-3\u5e74\uff0c\u800c\u5176\u4ed6\u975e\u6280\u672f\u7684\u9700\u6c42\u6700\u591a\u7684\u662f1-3\u5e74\uff0c\u5176\u6b21\u662f3-5\u5e74\uff1b\n\n\n\u85aa\u8d44\u65b9\u9762\uff0c\u57fa\u672c\u5448\u73b0\u51fa\u5b66\u5386\u8d8a\u9ad8\u3001\u5de5\u4f5c\u7ecf\u9a8c\u8d8a\u4e30\u5bcc\u85aa\u8d44\u8d8a\u9ad8\u7684\u8d8b\u52bf\uff0c\u5076\u5c14\u6709\u7279\u6b8a\u60c5\u51b5\u3002\n\n\n\u4e00\u822c\u800c\u8a00\uff0c\u6c42\u804c\u8005\u7684\u5b66\u5386\u8f83\u9ad8\u6216\u5de5\u4f5c\u7ecf\u9a8c\u4e30\u5bcc\uff0c\u5176\u85aa\u8d44\u8f83\u9ad8\uff0c\u8fd9\u4e0e\u4e0a\u9762\u7684\u67f1\u72b6\u56fe\u7684\u6574\u4f53\u8d8b\u52bf\u662f\u543b\u5408\u7684\uff1b\u62db\u8058\u9700\u6c42\u6700\u591a\u7684\u5b66\u5386\u662f\u672c\u79d1\uff0c\u5176\u6b21\u662f\u5927\u4e13\uff0c\u5de5\u4f5c\u7ecf\u9a8c\u8981\u6c423-5\u5e74\u62161-3\u5e74\u5c45\u591a\u3002\n\n\nIT\u884c\u4e1a\u4e0d\u540c\u9886\u57df\u7684\u85aa\u8d44\u4e0e\u62db\u8058\u4f01\u4e1a\u5173\u7cfb\u5206\u6790\n\n\n# \u4ece\u62db\u8058\u4f01\u4e1a\u7684\u89c4\u6a21\u548c\u91d1\u878d\u72b6\u51b5\u63a2\u8ba8\u5176\u4e0e\u62db\u8058\u804c\u4f4d\u85aa\u8d44\u3001\u62db\u8058\u9700\u6c42\u7684\u5173\u7cfb\nemployee_finance = data.groupby([\nfinance_stage\n, \nfirst_tag\n])[\nsalary\n].aggregate([np.size, np.mean])\nemployee_finance = employee_finance.reset_index()\nemployee_field = data.groupby([\nindustry_field\n, \nfirst_tag\n])[\nsalary\n].aggregate([np.size, np.mean])\nemployee_field = employee_field.reset_index()\n# education_list = data.groupby(\neducation\n)[\nsalary\n].count().sort_values(ascending=False).index.values.tolist()\nparam_dist = {\nindustry_field\n: u\n\u884c\u4e1a\u9886\u57df\n, \ncity\n: u\n\u57ce\u5e02\n, \nfinance_stage\n: u\n\u91d1\u878d\u72b6\u51b5\n, \nsize\n: u\n\u6570\u91cf\n, \nmean\n: u\n\u5e73\u5747\u85aa\u8d44\n}\n\n\n\n\ndef domains_employee(dataframe, evalute_method, hue_param, hue_order=None):    \n    plt.figure(figsize=(12,8))\n    hue_order = data.groupby(hue_param)[\nsalary\n].aggregate(eval('np.'+evalute_method)).sort_values(ascending=False).index\n    g = sns.barplot(x=\nfirst_tag\n, y=evalute_method, data=dataframe, hue=hue_param, hue_order=hue_order, palette=\nSet1\n)\n    plt.xticks(g.get_xticks(), fontproperties=font, fontsize=16)\n    plt.ylabel(u\n\u62db\u8058\u804c\u4f4d{}\n.format(param_dist.get(evalute_method)), fontsize=16, fontproperties=font)\n    plt.xlabel(\n)\n    plt.title(u\nIT\u884c\u4e1a\u5404\u9886\u57df\u62db\u8058\u804c\u4f4d{0}\u4e0e\u4f01\u4e1a{1}\n.format(param_dist.get(evalute_method), param_dist.get(hue_param)), fontproperties=font, fontsize=20)\n    plt.gca().yaxis.grid(True, linestyle = \n-.\n,)\n    plt.legend(loc=\nbest\n,prop=font, fontsize=17)\n\n\n\n\nfor method in [\nsize\n, \nmean\n]:\n    domains_employee(employee_finance, method, \nfinance_stage\n)\n\n\n\n\n\n\n\n\nfor method in [\nsize\n, \nmean\n]:\n    domains_employee(employee_field, method, \nindustry_field\n)\n\n\n\n\n\n\n\n\n\u62db\u8058\u9700\u6c42\u4e2d\u6700\u591a\u7684\u662f\u6280\u672f\u9886\u57df\uff0c\u4e0a\u5e02\u516c\u53f8\u548c\u6210\u957f\u6027\u516c\u53f8\u7684\u62db\u8058\u9700\u6c42\u65fa\u76db\uff0c\u4f46\u5e73\u5747\u85aa\u8d44\u6700\u591a\u7684\u5374\u662f\u6210\u719f\u578b\u516c\u53f8\u5176\u6b21\u624d\u662f\u4e0a\u5e02\u548c\u6210\u957f\u578b\u516c\u53f8\u3002\u4ece\u516c\u53f8\u6240\u5c5e\u7c7b\u578b\u4e0a\u770b\uff0c\u79fb\u52a8\u4e92\u8054\u7f51\u7684\u62db\u8058\u9700\u6c42\u6700\u591a\uff08\u90e8\u5206\u539f\u56e0\u662f\u5206\u7c7b\u7684\u65f6\u5019\u5c06\u6240\u6709\u8ddf\u79fb\u52a8\u4e92\u8054\u7f51\u6cbe\u8fb9\u7684\u516c\u53f8\u5747\u5212\u5206\u5230\u79fb\u52a8\u4e92\u8054\u7f51\u9886\u57df\u4e86\uff09\uff0c\u85aa\u8d44\u4e0a\uff0c\u91d1\u878d\u9886\u57df\u6700\u9ad8\uff0c\u63a5\u7740\u662fO2O\u3001\u793e\u4ea4\u7f51\u7edc\u3001\u6570\u636e\u670d\u52a1\u7b49\u4e00\u4e9b\u65b0\u578b\u7684\u7f51\u7edc\u79d1\u6280\u516c\u53f8\uff0c\u8d85\u8fc7\u4e86\u4f20\u7edf\u7684\u4e92\u8054\u7f51\u516c\u53f8\u7684\u85aa\u8d44\u6c34\u5e73\u3002\n\n\nIT\u4e03\u5927\u9886\u57df\u7684\u6280\u672f\u7c7b\u4e2d\u7684\u540e\u7aef\u5f00\u53d1\u5c97\u4f4d\u63cf\u8ff0\u6027\u5206\u6790\n\n\ndef IT_occupies(dataframe, content, evaluate_method):\n    \n\u8ba1\u7b97\u62c9\u52fe\u7f51\u6280\u672f\u5927\u7c7b\u4e2d\u540e\u7aef\u5f00\u53d1\u7684\u804c\u4f4d\u6570\u91cf\u3001\u85aa\u8d44\u60c5\u51b5\n \n    # \u83b7\u53d6IT\u6280\u672f\u7c7b\u4e2d\u7684\u540e\u7aef\u5f00\u53d1\u5c97\u4f4d\u4fe1\u606f  \n    technology_backend = dataframe.loc[dataframe[\nsecond_tag\n]==u\n\u540e\u7aef\u5f00\u53d1\n,:]\n     # \u7edf\u8ba1\u6240\u6709\u540e\u7aef\u5f00\u53d1\u7f16\u7a0b\u8bed\u8a00\u7684\u804c\u4f4d\u9700\u6c42\u91cf\u3001\u5e73\u5747\u85aa\u8d44\u3001\u85aa\u8d44\u4e2d\u4f4d\u6570\n    tech_backend = technology_backend.groupby([\nthird_tag\n])[\nsalary\n].aggregate([eval(\nnp.\n+evaluate_method)]).sort_values(evaluate_method, ascending=False).reset_index()\n     # \u83b7\u53d6Python\u7684\u804c\u4f4d\u4fe1\u606f\u7528\u4e8e\u540e\u7eed\u753b\u56fe\u7684annotate\u7684text\u5750\u6807\u4f4d\u7f6e\u548c\u663e\u793a\u7684\u6570\u5b57\n    python_index = tech_backend.loc[tech_backend[\nthird_tag\n] == u\nPython\n, :].index.values[0]\n    python_value = tech_backend.loc[tech_backend[\nthird_tag\n] == u\nPython\n, :][evaluate_method].values[0]\n    # \u901a\u8fc7plt.subplots()\u5efa\u7acb\u4e00\u4e2aaxis\u5b50\u56fe\u7528\u4e8e\u540e\u7eed\u7ed8\u56fe\n    fig, ax = plt.subplots(figsize=(10,8))\n    # \u8c03\u7528seaborn\u7684barplot\u8fdb\u884c\u7ed8\u56fe\n    g = sns.barplot(y=\nthird_tag\n, x=evaluate_method, data=tech_backend, palette=\nPuBu_d\n, ax=ax)\n    ax.set_yticklabels(g.get_yticklabels(), fontproperties=font, fontsize=18)\n    # \u786e\u5b9aannotate\u7684text\u6587\u672c\u4f4d\u7f6e\u7684x\u5750\u6807\u4f4d\u7f6e\n    annotate_x_delta = tech_backend[evaluate_method][0] / 10    \n    ax.set_xlabel(content, fontsize=16, fontproperties=font)\n    ax.set_ylabel(\n)\n    ax.set_title(u\n\u540e\u7aef\u5f00\u53d1\n+content, fontproperties=font, fontsize=20)\n    # sns.despine() \n    ax.annotate(str(int(python_value)), xy = (python_value, python_index), xytext = (python_value+annotate_x_delta, python_index+3), fontproperties=font, fontsize=20, arrowprops = dict(facecolor = 'k'))\n    ax.xaxis.grid(True, linestyle = \n-.\n,)\n    # \u7ed8\u5236\u540e\u7aef\u5f00\u53d1\u7f16\u7a0b\u8bed\u8a00\u767e\u5206\u6bd4\u997c\u56fe\n    if evaluate_method == \nsize\n:\n        # \u8ba1\u7b97\u540e\u7aef\u5f00\u53d1\u5404\u7f16\u7a0b\u8bed\u8a00\u7684\u804c\u4f4d\u6bd4\u4f8b        \n        tech_backend[\nposition_property\n] = tech_backend[\nsize\n] / tech_backend[\nsize\n].sum() * 100\n        pie_data = tech_backend.loc[tech_backend[\nposition_property\n] \n 1, [\nthird_tag\n, \nposition_property\n]]\n        less_than_one = 100 - pie_data[\nposition_property\n].sum()\n        pie_data.loc[pie_data[\nthird_tag\n] == u\n\u540e\u7aef\u5f00\u53d1\u5176\u5b83\n, \nposition_property\n] += less_than_one\n        pie_data.sort_values(\nposition_property\n, ascending=False, inplace=True)\n        num = len(pie_data)\n        vals = range(num) #\u521b\u5efa\u6570\u636e\u7cfb\u5217\n        labels = pie_data[\nthird_tag\n]\n        explode = np.zeros(num)\n        index_py = pie_data[pie_data[\nthird_tag\n] == u\nPython\n].index.values[0]\n        explode[index_py] += 0.15\n        fig1,ax1 = plt.subplots(figsize=(6,6))\n        ax1.pie(pie_data[\nposition_property\n], labels=labels, autopct='%1.2f%%', \n                pctdistance=.8, shadow=False, startangle=20,radius=1.2, \n                labeldistance=1.06, colors=('b', 'g', 'r', 'c', 'y', 'orange', 'm', 'yellowgreen', 'gold', 'lightskyblue', 'lightcoral'),\n                textprops={\nfontproperties\n: font, \nfontsize\n:12}, explode=explode)\n        ax1.set_title(u'\u540e\u7aef\u5f00\u53d1\u804c\u4f4d\u5206\u5e03',fontsize=20, fontproperties=font)\n        ax1.axis(\nequal\n)\n#     fig.savefig(\n/home/darren/Desktop/backend_techww.png\n)\n\n\n\n\nIT_occupies(data, u\n\u62db\u8058\u804c\u4f4d\u6570\u91cf\n, \nsize\n)\n\n\n\n\n\n\n\n\nIT_occupies(data, u\n\u5e73\u5747\u85aa\u8d44 k(\uffe5)\n, \nmean\n)\n\n\n\n\n\n\nIT_occupies(data, u\n\u85aa\u8d44\u4e2d\u4f4d\u6570 k(\uffe5)\n, \nmedian\n)\n\n\n\n\n\n\nJava\u7684\u62db\u8058\u804c\u4f4d\u4fe1\u606f\u6700\u591a,\u67092700\u591a\u62db\u8058\u804c\u4f4d\uff0c\u5360\u6bd429.37%\uff0c\u7f16\u7a0b\u8bed\u8a00\u7684\u8001\u5927\u5730\u4f4d\u4e0d\u53ef\u64bc\u52a8\uff01PHP\u804c\u4f4d\u9700\u6c42\u6b21\u4e4b\uff0c\u5360\u6bd414.08%\uff0c\u540e\u7eed\u5206\u522b\u662fC\u3001C++\u3001.NET\u3001Python\uff0c\u5176\u4e2dPython\u65e5\u9700\u6c42\u804c\u4f4d\u4e0d\u5230400\u4e2a\uff0c\u5360\u6bd45.24%\u3002\uff08\u6ce8\uff1a\u867d\u7136.NET\u4e0d\u7b97\u771f\u6b63\u7684\u7f16\u7a0b\u8bed\u8a00\uff0c\u4f46\u62c9\u52fe\u7f51\u7684\u6570\u636e\u662f\u5982\u6b64\u5206\u7c7b\uff0c\u5728\u8fd9\u4e5f\u4e00\u5e76\u5f53\u6210\u4e00\u95e8\u7f16\u7a0b\u8bed\u8a00\u770b\u5f85\uff0c\u6570\u636e\u6316\u6398\u3001\u7cbe\u51c6\u63a8\u8350\u7b49\u7c7b\u540c\uff09\n\n\n\u85aa\u8d44\u65b9\u9762\uff0c\u6700\u9ad8\u7684\u662f\u6570\u636e\u6316\u6398\u548c\u63a8\u8350\u7b97\u6cd5\u7c7b\u3001\u5176\u6b21\u662f\u4e00\u4e9b\u65b0\u5174\u7f16\u7a0b\u8bed\u8a00\u5982Go\uff0cPython\u7684\u5e73\u5747\u85aa\u8d44\u8f83\u9ad8\uff0c\u8fbe\u523019K\uff0c\u9ad8\u4e8eJava\u3001PHP\u3001C\u3001C++\u7b49\u3002\n\n\n\u6ce8\u610f\uff1a\u62c9\u52fe\u7f51\u53d1\u5e03\u85aa\u8d44\u662f\u4e00\u4e2a\u533a\u95f4\u8303\u56f4\uff0c\u56e0\u6b64\u672c\u6587\u91c7\u53d6\u7684\u662f\u8be5\u533a\u95f4\u7684\u5e73\u5747\u503c\uff0c\u4f46\u4ece\u73b0\u5b9e\u751f\u6d3b\u7684\u89c4\u5f8b\u770b\uff0c\u4f7f\u7528\u85aa\u8d44\u533a\u95f4\u7684\u6700\u4f4e\u503c\u6bd4\u8f83\u7b26\u5408\u903b\u8f91\u3002\n\n\n\u5404\u5927\u57ce\u5e02\u7684\u540e\u7aef\u5f00\u53d1\u8bed\u8a00\u7684\u804c\u4f4d\u9700\u6c42\u548c\u85aa\u8d44\u6c34\u5e73\n\n\n# seaborn\u7684pointplot\u6216matplotlib\u7684plot\u7684\u70b9\u7684\u7c7b\u578b\nmarkers = [\n            'd', '\n', '.', '*', 'x', 'o', \n            '3', '4', 's', 'p', ',', 'h', '1', 'H', '+',  \n            'D', '^', '2','v', '\n', '|'\n        ] # '_',\nparam_dist = {\ncity\n: u\n\u57ce\u5e02\n, \nsize\n: u\n\u804c\u4f4d\u9700\u6c42\u767e\u5206\u6bd4 %\n, \nmean\n: u\n\u5e73\u5747\u85aa\u8d44 k(\uffe5)\n,\n              \nmedian\n: u\n\u85aa\u8d44\u4e2d\u4f4d\u6570 k(\uffe5)\n, \ncompany_size\n: u\n\u4f01\u4e1a\u89c4\u6a21\n, \n              \nfinance_stage\n: u\n\u4f01\u4e1a\u91d1\u878d\u72b6\u51b5\n, \nwork_experience\n: u\n\u5de5\u4f5c\u7ecf\u9a8c\n, \neducation\n: u\n\u5b66\u5386\n}\n\n\n\n\ndef tech_backend_plot(second_feature, evaluate_method, lang_part=True, big_feature=u\n\u540e\u7aef\u5f00\u53d1\n):\n    \n\u8ba1\u7b97\u5404\u5927\u57ce\u5e02\u7684\u540e\u7aef\u5f00\u53d1\u7684\u7f16\u7a0b\u8bed\u8a00\u7684\u804c\u4f4d\u9700\u6c42\u548c\u85aa\u8d44\u72b6\u51b5\uff0c\u53ea\u53d6\u804c\u4f4d\u9700\u6c42\u767e\u5206\u6bd4\n5\u7684\u5e38\u89c1\u7f16\u7a0b\u8bed\u8a00\n    big_feature: IT\u4e03\u5927\u5206\u652f\u9886\u57df\u7684\u4e00\u4e2a\uff0c\u9ed8\u8ba4\u662f\u6280\u672f\n    second_feature: \u662f\u6570\u636e\u96c6\u4e2d\u9664\u4e86\u6280\u672f\u7684\u5176\u4ed6\u7279\u5f81\uff0c\u5305\u62eccity,company_size, education etc\u7aef\n    evaluate_method: \u8868\u793a\u7684\u662f\u5bf9data\u6570\u636e\u5206\u7ec4\u540e\u5bf9\u5404\u4e2a\u5206\u7ec4\u5b9e\u65bd\u7684\u7edf\u8ba1\u65b9\u6cd5\uff0c\u4e3b\u8981\u6709np.mean,np.median,np.size\n    lang_part: \u610f\u601d\u662f\u8981\u4e0d\u8981\u53d6\u540e\u7aef\u7f16\u7a0b\u8bed\u8a00\u7684\u4e00\u90e8\u5206\uff0c\u9ed8\u8ba4\u662fTrue,\u5426\u5219\u5c06\u7ed8\u5236\u6240\u6709\u7684\u540e\u7aef\u5f00\u53d1\u8bed\u8a00\n    \n\n    technology_backend = data.loc[data[\nsecond_tag\n] == big_feature,:]    \n    # \u53ea\u62bd\u53d6\u540e\u7aef\u7f16\u7a0b\u8bed\u8a00\u4e2d\u62db\u8058\u9700\u6c42\u5927\u7684\u524d7\u4e2a\u7f16\u7a0b\u8bed\u8a00\u7684\u540d\u79f0\n    targeted_lang = technology_backend['third_tag'].value_counts().index.values.tolist()[:7]\n    # \u5220\u9664\n\u540e\u7aef\u5f00\u53d1\u5176\u4ed6\u8bed\u8a00\n\uff0c\u5148\u7528\n|\n.join(targeted_lang)\u518d\u6267\u884c\u4ee5\u4e0b\u8bed\u53e5\n    if u'\\u540e\\u7aef\\u5f00\\u53d1\\u5176\\u5b83' in targeted_lang:\n        targeted_lang.remove(u'\\u540e\\u7aef\\u5f00\\u53d1\\u5176\\u5b83') \n\n    tech_backend = technology_backend.groupby([second_feature, \nthird_tag\n])[\nsalary\n].aggregate([eval(\nnp.\n + evaluate_method)]).reset_index()    \n    # \u53ea\u8bc4\u4f30Java\u3001C\u3001C++\u3001Python\u7b496\u4e2a\u540e\u7aef\u7f16\u7a0b\u8bed\u8a00\n    if lang_part:\n        tech_backend = tech_backend[tech_backend['third_tag'].str.contains(u'Java|PHP|C|C\\+\\+|\\.NET|Python')]\n    # \u540e\u7aef\u7f16\u7a0b\u8bed\u8a00\u7684\u540d\u79f0\u5217\u8868\uff0c\u7528\u4e8e\u7ed8\u56fe\u7684tickslabels\u8bbe\u7f6e\n    second_feature_list = tech_backend[second_feature].unique().tolist()\n    # \u5bf9\u8bc4\u4f30\u804c\u4f4d\u9700\u6c42\u7684\uff0c\u91c7\u7528\u767e\u5206\u6bd4\n    if evaluate_method == \nsize\n:\n        for i in second_feature_list:\n            one_data = tech_backend.loc[tech_backend[second_feature] == i, :]\n            index_ = one_data.index\n            total_ = one_data[evaluate_method].sum()\n            # \u5728tech_backend\u7684DataFrame\u65b0\u5efa\u4e00\u4e2a\u7279\u5f81property\uff0c\u5b58\u653e\u8ba1\u7b97\u5404\u4e2a\u7f16\u7a0b\u8bed\u8a00\u5728second_feature\u4e2d\u7684\u767e\u5206\u6bd4\uff0c\u5982second_feature\u662fcity\n            tech_backend.ix[index_, \nproperty\n] = one_data[evaluate_method] / total_ * 100\n    # \u7528\u4e8eseaborn barplot\u7684hue_order\u987a\u5e8f\u5217\u8868\n    backend_lang = tech_backend.groupby(\nthird_tag\n)[evaluate_method].sum().sort_values(ascending=False).index.values.tolist()\n    # \u7528\u4e8eseaborn barplot\u7684order\u987a\u5e8f\u5217\u8868    \n    backend_second_feature = tech_backend.groupby(second_feature)[evaluate_method].sum().sort_values(ascending=False).index.values.tolist()\n\n    plt.figure(figsize=(12,10))\n    with sns.color_palette(\nPuBuGn_d\n):\n        if evaluate_method == \nsize\n:\n            y_str = \nproperty\n\n        else:\n            y_str = evaluate_method\n        g = sns.pointplot(y=y_str, x=second_feature, hue=\nthird_tag\n, hue_order=backend_lang, order=backend_second_feature,\n                       data=tech_backend, size=10, markers=markers, index=True,\n                       aspect=1.2, legend=False, dodge=True)\n    plt.xticks(g.get_xticks(), fontproperties=font, fontsize=16, rotation=45)\n    plt.ylabel(u\n{0}\n.format(param_dist.get(evaluate_method)), fontsize=16, fontproperties=font)\n    plt.xlabel(\n)\n    plt.title(u\n\u540e\u7aef\u5f00\u53d1\u7f16\u7a0b\u8bed\u8a00\u4e0e\u4e0d\u540c{0}\u7684{1}\n.format(param_dist.get(second_feature),param_dist.get(evaluate_method)), fontproperties=font, fontsize=23)\n    plt.gca().yaxis.grid(True, linestyle = \n-.\n,)\n    plt.legend(loc=\nbest\n,prop=font, fontsize=8)\n\n\n\n\ntech_backend_plot(\ncity\n, \nsize\n)\n\n\n\n\n\n\ntech_backend_plot(\ncity\n, \nmean\n)\n\n\n\n\n\n\ntech_backend_plot(\ncity\n, \nmedian\n)\n\n\n\n\n\n\n\u5317\u4eac\u3001\u4e0a\u6d77\u3001\u6df1\u5733\u3001\u5e7f\u5dde\u3001\u676d\u5dde\u7684IT\u884c\u4e1a\u9700\u6c42\u91cf\u6700\u591a\uff0c\u85aa\u8d44\u4e5f\u8f83\u9ad8\uff08\u5e7f\u5dde\u85aa\u8d44\u504f\u4f4e\uff09\uff0c\u5c5e\u4e8e\u7b2c\u4e00\u68af\u961f\uff1b\u4ece\u5404\u7f16\u7a0b\u8bed\u8a00\u770b\uff0cJava\u7edd\u5bf9\u7684\u9738\u4e3b\u5730\u4f4d\uff0c\u4f46\u5728\u4e00\u7ebf\u53d1\u8fbe\u57ce\u5e02\uff0cJava\u8bed\u8a00\u6240\u5360\u7684\u6bd4\u4f8b\u8fdc\u4f4e\u4e8e\u5176\u4ed6\u57ce\u5e02\u7684\u6bd4\u4f8b\uff0c\u5373\u4e00\u7ebf\u53d1\u8fbe\u57ce\u5e02\u5404\u79cd\u7f16\u7a0b\u8bed\u8a00\u90fd\u6709\u53d1\u5c55\u673a\u4f1a\uff0c\u800c\u4e8c\u7ebf\u57ce\u5e02\u8fd8\u5c40\u9650\u5728\u51e0\u95e8\u7f16\u7a0b\u8bed\u8a00\u4e2d\uff0c\u5982\u6d4e\u5357\uff0cJava\u5360\u6d4e\u5357\u804c\u4f4d\u9700\u6c42\u768480%\u5de6\u53f3\uff0cPHP\u5360\u6bd415%\u5de6\u53f3\uff0c.NET\u5360\u6bd45%\u5de6\u53f3\uff1bPython\u9700\u6c42\u5360\u6bd4\u6700\u5927\u7684\u662f\u5317\u4eac\uff0c\u5176\u6b21\u662f\u4e0a\u6d77\u548c\u676d\u5dde\uff0c\u76f8\u6bd4\u5176\u4ed6\u8bed\u8a00\uff0cPython\u62db\u8058\u9700\u6c42\u8f83\u5c0f\uff0c\u4f46\u85aa\u8d44\u8f83\u9ad8\u3002\n\n\ntech_backend_plot(\nfinance_stage\n, \nsize\n)\n\n\n\n\n\n\n\u4ece\u62db\u8058\u9700\u6c42\u4e0a\u770b\uff0cJava\u7684\u62db\u8058\u9700\u6c42\u6700\u591a\uff0c\u5176\u6b21\u662fPHP\uff0cPython\u62db\u8058\u804c\u4f4d\u8f83\u4f4e\uff0c\u4f46Python\u7684\u85aa\u8d44\u8f83\u9ad8\u3002\n\n\ntech_backend_plot(\nfinance_stage\n, \nmean\n)\n\n\n\n\n\n\ntech_backend_plot(\nfinance_stage\n, \nmedian\n)\n\n\n\n\n\n\ntech_backend_plot(\ncompany_size\n, \nsize\n)\n\n\n\n\n\n\ntech_backend_plot(\ncompany_size\n, \nmean\n)\n\n\n\n\n\n\ntech_backend_plot(\ncompany_size\n, \nmedian\n)\n\n\n\n\n\n\n\u516c\u53f8\u89c4\u6a21\u4e0e\u62db\u8058\u9700\u6c42\u548c\u85aa\u8d44\u6298\u7ebf\u56fe\u770b\u51fa\uff0c\u5927\u578b\u516c\u53f8\u5bf9Java\u7684\u9700\u6c42\u6700\u591a\uff0c\u5c0f\u578b\u516c\u53f8\u5bf9PHP\u548cPython\u7684\u9700\u6c42\u8f83\u5927\uff08\u6ce8\u610f\uff0c\u56fe\u4e2d\u4e00\u79cd\u7c7b\u578b\u7684\u516c\u53f8\u4e2d\u5404\u4e2a\u7f16\u7a0b\u8bed\u8a00\u5360\u6bd4\u4e4b\u548c\u662f100%\uff0c\u5176\u4ed6\u6298\u7ebf\u56fe\u4e5f\u7c7b\u4f3c\uff09\u3002\u85aa\u8d44\u65b9\u9762\uff0c\u5927\u578b\u516c\u53f8\u7684\u85aa\u8d44\u6700\u9ad8\uff0c\u5176\u6b21\u662f\u4e2d\u578b\u516c\u53f8\uff0c\u6700\u4f4e\u662f\u5c0f\u578b\u516c\u53f8\u3002\n\n\ntech_backend_plot(\nwork_experience\n, \nsize\n)\n\n\n\n\n\n\ntech_backend_plot(\nwork_experience\n, \nmean\n)\n\n\n\n\n\n\n\u85aa\u8d44\u57fa\u672c\u4e0e\u5de5\u4f5c\u7ecf\u9a8c\u6210\u6b63\u6bd4\u3002\n\n\ntech_backend_plot(\neducation\n, \nmedian\n)\n\n\n\n\n\n\ntech_backend_plot(\neducation\n, \nmean\n)\n\n\n\n\n\n\ntech_backend_plot(\neducation\n, \nsize\n)\n\n\n\n\n\n\n\u4e0a\u56fe\u8868\u793a\u7684\u662f\u4e0d\u540c\u5b66\u5386\u7684\u804c\u4f4d\u9700\u6c42\u767e\u5206\u6bd4\uff0c\u5373\u672c\u79d1\u5b66\u5386\u4e2d\uff0c\u5404\u4e2a\u540e\u7aef\u5f00\u53d1\u8bed\u8a00\u62db\u8058\u9700\u6c42\u7684\u767e\u5206\u6bd4\uff08\u672c\u79d1\u5b66\u5386\u4e2d\u8fd96\u79cd\u7f16\u7a0b\u8bed\u8a00\u7684\u767e\u5206\u6bd4\u4e4b\u548c\u4e3a100%\uff09\uff0c\u7531\u4e8eC#\u548c.NET\u5728\u7855\u58eb\u5b66\u5386\u4e0a\u6ca1\u6709\u62db\u8058\u9700\u6c42\uff0c\u6240\u4ee5\uff0c\u867d\u7136C++\u3001C\u3001Python\u7684\u7855\u58eb\u5b66\u5386\u9700\u6c42\u767e\u5206\u6bd4\u660e\u663e\u589e\u591a\uff0c\u5e76\u4e0d\u4e00\u5b9a\u4ee3\u8868\u4e86\u8fd93\u95e8\u7f16\u7a0b\u8bed\u8a00\u5bf9\u9ad8\u5b66\u5386\u7684\u7edd\u5bf9\u9700\u6c42\u8d85\u8fc7\u4e86\u5176\u4ed6\u76f8\u5bf9\u4f4e\u5b66\u5386\uff0c\u53ea\u662f\u76f8\u5bf9\u800c\u8a00\uff0cC\u548cC++\u66f4\u9752\u7750\u4e8e\u9ad8\u5b66\u5386\u6c42\u804c\u8005\u3002\u4ece\u524d\u9762\u7684\u5206\u6790\u53ef\u77e5\uff0c\u672c\u79d1\u548c\u5927\u4e13\u662f\u62db\u8058\u4f01\u4e1a\u7684\u9996\u5148\u5b66\u5386\u3002\n\n\n\u85aa\u8d44\u4e0e\u5b66\u5386\u57fa\u672c\u6210\u6b63\u6bd4\n\n\n\u62c9\u52fe\u7f51Python\u804c\u4f4d\u63cf\u8ff0\u6027\u5206\u6790\n\n\nparam_dist = {\nsize\n: u\n\u62db\u8058\u804c\u4f4d\u6570\u91cf\u4e0e\u767e\u5206\u6bd4\n, \nmean\n: u\n\u5e73\u5747\u85aa\u8d44\n, \n              \nmedian\n: u\n\u85aa\u8d44\u4e2d\u4f4d\u6570\n,             \n             }\n\n\n\n\ndef series_bar_plot(lang, feature, evaluate_method):\n    \n\n    \u7ed8\u5236\u4e00\u95e8\u7f16\u7a0b\u8bed\u8a00\u7684\u804c\u4f4d\u9700\u6c42\u3001\u85aa\u8d44\u7684\u67f1\u72b6\u56fe\n    lang: \u7f16\u7a0b\u8bed\u8a00\u540d\u79f0\n    feature: \u6570\u636e\u5206\u7ec4\u7684\u4f9d\u636e\u7279\u5f81\n    evaluate_method: \u5b9e\u65bd\u5230\u5206\u7ec4\u540e\u7684\u6570\u636e\u7684\u7edf\u8ba1\u65b9\u6cd5\n    \n\n    # \u83b7\u53d6\u4e00\u95e8\u7f16\u7a0b\u8bed\u8a00\u7684\u6240\u6709\u62db\u8058\u4fe1\u606f\u6570\u636e\n    data_lang = data[data[\nthird_tag\n] == lang]\n    # \u6839\u636efeature\u5c06\u6570\u636e\u96c6\u5206\u7ec4\uff0c\u5e76\u4f9d\u636eevaluate_method\u5bf9\u5206\u7ec4\u540e\u7684\u6570\u636e\u8fdb\u884c\u7edf\u8ba1\n    one_series = data_lang.groupby([feature])['salary'].aggregate([eval('np.'+evaluate_method)]).sort_values(evaluate_method, ascending=False)\n\n    fig, ax1 = plt.subplots(figsize=(8,6))  # \u4f7f\u7528subplots()\u521b\u5efa\u7a97\u53e3    \n    g = sns.barplot(y=one_series[evaluate_method], x=one_series.index, palette=\nBuGn_d\n, ax=ax1)\n    # \u7edf\u8ba1\u65b9\u6cd5\u662fcout/size\u5c31\u7ed8\u5236\u53ccy\u8f74\u56fe\n    if evaluate_method == \nsize\n:\n        ax2 = ax1.twinx() # \u521b\u5efa\u7b2c\u4e8c\u4e2a\u5750\u6807\u8f74\n        x_list = range(len(one_series))\n        y_point_list = one_series[evaluate_method] / one_series[evaluate_method].sum() * 100\n        ax2.plot(x_list, y_point_list, linewidth = 3, color=\ng\n, marker=\no\n, label=u\n\u804c\u4f4d\u9700\u6c42\u767e\u5206\u6bd4\n) \n        ax2.legend(loc=\nbest\n, prop=font)\n        ax2.set_ylabel(u'\u62db\u8058\u804c\u4f4d\u6570\u91cf\u767e\u5206\u6bd4%', fontproperties=font, fontsize = 16)\n    ax1.set_xlabel(\n) \n    ax1.set_ylabel(param_dist.get(evaluate_method), fontsize=16, fontproperties=font)\n    x_ticks_l = [i for i in one_series.index]\n    ax1.set_xticklabels(x_ticks_l, fontproperties=font, fontsize=16, rotation= 90 if feature == \nfinance_stage\n else 30)\n    ax1.yaxis.grid(True, linestyle = \n-.\n,)\n    ax1.set_title(lang+param_dist.get(evaluate_method),fontproperties=font,fontsize=25)\n    plt.xticks(g.get_xticks(), fontproperties=font, fontsize=16)\n\n\n\n\nseries_bar_plot(\nPython\n, \ncity\n, \nsize\n)\n\n\n\n\n\n\nseries_bar_plot(\nPython\n, \ncity\n, \nmean\n)\n\n\n\n\n\n\nseries_bar_plot(\nPython\n, \ncity\n, \nmedian\n)\n\n\n\n\n\n\nseries_bar_plot(\nPython\n, \nfinance_stage\n, \nsize\n)\n\n\n\n\n\n\nseries_bar_plot(\nPython\n, \nfinance_stage\n, \nmean\n)\n\n\n\n\n\n\nseries_bar_plot(\nPython\n, \nfinance_stage\n, \nmedian\n)\n\n\n\n\n\n\nfor i in [\nsize\n, \nmean\n, \nmedian\n]:\n    series_bar_plot(\nPython\n, \ncompany_size\n, i)\n\n\n\n\n\n\n\n\n\n\nfor i in [\nsize\n, \nmean\n, \nmedian\n]:\n    series_bar_plot(\nPython\n, \nwork_experience\n, i)\n\n\n\n\n\n\n\n\n\n\nfor i in [\nsize\n, \nmean\n, \nmedian\n]:\n    series_bar_plot(\nPython\n, \neducation\n, i)\n\n\n\n\n\n\n\n\n\n\nPython\u7684\u62db\u8058\u9700\u6c42\u603b\u91cf\u4e0d\u591a\uff0c\u4f46\u5e73\u5747\u85aa\u8d44\u8f83\u9ad8\uff0c\u8fd9\u4e5f\u7b26\u5408\u65b0\u5174\u8bed\u8a00\u7684\u7279\u70b9\u3002\n\n\nPython\u62db\u8058\u9700\u6c42\u6700\u591a\u7684\u4f9d\u65e7\u662f\u5317\u4eac\uff0c\u5176\u6b21\u4e0a\u6d77\uff0c\u5e73\u5747\u85aa\u8d44\u6700\u9ad8\u7684\u8fd8\u662f\u5317\u4eac\uff0c\u5176\u6b21\u662f\u6df1\u5733\u548c\u4e0a\u6d77\u3002\u4ece\u62db\u8058\u516c\u53f8\u7684\u89d2\u5ea6\u5206\u6790\uff0c\u4e2d\u578b\u7684\u6210\u719f\u548c\u6210\u957f\u6027\u516c\u53f8\u7684\u62db\u8058\u9700\u6c42\u548c\u85aa\u8d44\u6c34\u5e73\u90fd\u8f83\u9ad8\uff0c\u5927\u578b\u4e0a\u5e02\u516c\u53f8\u7684\u85aa\u8d44\u9ad8\u4f46\u62db\u8058\u9700\u6c42\u6ca1\u6709\u4e2d\u578b\u516c\u53f8\u591a\uff0c50\u4eba\u4ee5\u4e0b\u7684\u521d\u521b\u516c\u53f8\u7684\u62db\u8058\u9700\u6c42\u548c\u85aa\u8d44\u90fd\u662f\u6700\u4f4e\u3002\n\n\n\u5de5\u4f5c\u7ecf\u9a8c\u65b9\u9762\uff0c\u9700\u6c42\u6700\u5927\u7684\u662f3-5\u5e74\uff0c\u5176\u6b21\u662f1-3\u5e74\uff0c\u85aa\u8d44\u8ddf\u5de5\u4f5c\u7ecf\u9a8c\u57fa\u672c\u6210\u6b63\u6bd4\uff0c\u6709\u4e00\u4e2a\u7279\u4f8b\u662f\u5e94\u5c4a\u6bd5\u4e1a\u751f\uff0c\u5176\u5e73\u5747\u85aa\u8d44\u7adf\u7136\u9ad8\u4e8e\u67093\u5e74\u5de5\u4f5c\u7ecf\u9a8c\u7684\u6c42\u804c\u8005\uff01\u4ed4\u7ec6\u5206\u6790\u53d1\u73b0\uff0c\u5e94\u5c4a\u6bd5\u4e1a\u751f\u7684\u62db\u8058\u9700\u6c42\u975e\u5e38\u4e4b\u4f4e\uff0c\u6240\u4ee5\uff0c\u5e94\u5c4a\u6bd5\u4e1a\u751f\u7684\u9ad8\u85aa\u5176\u5b9e\u662f\u7531\u4e8e\u6837\u672c\u91cf\u592a\u5c11\u53c8\u53c8\u53d7\u5230\u7ec4\u5185\u79bb\u7fa4\u503c\u7684\u5e72\u6270\uff0c\u9020\u6210\u5e73\u5747\u85aa\u8d44\u5f88\u9ad8\u3002\n\n\n\u67e5\u8be2\u6570\u636e\u96c6\uff0c\u53d1\u73b0\u53ea\u6709\u5317\u4eac\u9ad8\u7ef4\u6570\u91d1\u79d1\u6280\u6709\u9650\u516c\u53f8\u660e\u786e\u6807\u660e\u62db\u8058\u5e94\u5c4a\u6bd5\u4e1a\u751f\uff0c\u5e73\u5747\u85aa\u8d44\u662f22k\uff0c\u56e0\u6b64\u672c\u6587\u4e2d\u5e94\u5c4a\u6bd5\u4e1a\u751f\u7684\u4fe1\u606f\u6ca1\u6709\u592a\u5927\u53c2\u8003\u610f\u4e49\u3002\n\n\n\u5e73\u5747\u85aa\u8d44\u4e0e\u5b66\u5386\u4e5f\u6210\u6b63\u6bd4\uff0c\u4f46\u672c\u79d1\u5b66\u5386\u7684\u62db\u8058\u9700\u6c42\u8fdc\u8fdc\u8d85\u8fc7\u5176\u4ed6\u5b66\u5386\u3002\n\n\n# data_lang = data[data[\nthird_tag\n] == \nPython\n]\n# one_series = data_lang.groupby([\ncompany_size\n])['salary'].aggregate([np.size]).sort_values(\nsize\n, ascending=False)\ndata_py = data[data[\nthird_tag\n] == \nPython\n]\n\n\n\n\ndata_py.loc[data_py[\nwork_experience\n] == u\n\u5e94\u5c4a\u6bd5\u4e1a\u751f\n, :]\n\n\n\n\n\n\n\n  \n\n    \n\n      \n\n      \nfinance_stage\n\n      \ncity\n\n      \ndist\n\n      \nsalary\n\n      \njob_nature\n\n      \nindustry_field\n\n      \ncompany\n\n      \nthird_tag\n\n      \npublished_time\n\n      \nsecond_tag\n\n      \nposition_advantage\n\n      \nfirst_tag\n\n      \nlast_login\n\n      \nwork_experience\n\n      \nposition_type\n\n      \nposition\n\n      \neducation\n\n      \ncrawl\n\n      \ncompany_size\n\n      \nday\n\n    \n\n  \n\n  \n\n    \n\n      \n79248\n\n      \n\u6210\u957f\u578b(\u4e0d\u9700\u8981\u878d\u8d44)\n\n      \n\u5317\u4eac\n\n      \n\u671d\u9633\u533a\n\n      \n22.5\n\n      \n\u5168\u804c\n\n      \n\u79fb\u52a8\u4e92\u8054\u7f51\n\n      \n\u5317\u4eac\u9ad8\u7ef4\u6570\u91d1\u79d1\u6280\u6709\u9650\u516c\u53f8\n\n      \nPython\n\n      \n2017/8/4 10:11\n\n      \n\u540e\u7aef\u5f00\u53d1\n\n      \n\u5e74\u5e95\u53cc\u85aa,\u5f39\u6027\u5236\u529e\u516c,15\u5929\u5e74\u5047\n\n      \n\u6280\u672f\n\n      \n1.500000e+12\n\n      \n\u5e94\u5c4a\u6bd5\u4e1a\u751f\n\n      \n\u540e\u7aef\u5f00\u53d1\n\n      \npython\u5f00\u53d1\u9ad8\u7ea7\u5de5\u7a0b\u5e08\n\n      \n\u672c\u79d1\n\n      \n2017/8/4\n\n      \n50-150\u4eba\n\n      \n2017/8/4\n\n    \n\n  \n\n\n\n\n\n\n\n# \u66ff\u6362position\u63cf\u8ff0\n# data_py[\nposition\n] = data_py[\nposition\n].str.replace(u\n(.*?)\u9ad8\u7ea7(.*)\n, \n\\\\1\\\\2\n)\n# data_py[\nposition\n].replace(u\n.*?\u7814\u53d1.*\n, u\n\u5f00\u53d1\n, regex=True, inplace=True)\n# data_py[\nposition\n].replace(u\n.*?\u722c\u866b.*\n, u\n\u722c\u866b\n, regex=True, inplace=True)\n# data_py[\nposition\n].replace(u\n.*?\u6570\u636e.*\n, u\n\u6570\u636e\n, regex=True, inplace=True)\n# data_py[\nposition\n].replace(u\n.*?\u5168\u6808.*\n, u\n\u5168\u6808\n, regex=True, inplace=True)\n# data_py[\nposition\n].replace(u\n.*?\u8fd0\u7ef4.*\n, u\n\u8fd0\u7ef4\n, regex=True, inplace=True)\n# data_py[\nposition\n].replace(u\n.*?\u7b97\u6cd5.*\n, u\n\u7b97\u6cd5\n, regex=True, inplace=True)\n# data_py[\nposition\n].replace(u\n.*?\u540e\u7aef.*\n,u\n\u540e\u7aef\n, regex=True, inplace=True)\n# data_py[\nposition\n].replace(u\n.*?\u540e\u53f0.*\n,u\n\u540e\u7aef\n, regex=True, inplace=True)\n# data_py[\nposition\n].replace(u\n.*?\u5b89\u5168.*\n,u\n\u5b89\u5168\n, regex=True, inplace=True)\n# data_py[\nposition\n] = data_py[\nposition\n].str.replace(r\n.*?web.*\n,u\n\u540e\u7aef\n, flags=re.IGNORECASE)\n# data_py[\nposition\n].replace(u\n.*?\u670d\u52a1[\u5668|\u7aef].*\n,u\n\u540e\u7aef\n, regex=True, inplace=True)\n# data_py[\nposition\n] = data_py[\nposition\n].str.replace(r\n.*?python.*\n,u\npython\u5de5\u7a0b\u5e08\n, flags=re.IGNORECASE)\n# data_py[\nposition\n].replace(u\n.*?[\u540e\u7aef|\u5f00\u53d1].*\n,u\nweb\u5f00\u53d1\u5de5\u7a0b\u5e08\n, regex=True, inplace=True)\n# data_py[\nposition\n].replace(u\nweb\u5f00\u53d1\u5de5\u7a0b\u5e08\n,u\npython\u5f00\u53d1\u5de5\u7a0b\u5e08\n, regex=True, inplace=True)\n# data_py.loc[data_py[\nposition\n].str.contains(u\n\u5168\u6808\n), :].shape\n\n\n\n\nPython\u5177\u4f53\u804c\u4f4d\u5206\u5e03\n\n\npy_count = data_py[\nposition\n].value_counts()\npy_count.values.sum()\n\n\n\n\nnumpy.int64\n\n\n\nfig, ax1 = plt.subplots(figsize=(8,6))  # \u4f7f\u7528subplots()\u521b\u5efa\u7a97\u53e3    \ng = sns.barplot(y=py_count.values, x=py_count.index, palette=\nPuBu_d\n, ax=ax1)\n# \u7ed8\u5236\u53ccy\u8f74\u56fe\nax2 = ax1.twinx() # \u521b\u5efa\u7b2c\u4e8c\u4e2a\u5750\u6807\u8f74\nx_list = range(len(py_count))\ny_point_list = py_count.values / np.float(py_count.values.sum()) * 100\nax2.plot(x_list, y_point_list, linewidth = 3, color=\nb\n, marker=\no\n, label=u\n\u804c\u4f4d\u9700\u6c42\u767e\u5206\u6bd4\n) \nax2.legend(loc=\nbest\n, prop=font)\nax2.set_ylabel(u'\u62db\u8058\u804c\u4f4d\u6570\u91cf\u767e\u5206\u6bd4%', fontproperties=font, fontsize = 16)\nax1.set_xlabel(\n) \nax1.set_ylabel(u\n\u62db\u8058\u804c\u4f4d\u6570\u91cf\n, fontsize=16, fontproperties=font)\nx_ticks_l = [i for i in py_count.index]\nax1.set_xticklabels(x_ticks_l, fontproperties=font, fontsize=16, rotation= 45)\nax1.yaxis.grid(True, linestyle = \n-.\n,)\nax1.set_title(u\nPython\u62db\u8058\u804c\u4f4d\u5206\u5e03\u8be6\u60c5\n,fontproperties=font,fontsize=25)\nplt.xticks(g.get_xticks(), fontproperties=font, fontsize=16)\n\n\n\n\n([\nmatplotlib.axis.XTick at 0x7f8a0f50a250\n,\n  \nmatplotlib.axis.XTick at 0x7f8a0f5d9950\n,\n  \nmatplotlib.axis.XTick at 0x7f8a0f5e2690\n,\n  \nmatplotlib.axis.XTick at 0x7f8a0f49b150\n,\n  \nmatplotlib.axis.XTick at 0x7f8a0f49b850\n,\n  \nmatplotlib.axis.XTick at 0x7f8a0f49bf50\n,\n  \nmatplotlib.axis.XTick at 0x7f8a0f4910d0\n,\n  \nmatplotlib.axis.XTick at 0x7f8a0f4a7b90\n,\n  \nmatplotlib.axis.XTick at 0x7f8a0f4b22d0\n],\n \na list of 9 Text xticklabel objects\n)\n\n\n\n\n\npython\u5f00\u53d1\u5de5\u7a0b\u5e08\u4e3b\u8981\u6307\u7684\u662fweb\u5f00\u53d1\uff0c\u800cpython\u5de5\u7a0b\u5e08\u662f\u62db\u8058\u5c97\u4f4d\u540d\u79f0\u6ca1\u6709\u660e\u786e\u6807\u660e\uff0c\u8981\u4ece\u5c97\u4f4d\u8be6\u60c5\u9875\u9a8c\u8bc1\u5177\u4f53\u5c97\u4f4d\u60c5\u51b5\uff0c\u5176\u4ed6\u7684\u5206\u7c7b\u6807\u7b7e\u662f\u660e\u786e\u7684\u5177\u4f53\u5c97\u4f4d\uff0c\u5982\u6570\u636e\u7c7b\uff0c\u5305\u62ec\u4e86\u6570\u636e\u5206\u6790\u3001\u6316\u6398\u7b49\u3002\n\n\n\u7531\u4e8e\u6ca1\u6709\u91c7\u96c6\u804c\u4f4d\u8be6\u60c5\u9875\u4fe1\u606f\uff0c\u65e0\u6cd5\u8fdb\u4e00\u6b65\u9a8c\u8bc1\u62db\u8058\u6570\u91cf\u4ec5\u6b21\u4e8e\u5f00\u53d1\u7c7b\u7684\u6240\u8c13\u7684python\u5de5\u7a0b\u5e08\u5177\u4f53\u5c97\u4f4d\u4fe1\u606f\u3002\n\n\n\u62db\u8058\u804c\u4f4d\u63cf\u8ff0\u8bcd\u4e91\u56fe\n\n\n# \u7531\u4e8eposition_advantage\u4e2d\u6709float\u7c7b\u578b\uff0c\u6545\u8981\u5148\u8f6c\u6210str\nword_ = data[\nposition_advantage\n].apply(lambda x: str(x))\n# \u5c06\u6240\u6709str\u8fde\u63a5\u8d77\u6765\nwords = \n \n.join(word_)\n\n\n\n\nfrom wordcloud import WordCloud, STOPWORDS, ImageColorGenerator   #\u8bcd\u4e91\u5e93\nimport jieba.analyse\nfrom scipy.misc import imread\ntags = jieba.analyse.extract_tags(words, topK=80, withWeight=False)\ntext =\n \n.join(tags)\ntext = unicode(text)\nd = path.dirname(__name__)\ntrump_coloring = imread(path.join(d, \nheroes.png\n))\n\nwc = WordCloud(font_path=\nukai.ttc\n,\n        background_color=\nwhite\n, max_words=300, mask=trump_coloring,\n        max_font_size=80, random_state=42)  # gray balck\n# generate word cloud \nwc.generate(text)\n# generate color from image\nimage_colors = ImageColorGenerator(trump_coloring)\nplt.figure(1,figsize=(8,10))\nplt.imshow(wc)\nplt.axis(\noff\n)\nplt.show()\n\n\n\n\n\n\n\u5c97\u4f4d\u63cf\u8ff0\u7528\u7684\u8bcd\u6c47\u6700\u591a\u7684\u662f\u57f9\u8bad\u3001\u6241\u5e73\u3001\u5e73\u53f0\uff0c\u4f53\u73b0\u51fa\u5f53\u4ecaIT\u884c\u4e1a\u6bd4\u8f83\u6ce8\u91cd\u5458\u5de5\u7684\u57f9\u8bad\u53ca\u5b9e\u65bd\u6241\u5e73\u5316\u7ba1\u7406\n\n\n\u62db\u8058\u804c\u4f4d\u53d1\u5e03\u65f6\u95f4\u89c4\u5f8b\n\n\n# \u5c06\u65f6\u95f4str\u8f6c\u6210datetime\ndata['time_published'] = pd.to_datetime(data['published_time'])\n# \u5c06\u8f6c\u6362\u597d\u7684\u65f6\u95f4series\u8bbe\u7f6e\u6210\u884c\u7d22\u5f15\ndata.set_index(\ntime_published\n, inplace=True)\n\n\n\n\n# \u63d0\u53d6\u65f6\u95f4\u7d22\u5f15\u7684\u5c0f\u65f6\ndata[\nhour\n] = data.index.hour\nhour_info = pd.DataFrame(data.hour.value_counts())\nhour_info[\nproperty\n] = np.round(hour_info.hour / hour_info.hour.sum() * 100, 2)\n\n\n\n\nhour_cs = data.groupby([\nhour\n, \ncompany_size\n])[\nsalary\n].aggregate(np.size).reset_index().sort(\nsalary\n, ascending=False)\n\n\n\n\nplt.figure(figsize=(8,6))\nmarkers = [\n            'd', '\n', '.', '*', 'x', 'o', \n            '3', '4', 's', 'p', ',', 'h', '1', 'H', '+',  \n            'D', '^', '2','v', '\n', '|', \n_\n\n        ]\ng = sns.pointplot(x=\nhour\n, y=\nsalary\n, hue=\ncompany_size\n,\n                  data=hour_cs, dodage=True, markers=markers, size=7)\nplt.xticks(g.get_xticks(), fontproperties=font, fontsize=16, rotation=30)\nplt.xlabel(u\n\u5c0f\u65f6\n, fontsize=16, fontproperties=font)\nplt.ylabel(u\n\u62db\u8058\u804c\u4f4d\u6570\u91cf\n, fontsize=16, fontproperties=font)\nplt.title(u\nIT\u884c\u4e1a\u804c\u4f4d\u62db\u8058\u9700\u6c42\n, fontproperties=font, fontsize=23)\nplt.gca().yaxis.grid(True, linestyle = \n-.\n,)\nplt.legend(loc=\nbest\n,prop=font, fontsize=15)\n\n\n\n\nmatplotlib.legend.Legend at 0x7fc966e6bf50\n\n\n\n\n\n\nhour_fs = data.groupby([\nhour\n, \nfinance_stage\n])[\nsalary\n].aggregate(np.size).reset_index().sort(\nsalary\n, ascending=False)\nplt.figure(figsize=(8,6))\nmarkers = [\n            'd', '\n', '.', '*', 'x', 'o', \n            '3', '4', 's', 'p', ',', 'h', '1', 'H', '+',  \n            'D', '^', '2','v', '\n', '|', \n_\n\n        ]\ng = sns.pointplot(x=\nhour\n, y=\nsalary\n, hue=\nfinance_stage\n,\n                  data=hour_fs, dodage=True, markers=markers, size=7)\nplt.xticks(g.get_xticks(), fontproperties=font, fontsize=16, rotation=30)\nplt.xlabel(u\n\u5c0f\u65f6\n, fontsize=16, fontproperties=font)\nplt.ylabel(u\n\u62db\u8058\u804c\u4f4d\u6570\u91cf\n, fontsize=16, fontproperties=font)\nplt.title(u\nIT\u884c\u4e1a\u804c\u4f4d\u62db\u8058\u9700\u6c42\n, fontproperties=font, fontsize=23)\nplt.gca().yaxis.grid(True, linestyle = \n-.\n,)\nplt.legend(loc=\nbest\n,prop=font, fontsize=15)\n\n\n\n\nmatplotlib.legend.Legend at 0x7fc973c6ba10\n\n\n\n\n\n\ndata_py = data[data[\nthird_tag\n] == u\nPython\n]\nhour_cs = data_py.groupby([\nhour\n, \ncompany_size\n])[\nsalary\n].aggregate(np.size).reset_index().sort(\nsalary\n, ascending=False)\nplt.figure(figsize=(8,6))\nmarkers = [\n            'd', '\n', '.', '*', 'x', 'o', \n            '3', '4', 's', 'p', ',', 'h', '1', 'H', '+',  \n            'D', '^', '2','v', '\n', '|', \n_\n\n        ]\ng = sns.pointplot(x=\nhour\n, y=\nsalary\n, hue=\ncompany_size\n,\n                  data=hour_cs, dodage=True, markers=markers, size=7)\nplt.xticks(g.get_xticks(), fontproperties=font, fontsize=16, rotation=30)\nplt.xlabel(u\n\u5c0f\u65f6\n, fontsize=16, fontproperties=font)\nplt.ylabel(u\n\u62db\u8058\u804c\u4f4d\u6570\u91cf\n, fontsize=16, fontproperties=font)\nplt.title(u\nPython\u804c\u4f4d\u62db\u8058\u9700\u6c42\n, fontproperties=font, fontsize=23)\nplt.gca().yaxis.grid(True, linestyle = \n-.\n,)\nplt.legend(loc=\nbest\n,prop=font, fontsize=15)\n\n\n\n\nmatplotlib.legend.Legend at 0x7fc965e59c10\n\n\n\n\n\n\ndata_py = data[data[\nthird_tag\n] == u\nPython\n]\nhour_fs = data_py.groupby([\nhour\n, \nfinance_stage\n])[\nsalary\n].aggregate(np.size).reset_index().sort(\nsalary\n, ascending=False)\nplt.figure(figsize=(8,6))\nmarkers = [\n            'd', '\n', '.', '*', 'x', 'o', \n            '3', '4', 's', 'p', ',', 'h', '1', 'H', '+',  \n            'D', '^', '2','v', '\n', '|', \n_\n\n        ]\ng = sns.pointplot(x=\nhour\n, y=\nsalary\n, hue=\nfinance_stage\n,\n                  data=hour_fs, dodage=True, markers=markers, size=7)\nplt.xticks(g.get_xticks(), fontproperties=font, fontsize=16, rotation=30)\nplt.xlabel(u\n\u5c0f\u65f6\n, fontsize=16, fontproperties=font)\nplt.ylabel(u\n\u62db\u8058\u804c\u4f4d\u6570\u91cf\n, fontsize=16, fontproperties=font)\nplt.title(u\nPython\u804c\u4f4d\u62db\u8058\u9700\u6c42\n, fontproperties=font, fontsize=23)\nplt.gca().yaxis.grid(True, linestyle = \n-.\n,)\nplt.legend(loc=\nbest\n,prop=font, fontsize=15)\n\n\n\n\nmatplotlib.legend.Legend at 0x7fc9639932d0\n\n\n\n\n\n\nplt.figure(figsize=(8,6))\ng = sns.pointplot(x=hour_info.index, y=hour_info[\nproperty\n], color=\nindianred\n, markers=\n.\n)\nplt.xticks(g.get_xticks(), fontproperties=font, fontsize=16, rotation=30)\nplt.xlabel(u\n\u5c0f\u65f6\n, fontsize=16, fontproperties=font)\nplt.ylabel(u\n\u62db\u8058\u804c\u4f4d\u767e\u5206\u6bd4 %\n, fontsize=16, fontproperties=font)\nplt.title(u\nIT\u804c\u4f4d\u62db\u8058\u53d1\u5e03\u65f6\u95f4\u89c4\u5f8b\n, fontproperties=font, fontsize=23)\nplt.gca().yaxis.grid(True, linestyle = \n-.\n,)\nplt.legend(loc=\nbest\n,prop=font, fontsize=15)\n\n\n\n\n\n\n\u4ece24\u5c0f\u65f6\u65f6\u6bb5\u7684\u62db\u8058\u4fe1\u606f\u53d1\u5e03\u91cf\u53ef\u77e5\uff0c\u4e0a\u53489-10\u70b9\u662f\u804c\u4f4d\u53d1\u5e03\u7684\u9ad8\u5cf0\u671f\uff0c\u5176\u6b21\u662f\u4e0b\u534814\u70b9\u3002\u56e0\u6b64\uff0c\u6709\u6c42\u804c\u9700\u6c42\u7684\u4e2a\u4eba\u53ef\u4ee5\u5728\u4e0a\u534811\u70b9\u4e4b\u540e\u67e5\u770b\u62c9\u52fe\u7f51\u7684\u62db\u8058\u4fe1\u606f\u3002\n\n\nHr\u6700\u540e\u767b\u5f55\u65f6\u95f4\u89c4\u5f8b\n\n\ndf_login = pd.read_csv(\n/home/darren/Desktop/lagou_position/scrapy/job_info_201784.csv\n, encoding=\nutf-8\n)\n\n\n\n\n# \u53bb\u9664\u91cd\u590d\u7684\u62db\u8058\u804c\u4f4d\u4fe1\u606f\ndf_login.drop_duplicates(inplace=True)\n\n\n\n\nd_time = df_login.published_time.str.split(\n \n).str.get(0)\ndf_login[\nday\n] = d_time\n# \u9009\u62e9\u62db\u8058\u53d1\u5e03\u65f6\u95f4\u6700\u65b0\u4e00\u5929\u7684\u6570\u636e\uff0c2017-8-4\uff0c\u62162017-8-5\uff0c\u56e0\u4e3a\u91c7\u96c6\u6570\u636e\u6700\u540e\u65f6\u95f4\u662f8\u67085\u65e5\nda = df_login[(df_login.day == \n2017/8/4\n) | (df_login.day == \n2017/8/5\n)]\n\n\n\n\n# \u8fdb\u4e00\u6b65\u53bb\u91cd\u6570\u636e\nda_col = da.columns.values.tolist()\nda_col.remove(u\npublished_time\n)\nrow_duplicated = da[da.duplicated(da_col)].index.values\nda.drop(row_duplicated, inplace=True)\n# last_login\u683c\u5f0f\u6b63\u786e\n# da.to_csv(\n/home/darren/Desktop/lagou_drop_duplicated1.csv\n, index=False)\n\n\n\n\n# \u4ee5\u4e0b\u505a\u6cd5\u62a5\u9519 \n# ValueError: timestamp out of range for platform localtime()/gmtime() function\n# last_login_.head(1).map(lambda x: datetime.datetime.utcfromtimestamp(x).strftime(\n%Y-%m-%d %H:%M:%S\n))\n# \u91c7\u7528\u904d\u5386\u4f9d\u65e7\u4e0d\u884c\n# last_login_date = []\n# for i in xrange(len(last_login_)):       \n#     last_login_date.append(datetime.datetime.utcfromtimestamp(last_login_[i]).strftime(\n%Y-%m-%d %H:%M:%S\n) )\n\n\n\n\n# \u6beb\u79d2\u8f6c\u6362\u6210\u79d2\nlast_login_ = da[\nlast_login\n] / 1000\n# \u5317\u4eac\u65f6\u95f42017/8/4 5\u65e5 0:0:0 \u7684\u65f6\u95f4\u6233\u5206\u522b\u4e3a 1501776000 1501862400\n# \u5148\u5224\u65ad\u6700\u540e\u767b\u5f55\u65f6\u95f4\u662f\u5426\u662f8\u67084\u65e5\nlogin_time_l = last_login_[last_login_.values \n= 1501776000]\nlogin_time_ = login_time_l[login_time_l \n= 1501862400]\n# \u5c06\u4e00\u5929\u767b\u5f55\u65f6\u95f4\u4ece\u79d2\u53d8\u6210\u5c0f\u65f6\nlast_login_s = ((login_time_ - 1501776000) / 3600).map(lambda x: np.int(x))\n\n\n\n\n# \u7edf\u8ba1Hr\u572824\u5c0f\u65f6\u5185\u6700\u540e\u767b\u5f55\u65f6\u95f4\u5206\u5e03\u60c5\u51b5\nlast_login_time = last_login_s.value_counts()\n\n\n\n\nlogin_property = last_login_time.values / np.float(last_login_time.values.sum()) *100\nplt.figure(figsize=(8,6))\ng = sns.pointplot(x=last_login_time.index, y=login_property, color=\npurple\n, markers=\n*\n)\nplt.xticks(g.get_xticks(), fontproperties=font, fontsize=16, rotation=30)\nplt.xlabel(u\n\u5c0f\u65f6\n, fontsize=16, fontproperties=font)\nplt.ylabel(u\n\u767e\u5206\u6bd4 %\n, fontsize=16, fontproperties=font)\nplt.title(u\nHr\u767b\u5f55\u65f6\u95f4\u5206\u5e03\n, fontproperties=font, fontsize=23)\nplt.gca().yaxis.grid(True, linestyle = \n-.\n,)\nplt.legend(loc=\nbest\n,prop=font, fontsize=15)\n\n\n\n\n\n\nHr\u6700\u540e\u767b\u5f55\u65f6\u95f4\u5206\u5e03\u56fe\u5982\u4e0a\uff0cHr\u6700\u540e\u767b\u5f55\u65f6\u95f4\u96c6\u4e2d\u5728\u4e0b\u5348\uff0c\u5c24\u5176\u662f15-17\u70b9\u4e4b\u95f4\uff0c\u7ed3\u5408\u540c\u4e00\u5929\u7684\u62db\u8058\u4fe1\u606f\u53d1\u5e03\u72b6\u51b5\uff0c\u6295\u9012\u7b80\u5386\u7684\u8f83\u4f73\u65f6\u95f4\u6bb5\u4e3a\u4e0a\u534811\u70b9-\u4e0b\u534813\u70b9\u4e4b\u95f4\u3002\n\n\n\u603b\u7ed3\n\n\n\u5f53\u524d\uff0cIT\u884c\u4e1a\u53d1\u5c55\u5982\u706b\u5982\u837c\uff0c\u4eceIT\u884c\u4e1a\u7684\u5e73\u5747\u85aa\u8d44\u4fbf\u53ef\u7aa5\u4e00\u6591\u3002\u4ece\u5168\u56fd\u8303\u56f4\u770b\uff0cIT\u884c\u4e1a\u53d1\u5c55\u5e76\u4e0d\u5747\u8861\uff0c\u800c\u662f\u96c6\u4e2d\u5728\u4e00\u7ebf\u548c\u4e00\u4e9b\u70ed\u95e8\u7684\u4e8c\u7ebf\u57ce\u5e02\uff0c\u5c24\u5176\u662f\u5317\u4e0a\u6df1\u5e7f\u4ee5\u53ca\u676d\u5dde\uff0c\u5176\u4e2d\u53c8\u4ee5\u5317\u4eac\u6700\u4e3a\u53d1\u8fbe\uff01\n\n\n\u4ece\u5404\u4e2a\u57ce\u5e02\u7684\u62db\u8058\u804c\u4f4d\u9700\u6c42\u770b\uff0c\u5317\u4eac\u7684\u62db\u8058\u804c\u4f4d\u6700\u591a\uff0c\u4e0a\u6d77\u6b21\u4e4b\uff0c\u4ece\u516c\u53f8\u89c4\u6a21\u770b\u4e2d\u578b\u516c\u53f8\u7684\u62db\u8058\u5bfb\u6c42\u6700\u5927\uff0c\u5927\u578b\u516c\u53f8\u6b21\u4e4b\uff0c\u5c0f\u578b\u516c\u53f8\u7684\u9700\u6c42\u91cf\u8f83\u5c0f\uff1b\u4ece\u85aa\u8d44\u4e0a\u770b\uff0c\u5927\u578b\u516c\u53f8\u7684\u85aa\u8d44\u6700\u9ad8\uff0c\u5176\u6b21\u662f\u4e2d\u578b\u516c\u53f8\uff0c\u5c0f\u516c\u53f8\u6700\u4f4e\uff0c\u56e0\u6b64\uff0cIT\u884c\u4e1a\u7684\u6700\u4f73\u6c42\u804c\u5730\u4e3a\u5317\u4eac\uff0c\u516c\u53f8\u53ef\u9009\u62e9\u4e2d\u578b\u7684\u4e0a\u5e02\u6216\u6210\u719f\u578b\u516c\u53f8\u3002\n\n\n\u5f53\u7136\uff0c\u8fd9\u4ec5\u4ec5\u662f\u4ece\u804c\u4f4d\u9700\u6c42\u72b6\u51b5\u4e0a\u5206\u6790\uff0c\u5e76\u6ca1\u6709\u7ed3\u5408\u6c42\u804c\u8005\u6570\u91cf\u7b49\u5176\u4ed6\u4fe1\u606f\u8fdb\u884c\u5bf9\u6bd4\u5206\u6790\uff0c\u4e3b\u8981\u539f\u56e0\u662f\u8fd9\u90e8\u5206\u6570\u636e\u96be\u91c7\u96c6\uff01\n\n\nIT\u884c\u4e1a\u804c\u4f4d\u9700\u6c42\u6700\u5927\u7684\u662f\u6280\u672f\u7c7b\uff0c\u85aa\u8d44\u6700\u9ad8\u7684\u662f\u91d1\u878d\u7c7b\uff0c\u5176\u6b21\u662f\u6280\u672f\u7c7b\u3002\n\n\n\u4ece\u540e\u7aef\u5f00\u53d1\u7684\u5404\u4e2a\u7f16\u7a0b\u8bed\u8a00\u5206\u6790\uff0cJava\u7684\u62db\u8058\u9700\u6c42\u662f\u5904\u4e8e\u9738\u4e3b\u5730\u4f4d\uff0c\u53ea\u662f\u85aa\u8d44\u7565\u4f4e\u3002\u85aa\u8d44\u6700\u9ad8\u7684\u662f\u5404\u79cd\u7b97\u6cd5\u7c7b\uff0c\u5305\u62ec\u6570\u636e\u6316\u6398\u3001\u7cbe\u51c6\u63a8\u8350\u7b49\uff0c\u5176\u6b21\u662f\u4e00\u4e9b\u65b0\u5174\u8bed\u8a00\uff0c\u5982Go\u3001Python\u7b49\u3002\n\n\nPython\u7684\u62db\u8058\u89c4\u5f8b\u548c\u540e\u7aef\u5f00\u53d1\u662f\u4e00\u81f4\u7684\uff0c\u6574\u4f53\u800c\u8a00\uff0cPython\u7684\u62db\u8058\u9700\u6c42\u603b\u91cf\u4e0d\u591a\uff0c\u4f46\u5e73\u5747\u85aa\u8d44\u8f83\u9ad8\u3002\u62db\u8058\u9700\u6c42\u8f83\u591a\u7684\u662f\u4e00\u7ebf\u57ce\u5e02\u7684\u4e2d\u578b\u516c\u53f8\uff0c\u85aa\u8d44\u4e5f\u6bd4\u8f83\u9ad8\uff0c\u4ec5\u7565\u4f4e\u4e8e\u5927\u578b\u4e0a\u5e02\u516c\u53f8\uff0c\u5b66\u5386\u8981\u6c42\u672c\u79d1\u5c45\u591a\uff0c\u5de5\u4f5c\u7ecf\u9a8c3-5\u548c1-3\u5e74\u8f83\u591a\u3002\n\n\npython\u62db\u8058\u7684\u5177\u4f53\u5c97\u4f4d\u5206\u5e03\uff0c\u4ee5web\u5f00\u53d1\u5c45\u591a\uff0c\u722c\u866b\u6b21\u4e4b\uff0c\u7531\u4e8e\u6709\u5927\u91cf\u7684\u804c\u4f4d\u6807\u9898\u5e76\u6ca1\u6709\u660e\u786e\u6807\u660e\u5c97\u4f4d\u7684\u5177\u4f53\u540d\u79f0\uff0c\u56e0\u6b64\uff0c\u5177\u4f53\u5c97\u4f4d\u5206\u5e03\u5e76\u4e0d\u51c6\u786e\uff0c\u8fd9\u8fd8\u8981\u7ed3\u5408\u804c\u4f4d\u8be6\u60c5\u9875\u9762\u8fdb\u884c\u5206\u6790\u3002\n\n\n\u6b64\u5916\uff0c\u6839\u636e\u62db\u8058\u5c97\u4f4d\u63cf\u8ff0\u8bcd\u6c47\u751f\u6210\u7684\u8bcd\u4e91\u56fe\u53ef\u770b\u5230\u51fa\u73b0\u9891\u7387\u6700\u9ad8\u7684\u8bcd\u6c47\u662f\u201c\u57f9\u8bad\u201d\u3001\u201c\u6241\u5e73\u201d\u3001\u201c\u5e73\u53f0\u201d\uff0c\u4f53\u73b0\u51fa\u5f53\u4ecaIT\u884c\u4e1a\u6bd4\u8f83\u6ce8\u91cd\u5458\u5de5\u7684\u57f9\u8bad\u53ca\u6ce8\u91cd\u6241\u5e73\u5316\u7ba1\u7406\u3002\n\n\n\u5206\u6790\u62db\u8058\u804c\u4f4d\u7684\u53d1\u5e03\u65f6\u95f4\u548cHr\u6700\u540e\u767b\u5f55\u65f6\u95f4\u7684\u6298\u7ebf\u56fe\u53ef\u77e5\uff0c\u804c\u4f4d\u53d1\u5e03\u4e3b\u8981\u96c6\u4e2d\u5728\u4e0a\u53489\u70b9\u5de6\u53f3\uff0c\u800cHr\u6700\u540e\u767b\u5f55\u65f6\u95f4\u96c6\u4e2d\u5728\u4e0b\u534815-17\u70b9\u4e4b\u95f4\uff0c\u56e0\u6b64\uff0c\u4e2a\u4eba\u8ba4\u4e3a\u62c9\u52fe\u7f51\u6295\u9012\u62db\u8058\u7b80\u5386\u7684\u8f83\u4f73\u65f6\u95f4\u4e3a\u4e0a\u534811\u70b9-\u4e0b\u534813\u70b9\u4e4b\u95f4\u3002", 
            "title": "\u62c9\u52fe\u62db\u8058\u804c\u4f4d\u6570\u636e\u5206\u6790"
        }, 
        {
            "location": "/data_analysis/lagou_job_analysis/lagou_job_analysis_forshow/#_1", 
            "text": "", 
            "title": "\u62c9\u52fe\u7f51\u62db\u8058\u804c\u4f4d\u4fe1\u606f\u6570\u636e\u5206\u6790"
        }, 
        {
            "location": "/data_analysis/lagou_job_analysis/lagou_job_analysis_forshow/#_2", 
            "text": "\u91c7\u7528scrapy\u6846\u67b6\u91c7\u96c6\u4e86\u62c9\u52fe\u7f518\u67084\u65e5\u7684\u6240\u6709\u62db\u8058\u804c\u4f4d\u4fe1\u606f\uff0c\u8fdb\u884c\u7b80\u5355\u7684\u6570\u636e\u5206\u6790\uff0c\u4e3b\u8981\u76ee\u7684\u662f\u5206\u6790IT\u884c\u4e1a\u76ee\u524d\u62db\u8058\u7684\u6574\u4f53\u72b6\u51b5\uff0c\u5206\u6790\u6280\u672f\u7c7b\u4e2d\u540e\u7aef\u5f00\u53d1\u7684\u62db\u8058\u5f62\u52bf\u4ee5\u53caPython\u7f16\u7a0b\u8bed\u8a00\u7684\u62db\u8058\u9700\u6c42\u3002  # \u5bfc\u5165\u76f8\u5173\u6a21\u5757\nimport pandas as pd \nimport numpy as np \nimport matplotlib.pyplot as plt\nimport time\nimport datetime\nimport re\nimport seaborn as sns\nsns.set(style= ticks , palette= muted , font_scale=1.3, color_codes=True, context= talk )\nimport sys\nreload(sys)\nsys.setdefaultencoding('utf-8')\n%matplotlib inline\nfrom matplotlib.font_manager import FontProperties \nfont = FontProperties(fname=r /usr/share/fonts/truetype/arphic/ukai.ttc )\nfrom os import path\npath.dirname(__name__)", 
            "title": "\u80cc\u666f\u4ecb\u7ecd"
        }, 
        {
            "location": "/data_analysis/lagou_job_analysis/lagou_job_analysis_forshow/#_3", 
            "text": "\u9996\u5148\u662f\u83b7\u53d6\u6570\u636e\uff0c\u4f7f\u7528Python\u7684Scrapy\u6846\u67b6\u91c7\u96c6\u6570\u636e\uff0c\u6570\u636e\u91c7\u96c6\u8fc7\u7a0b\u5728\u6b64\u7565\u8fc7...  \u91c7\u96c6\u7684\u6570\u636e\u5b58\u50a8\u5728csv\u6587\u4ef6\u4e2d\uff0c\u8be5\u6570\u636e\u96c6\u662f\u91c7\u96c6\u62c9\u52fe\u7f51\u4e00\u5929\u5185\u53d1\u5e03\u7684\u804c\u4f4d\u62db\u8058\u4fe1\u606f\uff0c\u603b\u51718\u4e07\u591a\u6761\u62db\u8058\u4fe1\u606f\u3002", 
            "title": "\u6570\u636e\u91c7\u96c6"
        }, 
        {
            "location": "/data_analysis/lagou_job_analysis/lagou_job_analysis_forshow/#_4", 
            "text": "", 
            "title": "\u6570\u636e\u5206\u6790"
        }, 
        {
            "location": "/data_analysis/lagou_job_analysis/lagou_job_analysis_forshow/#_5", 
            "text": "\u62c9\u52fe\u7f51\u7684\u62db\u8058\u4fe1\u606f\u4ee5Json\u683c\u5f0f\u53d1\u9001\u5230\u524d\u7aef\uff0c\u6574\u4f53\u6570\u636e\u6bd4\u8f83\u89c4\u6574\uff0c\u7f3a\u5931\u6570\u636e\u8f83\u5c11\uff0c\u5728\u672c\u5206\u6790\u6d41\u7a0b\u524d\u4e8b\u5148\u5bf9\u539f\u59cb\u6570\u636e\u96c6\u7684\u91cd\u8981\u5b57\u6bb5\u8fdb\u884c\u4e86\u7f3a\u5931\u503c\u586b\u8865\u5904\u7406\u3001\u5bf9\u4e00\u4e9b\u5206\u7c7b\u53d8\u91cf\u8fdb\u884c\u4e86\u91cd\u65b0\u5f52\u7c7b\u5408\u5e76\u7b49\u6570\u636e\u6e05\u6d17\u52a8\u4f5c\uff0c\u56e0\u6b64\uff0c\u67e5\u770b\u73b0\u5728\u6570\u636e\u7684\u7f3a\u5931\u60c5\u51b5\uff0c\u53ea\u6709dist\u3001position_advantagei\u4e24\u4e2a\u7279\u5f81\u6709\u7f3a\u5931\u6570\u636e  data = pd.read_csv( /home/darren/Desktop/lagou_position/scrapy/lagou_job_all_dropduplicated.csv , encoding= utf-8 )      # \u67e5\u770bcompany_size\u7f3a\u5931\u7684\u6837\u672c\u6570\u91cf\ndata[data.company_size.isnull()].shape\n# \u7528 \u5c11\u4e8e15\u4eba \u586b\u8865\u7f3a\u5931\u7684\u6570\u636e\ndata.company_size.fillna(u \u5c11\u4e8e15\u4eba , inplace=True)  \u67e5\u770b\u6570\u636e\u96c6\u4e2d\u975e\u7a7a\u6570\u636e\u767e\u5206\u6bd4  #\u5404\u4e2a\u7279\u5f81\u975e\u7a7a\u7684\u6837\u672c\u6570\u91cf\nnot_null = data.count()\nall = data.shape[0]\n# \u67e5\u770b\u6570\u636e\u96c6\u4e2d\u975e\u7a7a\u6570\u636e\u767e\u5206\u6bd4\nnot_null / all * 100  finance_stage         100.000000\ncity                  100.000000\ndist                   98.252158\nsalary                100.000000\njob_nature            100.000000\nindustry_field        100.000000\ncompany               100.000000\nthird_tag             100.000000\npublished_time        100.000000\nsecond_tag            100.000000\nposition_advantage     99.990527\nfirst_tag             100.000000\nlast_login            100.000000\nwork_experience       100.000000\nposition_type         100.000000\nposition              100.000000\neducation             100.000000\ncrawl                 100.000000\ncompany_size          100.000000\nday                   100.000000\ndtype: float64", 
            "title": "\u6570\u636e\u6e05\u6d17"
        }, 
        {
            "location": "/data_analysis/lagou_job_analysis/lagou_job_analysis_forshow/#it", 
            "text": "# position_advantage\u548cdist\u7684\u7f3a\u5931\u503c\u6682\u4e0d\u5904\u7406\n# \u83b7\u53d6\u6570\u636e\u96c6\u7684\u67d0\u4e9b\u6837\u672c\u7279\u5f81\u7528\u4e8e\u53ef\u89c6\u5316\u8f93\u51fa\nfeatures = data.columns.values.tolist()  # \u63d0\u53d6\u4e0esalary\u76f8\u5173\u5ea6\u8f83\u5927\u7684\u7279\u5f81\uff0c\u7528\u4e8e\u63cf\u8ff0\u6027\u63a2\u7d22\u4e0e\u53ef\u89c6\u5316\u8f93\u51fa\nfor x in [u company_size , u position_type , u day , u third_tag , u salary , u dist , u company , u published_time , u position_advantage , u last_login , u position , u crawl ]:  # \n    features.remove(x)   # \u5b9a\u4e49\u4e00\u4e9b\u7279\u5f81\u548c\u8bc4\u4f30\u7684\u6620\u5c04\nfeature_name = [u \u4f01\u4e1a\u91d1\u878d\u72b6\u51b5 , u \u57ce\u5e02 , u \u5de5\u4f5c\u7c7b\u578b , u \u884c\u4e1a\u9886\u57df , u \u804c\u4f4d\u5c0f\u7c7b , u \u804c\u4f4d\u5927\u7c7b , u \u5de5\u4f5c\u7ecf\u9a8c , u \u5b66\u5386 ]  # u \u804c\u4f4d\u7c7b\u578b , ,u \u516c\u53f8\u89c4\u6a21 \nfeature_dict = dict(zip(features,feature_name))\nfeature_dict\nmethod_dict = { mean : u \u5e73\u5747\u85aa\u8d44 ,  median : u \u85aa\u8d44\u4e2d\u4f4d\u6570 ,  size : u \u62db\u8058\u804c\u4f4d\u6570\u91cf }  def feature_target_bar(evalute_method_str):\n     \n    \u4ee5bar_plot\u7684\u65b9\u5f0f\u5c06IT\u884c\u4e1a\u6574\u4f53\u7684\u4e00\u4e9b\u7279\u5f81\u4e0e\u85aa\u8d44\u5173\u7cfb\u8fdb\u884c\u53ef\u89c6\u5316\u8f93\u51fa\n     \n    fig, axes = plt.subplots(4,2, figsize=(18,40), sharex=False, sharey=False)\n    axes_subject_list = [j for i in axes.tolist() for j in i]\n    evalute_method =  np.  + evalute_method_str\n    for index, feature in enumerate(features):\n        df_salary= data.groupby(feature)[ salary ].aggregate([eval(evalute_method)]).sort_values(evalute_method_str, ascending=False)\n        g = sns.barplot(y=df_salary.index, x=df_salary[evalute_method_str], ax=axes_subject_list[index], palette= husl )\n        axes_subject_list[index].set_yticklabels(g.get_yticklabels(), fontproperties=font, fontsize=18)\n        axes_subject_list[index].set_xlabel( )\n        axes_subject_list[index].set_title(u \u4e0d\u540c  + feature_dict[feature] + method_dict[evalute_method_str], fontsize=25, fontproperties=font)    \n        axes_subject_list[index].set_ylabel( ) \n        axes_subject_list[index].xaxis.grid(True, linestyle =  -. ,)    \n    text = method_dict[evalute_method_str] + 'k(\uffe5)' if evalute_method_str in [ mean ,  median ] else method_dict[evalute_method_str]\n    # \u5c06x\u8f74\u4ee5\u6587\u672cplt.text\u7684\u5f62\u5f0f\u5199\u5165axis\u5bf9\u8c61\u4e2d\n    plt.text(-3.8, 5.0, s=text, ha='center', va='center', fontsize=25, fontproperties=font)\n    fig.tight_layout()\n    # fig.savefig( /home/darren/Desktop/salary_mean   features.png )", 
            "title": "IT\u884c\u4e1a\u6574\u4f53\u7684\u63cf\u8ff0\u6027\u5206\u6790"
        }, 
        {
            "location": "/data_analysis/lagou_job_analysis/lagou_job_analysis_forshow/#it_1", 
            "text": "\u4e3b\u8981\u63a2\u8ba8\u804c\u4f4d\u62db\u8058\u9700\u6c42\u3001\u804c\u4f4d\u5e73\u5747/\u4e2d\u4f4d\u6570\u85aa\u8d44\u4e0e\u62db\u8058\u4f01\u4e1a\u7684\u91d1\u878d\u72b6\u51b5\u3001\u4f01\u4e1a\u89c4\u6a21\uff0c\u6240\u5c5e\u884c\u4e1a\u7684\u7ec6\u5206\u9886\u57df\uff0c\u6c42\u804c\u8005\u5b66\u5386\u3001\u5de5\u4f5c\u7ecf\u9a8c\u7684\u5173\u7cfb\u3002\u4e4b\u6240\u4ee5\u8981\u8bc4\u4f30\u85aa\u8d44\u7684\u4e2d\u4f4d\u6570\uff0c\u4e3b\u8981\u662f\u5c3d\u91cf\u51cf\u5c0f\u4e00\u4e9b\u9ad8\u85aa\u5c97\u4f4d\u7684\u85aa\u8d44\u53ef\u80fd\u4f1a\u5f15\u8d77\u7684\u5de6\u504f\u73b0\u8c61\u3002  for i in method_dict.keys():\n    feature_target_bar(i)     \u4e0d\u540c\u89c4\u6a21\u7684\u516c\u53f8\u7684\u62db\u8058\u9700\u6c42\u548c\u85aa\u8d44\u56fe\u662f\u53ccy\u8f74\u5750\u6807\u56fe\uff0c\u53f3\u4fa7y\u8f74\u5750\u6807\u8868\u793a\u7684\u662f\u4e0d\u540c\u89c4\u6a21\u7684\u516c\u53f8\u7684\u62db\u8058\u9700\u6c42\u5360\u603b\u62db\u8058\u9700\u6c42\u7684\u767e\u5206\u6bd4\uff08\u6ce8\u610f\u548c\u4e0b\u9762\u7684\u53ccy\u5750\u6807\u8f74\u7684\u767e\u5206\u6bd4\u7684\u533a\u522b\uff09  # \u804c\u4f4d\u62db\u8058\u9700\u6c42\u3001\u5e73\u5747\u85aa\u8d44\u4e0e\u516c\u53f8\u89c4\u6a21\u7684\u5173\u7cfb\nd_company_salary = data.groupby('company_size')[ salary ].aggregate([np.size, np.mean, np.median]).sort_values( size , ascending=True)\nd_company_salary[ property ] = d_company_salary[ size ] / d_company_salary[ size ].sum() * 100\nfig, ax1 = plt.subplots(figsize=(8,6))  # \u4f7f\u7528subplots()\u521b\u5efa\u7a97\u53e3\nax2 = ax1.twinx() # \u521b\u5efa\u7b2c\u4e8c\u4e2a\u5750\u6807\u8f74\nx_list = range(len(d_company_salary))\nax1.plot(x_list, d_company_salary[ mean ], linewidth = 2, ls= -. , marker= ^ , label=u \u5e73\u5747\u85aa\u8d44 ) \nax1.plot(x_list, d_company_salary[ median ], linewidth = 2, ls='--', marker= v , label=u \u85aa\u8d44\u4e2d\u4f4d\u6570 ) \nax2.plot(x_list, d_company_salary[ property ], linewidth = 3, color= c , marker= o , label=u \u804c\u4f4d\u9700\u6c42\u91cf % ) \nax1.set_xlabel(u'\u516c\u53f8\u89c4\u6a21', fontproperties=font, fontsize = 16) \nax1.set_ylabel(u'\u85aa\u8d44 k(\uffe5)', fontproperties=font, fontsize = 16)\nax2.set_ylabel(u'\u62db\u8058\u804c\u4f4d\u767e\u5206\u6bd4 %', fontproperties=font, fontsize = 16)\nax1.set_xlim(0, 5.4)  # \u6b64\u5904\u5fc5\u987b\u8bbe\u7f6e set_xlim(0,...),\u8d77\u59cb\u4f4d\u7f6e\u5fc5\u987b\u662f0\uff0c\u5426\u521915\u4eba\u4ee5\u4e0b\u5c31\u4e0d\u663e\u793a\uff1f\nax1.set_xticklabels(d_company_salary.index, fontproperties=font, fontsize=16, rotation=30)\nax1.xaxis.grid(True, linestyle =  -. ,)\nax1.yaxis.grid(True, linestyle =  -. ,)\nax1.legend(loc=2, prop=font)\nax2.legend(loc=4, prop=font)\nax1.set_title(u'\u4e0d\u540c\u89c4\u6a21\u7684\u516c\u53f8\u7684\u62db\u8058\u9700\u6c42\u548c\u85aa\u8d44',fontproperties=font,fontsize=25)  matplotlib.text.Text at 0x7f21a4798610    \u7531\u4e8e\u62c9\u52fe\u7f51\u662f\u4e13\u4e1a\u7684\u4e92\u8054\u7f51\u62db\u8058\u5e73\u53f0\uff0c\u62db\u8058\u4fe1\u606f\u4ee5IT\u884c\u4e1a\u4e3a\u4e3b\uff0c\u6574\u4f53\u85aa\u8d44\u6c34\u5e73\u662f\u504f\u9ad8\u7684\u3002\u4ece\u4e0a\u9762\u7684\u67f1\u72b6\u56fe\u53ef\u770b\u51fa\uff0c\u62db\u8058\u85aa\u8d44\u4e0e\u62db\u8058\u4f01\u4e1a\u7684\u91d1\u878d\u72b6\u51b5\u3001\u62db\u8058\u4f01\u4e1a\u6240\u5c5e\u7684\u884c\u4e1a\u9886\u57df\u3001\u6c42\u804c\u8005\u7684\u5b66\u5386\u4e0e\u5de5\u4f5c\u7ecf\u9a8c\u7b49\u7279\u5f81\u5747\u6709\u5173\u8054\u6027\u3002  \u6839\u636e\u62db\u8058\u4f01\u4e1a\u7684\u91d1\u878d\u72b6\u51b5\u53ef\u5206\u6210\u4e0a\u5e02\u516c\u53f8\u3001\u6210\u719f\u3001\u6210\u957f\u3001\u521d\u521b\u6027\u516c\u53f8\uff0c\u6839\u636e\u4e0a\u9762\u7684\u67f1\u72b6\u56fe\u660e\u663e\u770b\u51fa\u521d\u521b\u6027\u516c\u53f8\u7684\u85aa\u8d44\u504f\u4f4e\uff0c\u800c\u6210\u719f\u6027\u4e14\u878d\u8d44\u89c4\u6a21\u8f83\u5927\u7684\u4f01\u4e1a\u7684\u85aa\u8d44\u8f83\u9ad8\u3002  \u5206\u6790\u4e00\u7ebf\u548c\u70ed\u95e8\u4e8c\u7ebf\u57ce\u5e02\u7684\u85aa\u8d44\u67f1\u72b6\u56fe\uff0c\u660e\u663e\u770b\u51fa\u4e00\u7ebf\u57ce\u5e02\u7684\u5e73\u5747\u85aa\u8d44\u660e\u663e\u9ad8\u4e8e\u5176\u4ed6\u57ce\u5e02\uff08\u5929\u6d25\u9664\u5916\uff09\uff0c\u5c24\u5176\u4ee5\u5317\u4eac\u7684\u85aa\u8d44\u6700\u9ad8\uff0c\u800c\u4e8c\u7ebf\u7684\u676d\u5dde\u85aa\u8d44\u4e5f\u8f83\u9ad8\uff0c\u53ef\u80fd\u4e0e\u963f\u91cc\u5df4\u5df4\u7b49\u4e92\u8054\u7f51\u516c\u53f8\u5750\u843d\u676d\u5dde\u6709\u5173\u3002  \u4e92\u8054\u7f51\u76f8\u5173\u7684\u804c\u4f4d\u85aa\u8d44\uff08\u804c\u4e1a\u5c0f\u7c7b\uff09\u4e2d\u660e\u663e\u770b\u51fa\uff0c\u4eba\u5de5\u667a\u80fd\u7684\u85aa\u8d44\u6700\u9ad8\uff0c\u8fd9\u4e5f\u53cd\u6620\u51fa\u5f53\u524d\u7684\u4eba\u5de5\u667a\u80fd\u9886\u57df\u7684\u5927\u70ed\u3002  \u6b64\u5916\uff0c\u5bf9\u6bd4\u5e73\u5747\u85aa\u8d44\u548c\u85aa\u8d44\u7684\u4e2d\u4f4d\u6570\u53ef\u4ee5\u53d1\u73b0\u4e00\u4e9b\u4e0d\u540c\u4e4b\u5904\uff0c\u8fd9\u662f\u7531\u4e8e\u4e00\u4e9b\u79bb\u7fa4\u7684\u6837\u672c\u70b9\u5c06\u6837\u672c\u5747\u503c\u62c9\u4f4e\u6216\u62c9\u9ad8\uff0c\u7528\u4e2d\u4f4d\u6570\u80fd\u8f83\u597d\u7684\u53cd\u6620\u96c6\u4e2d\u8d8b\u52bf\u3002  \u4ece\u516c\u53f8\u89c4\u6a21\u4e0e\u85aa\u8d44\u548c\u62db\u8058\u9700\u6c42\u66f2\u7ebf\u770b\uff0cIT\u884c\u4e1a\u62db\u8058\u804c\u4f4d\u9700\u6c42\u6700\u591a\u7684\u4e0d\u662f\u5927\u578b\u516c\u53f8\u800c\u662f50-500\u4eba\u89c4\u6a21\u7684\u516c\u53f8\uff0c\u85aa\u8d44\u4e0a\uff0c\u5927\u578b\u516c\u53f8\u7684\u85aa\u8d44\u6700\u9ad8\uff0c50-500\u89c4\u6a21\u7684\u6b21\u4e4b\uff0c50\u4eba\u4ee5\u4e0b\u7684\u516c\u53f8\u62db\u8058\u9700\u6c42\u548c\u85aa\u8d44\u90fd\u8f83\u4f4e\u3002  \u7b80\u800c\u6982\u4e4b\uff0c\u4ece\u5404\u4e2a\u57ce\u5e02\u7684\u62db\u8058\u804c\u4f4d\u9700\u6c42\u770b\uff0c\u5317\u4eac\u7684\u62db\u8058\u804c\u4f4d\u6700\u591a\uff0c\u4e0a\u6d77\u6b21\u4e4b\uff0c\u4ece\u516c\u53f8\u89c4\u6a21\u770b\u4e2d\u578b\u516c\u53f8\u7684\u62db\u8058\u5bfb\u6c42\u6700\u5927\uff0c\u5927\u578b\u516c\u53f8\u6b21\u4e4b\uff0c\u5c0f\u578b\u516c\u53f8\u7684\u9700\u6c42\u91cf\u8f83\u5c0f\uff1b\u4ece\u85aa\u8d44\u4e0a\u770b\uff0c\u5927\u578b\u516c\u53f8\u7684\u85aa\u8d44\u6700\u9ad8\uff0c\u5176\u6b21\u662f\u4e2d\u578b\u516c\u53f8\uff0c\u5c0f\u516c\u53f8\u6700\u4f4e\uff0c\u56e0\u6b64\uff0cIT\u884c\u4e1a\u7684\u6700\u4f73\u6c42\u804c\u5730\u4e3a\u5317\u4eac\u6216\u4e0a\u6d77\uff0c\u516c\u53f8\u53ef\u9009\u62e9\u4e2d\u578b\u7684\u4e0a\u5e02\u6216\u6210\u719f\u578b\u516c\u53f8\u3002", 
            "title": "IT\u884c\u4e1a\u6574\u4f53\u62db\u8058\u9700\u6c42"
        }, 
        {
            "location": "/data_analysis/lagou_job_analysis/lagou_job_analysis_forshow/#it_2", 
            "text": "\u4ee5\u4e0a\u662f\u4ece\u6574\u4f53\u4e0a\u5bf9\u62c9\u52fe\u7f51\u7684IT\u62db\u8058\u8fdb\u884c\u5b9a\u6027\u5206\u6790\uff0c\u63a5\u4e0b\u6765\u5bf9IT\u884c\u4e1a\u4e03\u5927\u9886\u57df\uff0c\u6280\u672f\u3001\u4ea7\u54c1\u3001\u8fd0\u8425\u3001\u804c\u80fd\u3001\u91d1\u878d\u3001\u5e02\u573a\u4e0e\u9500\u552e\u3001\u8bbe\u8ba1\u8fdb\u884c\u7b80\u5355\u7684\u63cf\u8ff0\u6027\u5206\u6790  # \u4e0d\u540c\u804c\u4e1a\u7684\u804c\u4f4d\u6570\u91cf\u3001\u5e73\u5747\u85aa\u8d44\u3001\u85aa\u8d44\u4e2d\u4f4d\u6570\nIT_domains = data.groupby([ first_tag ,  third_tag ])[ salary ].aggregate([np.size, np.mean, np.median])\nIT_domains = IT_domains.reset_index()  # IT\u884c\u4e1a\u5404\u9886\u57df\u7684\u804c\u4f4d\u6bd4\u4f8b\nposition_num  = IT_domains.groupby([ first_tag ])[ size ].sum() / IT_domains[ size ].sum() * 100\n# IT\u884c\u4e1a\u5404\u9886\u57df\u7684\u5e73\u5747\u85aa\u8d44\nposition_mean = IT_domains.groupby([ first_tag ])[ mean ].mean().sort_values(ascending=False)   plt.figure(figsize=(8,6))\ng = sns.barplot(y=position_mean.index, x=position_mean.values, palette= BuPu_d )\nplt.yticks(g.get_yticks(), fontproperties=font, fontsize=16)\nplt.xlabel(u \u5e73\u5747\u85aa\u8d44 k (\uffe5) , fontsize=16, fontproperties=font)\nplt.ylabel( )\nplt.title(u IT\u884c\u4e1a\u4e0d\u540c\u9886\u57df\u85aa\u8d44 , fontproperties=font, fontsize=25)\nplt.gca().xaxis.grid(True, linestyle =  -. ,)   \nplt.pie\u53c2\u6570\nx       (\u6bcf\u4e00\u5757)\u7684\u6bd4\u4f8b\uff0c\u5982\u679csum(x)   1\u4f1a\u4f7f\u7528sum(x)\u5f52\u4e00\u5316\nlabels  (\u6bcf\u4e00\u5757)\u997c\u56fe\u5916\u4fa7\u663e\u793a\u7684\u8bf4\u660e\u6587\u5b57\nexplode (\u6bcf\u4e00\u5757)\u79bb\u5f00\u4e2d\u5fc3\u8ddd\u79bb\nstartangle  \u8d77\u59cb\u7ed8\u5236\u89d2\u5ea6,\u9ed8\u8ba4\u56fe\u662f\u4ecex\u8f74\u6b63\u65b9\u5411\u9006\u65f6\u9488\u753b\u8d77,\u5982\u8bbe\u5b9a=90\u5219\u4ecey\u8f74\u6b63\u65b9\u5411\u753b\u8d77\nshadow  \u662f\u5426\u9634\u5f71\nlabeldistance label\u7ed8\u5236\u4f4d\u7f6e,\u76f8\u5bf9\u4e8e\u534a\u5f84\u7684\u6bd4\u4f8b, \u5982 1\u5219\u7ed8\u5236\u5728\u997c\u56fe\u5185\u4fa7\nautopct \u63a7\u5236\u997c\u56fe\u5185\u767e\u5206\u6bd4\u8bbe\u7f6e,\u53ef\u4ee5\u4f7f\u7528format\u5b57\u7b26\u4e32\u6216\u8005format function\n        '%1.1f'\u6307\u5c0f\u6570\u70b9\u524d\u540e\u4f4d\u6570(\u6ca1\u6709\u7528\u7a7a\u683c\u8865\u9f50)\npctdistance \u7c7b\u4f3c\u4e8elabeldistance,\u6307\u5b9aautopct\u7684\u4f4d\u7f6e\u523b\u5ea6\nradius  \u63a7\u5236\u997c\u56fe\u534a\u5f84 \nvals = range(len(position_num)) #\u521b\u5efa\u6570\u636e\u7cfb\u5217\nlabels = position_num.index.values.tolist()\nplt.figure(1, figsize=(7,7))\nplt.pie(position_num.values, labels=labels, autopct='%1.2f%%', \n        pctdistance=.8, shadow=False, startangle=60,radius=1.2, \n        labeldistance=1.06, colors=('b', 'g', 'r', 'c', 'y', 'orange', 'm'),\n        textprops={ fontproperties : font,  fontsize :12})\nplt.title(u'IT\u884c\u4e1a\u5404\u9886\u57df\u804c\u4f4d\u9700\u6c42\u767e\u5206\u6bd4',fontsize=25, fontproperties=font)\nplt.axis('equal')   (-1.3429042534959512,\n 1.329370895558277,\n -1.3334685921667122,\n 1.3271730638043182)   IT\u884c\u4e1a\u4e03\u5927\u9886\u57df\u4e2d\u804c\u4f4d\u9700\u6c42\u6700\u591a\u7684\u662f\u6280\u672f\u7c7b\uff0c\u5176\u6b21\u662f\u4ea7\u54c1\u7c7b\uff0c\u53d1\u5e03\u804c\u4f4d\u6700\u5c11\u7684\u662f\u91d1\u878d\u7c7b\uff0c\u800c\u85aa\u8d44\u65b9\u9762\uff0c\u5e73\u5747\u85aa\u8d44\u6700\u9ad8\u7684\u662f\u91d1\u878d\u7c7b\uff0c\u5176\u6b21\u662f\u6280\u672f\u7c7b\u3002", 
            "title": "IT\u884c\u4e1a\u5404\u9886\u57df\u63cf\u8ff0\u6027\u5206\u6790"
        }, 
        {
            "location": "/data_analysis/lagou_job_analysis/lagou_job_analysis_forshow/#it_3", 
            "text": "# \u5bf9\u4e0d\u540c\u57ce\u5e02\u548cIT\u884c\u4e1a\u4e03\u5927\u9886\u57df\u8fdb\u884c\u5206\u7ec4\uff0c\u5e76\u5bf9\u7279\u5f81salary\u8fdb\u884c\u6570\u91cf\u7edf\u8ba1\u3001\u5e73\u5747\u3001\u4e2d\u4f4d\u6570\u8ba1\u7b97\nd_city = data.groupby([ city ,  first_tag ])[ salary ].aggregate([np.size, np.mean, np.median])\nd_city = d_city.reset_index() \n# \u5efa\u7acb\u57ce\u5e02\u540d\u5b57\u5217\u8868\u7528\u4e8e\u540e\u7eed\u56fe\u7684tickslabels\ncity_list = data.groupby([ city ])[ salary ].mean().sort_values(ascending=False).index.values.tolist()  plt.figure(figsize=(12,20))\n# with sns.color_palette(sns.palplot(sns.xkcd_palette(colors)),  n_colors=9):\ng = sns.barplot(y= first_tag , x= mean , data=d_city, hue= city , hue_order=city_list, palette= Set1 )\nplt.yticks(g.get_yticks(), fontproperties=font, fontsize=16)\nplt.xlabel(u \u5e73\u5747\u85aa\u8d44 k (\uffe5) , fontsize=16, fontproperties=font)\nplt.ylabel( )\nplt.title(u IT\u884c\u4e1a\u5404\u9886\u57df\u5404\u57ce\u5e02\u85aa\u8d44 , fontproperties=font, fontsize=25)\nplt.gca().xaxis.grid(True, linestyle =  -. ,)\nplt.legend(loc=7,prop=font, fontsize=17)  matplotlib.legend.Legend at 0x7f219c64f950    plt.figure(figsize=(12,20))\ng = sns.barplot(y= first_tag , x= size , data=d_city, hue= city , hue_order=city_list, palette= Set1 )\nplt.yticks(g.get_yticks(), fontproperties=font, fontsize=16)\nplt.xlabel(u \u62db\u8058\u804c\u4f4d\u6570\u91cf , fontsize=16, fontproperties=font)\nplt.ylabel( )\nplt.title(u IT\u884c\u4e1a\u5404\u9886\u57df\u5404\u57ce\u5e02\u62db\u8058\u804c\u4f4d\u6570\u91cf , fontproperties=font, fontsize=25)\nplt.gca().xaxis.grid(True, linestyle =  -. ,)\nplt.legend(loc=7,prop=font, fontsize=17)  matplotlib.legend.Legend at 0x7f219c0e4250    \u4eceIT\u884c\u4e1a\u5404\u4e2a\u9886\u57df\u7684\u5e73\u5747\u85aa\u8d44\u548c\u62db\u8058\u804c\u4f4d\u6570\u91cf\u53ef\u77e5\uff0c\u65e0\u8bba\u4ece\u62db\u8058\u6570\u91cf\u8fd8\u662f\u5e73\u5747\u85aa\u8d44\u5317\u4eac\u7684\u8001\u5927\u5730\u4f4d\u5f88\u7262\u56fa\uff08\u9664\u4e86\u91d1\u878d\u9886\u57df\uff09\uff0c\u5176\u6b21\u662f\u4e0a\u6d77\uff0c\u518d\u4e4b\u662f\u6df1\u5733\uff0c\u7136\u540e\u662f\u676d\u5dde\u3001\u5e7f\u5dde\u3002\u5f88\u6709\u610f\u601d\u7684\u4e00\u4e2a\u73b0\u8c61\u662fIT\u884c\u4e1a\u7684\u91d1\u878d\u9886\u57df\uff0c\u867d\u7136\u5317\u4eac\u7684\u62db\u8058\u9700\u6c42\u4ecd\u65e7\u662f\u6700\u5927\u7684\uff0c\u4f46\u5e73\u5747\u85aa\u8d44\u4f4e\u4e8e\u4e0a\u6d77\u548c\u6df1\u5733\uff0c\u8fd9\u4e0e\u4e2d\u56fd\u5357\u65b9\u7684\u4e00\u7ebf\u57ce\u5e02\u7684\u91d1\u878d\u884c\u4e1a\u53d1\u5c55\u76f8\u543b\u5408\uff0c\u53e6\u4e00\u4e2a\u73b0\u8c61\u662f\u53a6\u95e8\u7684\u91d1\u878d\u9886\u57df\u85aa\u8d44\u6700\u9ad8\uff0c\u8d85\u8fc7\u4e86\u4e0a\u6d77\uff0c\u4f46\u62db\u8058\u804c\u4f4d\u6570\u91cf\u592a\u5c11\uff0c\u53ea\u67093\u4e2a\u804c\u4f4d\u9700\u6c42\u3002", 
            "title": "IT\u884c\u4e1a\u85aa\u8d44\u4e0e\u57ce\u5e02"
        }, 
        {
            "location": "/data_analysis/lagou_job_analysis/lagou_job_analysis_forshow/#it_4", 
            "text": "\u5176\u4e2d\uff0csize\u8868\u793a\u7684\u662f\u62db\u8058\u804c\u4f4d\u7684\u6570\u91cf\uff0cmean\u8868\u793a\u7684\u662f\u804c\u4f4d\u7684\u5e73\u5747\u85aa\u8d44\uff0cmidian\u8868\u793a\u7684\u662f\u85aa\u8d44\u4e2d\u4f4d\u6570  d_city[d_city[ city ] == u \u53a6\u95e8 ]   \n   \n     \n       \n       city \n       first_tag \n       size \n       mean \n       median \n     \n   \n   \n     \n       21 \n       \u53a6\u95e8 \n       \u4ea7\u54c1 \n       378.0 \n       10.279101 \n       10.00 \n     \n     \n       22 \n       \u53a6\u95e8 \n       \u5e02\u573a\u4e0e\u9500\u552e \n       184.0 \n       8.388587 \n       7.25 \n     \n     \n       23 \n       \u53a6\u95e8 \n       \u6280\u672f \n       403.0 \n       12.493797 \n       11.50 \n     \n     \n       24 \n       \u53a6\u95e8 \n       \u804c\u80fd \n       59.0 \n       6.745763 \n       5.00 \n     \n     \n       25 \n       \u53a6\u95e8 \n       \u8bbe\u8ba1 \n       188.0 \n       9.425532 \n       9.00 \n     \n     \n       26 \n       \u53a6\u95e8 \n       \u8fd0\u8425 \n       393.0 \n       7.541985 \n       6.00 \n     \n     \n       27 \n       \u53a6\u95e8 \n       \u91d1\u878d \n       3.0 \n       29.666667 \n       30.00", 
            "title": "\u53a6\u95e8\u7684IT\u884c\u4e1a\u4e03\u5927\u7ec6\u5206\u9886\u57df\u7684\u62db\u8058\u6574\u4f53\u72b6\u51b5"
        }, 
        {
            "location": "/data_analysis/lagou_job_analysis/lagou_job_analysis_forshow/#it_5", 
            "text": "# \u4e3b\u8981\u4ece\u6c42\u804c\u8005\u7684\u5b66\u5386\u548c\u5de5\u4f5c\u7ecf\u9a8c\u63a2\u8ba8IT\u4e03\u5927\u5206\u652f\u9886\u57df\u7684\u85aa\u8d44\u548c\u62db\u8058\u9700\u6c42\njobseeker_education = data.groupby([ education ,  first_tag ])[ salary ].aggregate([np.size, np.mean])\njobseeker_education = jobseeker_education.reset_index()\neducation_list = data.groupby( education )[ salary ].count().sort_values(ascending=False).index.values.tolist()\nparam_dist = { education : u \u5b66\u5386 ,  city : u \u57ce\u5e02 ,  work_experience : u \u5de5\u4f5c\u7ecf\u9a8c ,  size : u \u6570\u91cf ,  mean : u \u5e73\u5747\u85aa\u8d44 }\njobseeker_experience = data.groupby([ work_experience ,  first_tag ])[ salary ].aggregate([np.size, np.mean])\njobseeker_experience = jobseeker_experience.reset_index()\nexperience_list = data.groupby( work_experience )[ salary ].count().sort_values(ascending=False).index.values.tolist()  def domains_relation(dataframe, evalute_method, hue_param, hue_order=None):    \n    plt.figure(figsize=(8,6))\n    g = sns.barplot(x= first_tag , y=evalute_method, data=dataframe, hue=hue_param, hue_order=hue_order, palette= Set1 )\n    plt.xticks(g.get_xticks(), fontproperties=font, fontsize=16)\n    plt.ylabel(u \u62db\u8058\u804c\u4f4d{} .format(param_dist.get(evalute_method)), fontsize=16, fontproperties=font)\n    plt.xlabel( )\n    plt.title(u IT\u884c\u4e1a\u5404\u9886\u57df\u62db\u8058\u804c\u4f4d{0}\u4e0e{1} .format(param_dist.get(evalute_method), param_dist.get(hue_param)), fontproperties=font, fontsize=20)\n    plt.gca().yaxis.grid(True, linestyle =  -. ,)\n    plt.legend(loc= best ,prop=font, fontsize=17)  for method in [ size ,  mean ]:\n    domains_relation(jobseeker_education, method,  education , education_list)    for method in [ size ,  mean ]:\n    domains_relation(jobseeker_experience, method,  work_experience , experience_list)    \u62db\u8058\u9700\u6c42\u8981\u6c42\u6700\u591a\u7684\u5b66\u5386\u662f\u672c\u79d1\uff0c\u5176\u6b21\u662f\u5927\u4e13\uff0c\u53ea\u6709\u5728\u5e02\u573a\u4e0e\u9500\u552e\u9886\u57df\uff0c\u672c\u79d1\u9700\u6c42\u7565\u4f4e\u4e8e\u5927\u4e13\uff1b\u5de5\u4f5c\u7ecf\u9a8c\u4e0a\uff0c\u6280\u672f\u76f8\u5173\u7684\u9886\u57df\u9700\u6c42\u6700\u5927\u7684\u662f3-5\u5e74\u5de5\u4f5c\u7ecf\u9a8c\uff0c\u5176\u6b21\u662f1-3\u5e74\uff0c\u800c\u5176\u4ed6\u975e\u6280\u672f\u7684\u9700\u6c42\u6700\u591a\u7684\u662f1-3\u5e74\uff0c\u5176\u6b21\u662f3-5\u5e74\uff1b  \u85aa\u8d44\u65b9\u9762\uff0c\u57fa\u672c\u5448\u73b0\u51fa\u5b66\u5386\u8d8a\u9ad8\u3001\u5de5\u4f5c\u7ecf\u9a8c\u8d8a\u4e30\u5bcc\u85aa\u8d44\u8d8a\u9ad8\u7684\u8d8b\u52bf\uff0c\u5076\u5c14\u6709\u7279\u6b8a\u60c5\u51b5\u3002  \u4e00\u822c\u800c\u8a00\uff0c\u6c42\u804c\u8005\u7684\u5b66\u5386\u8f83\u9ad8\u6216\u5de5\u4f5c\u7ecf\u9a8c\u4e30\u5bcc\uff0c\u5176\u85aa\u8d44\u8f83\u9ad8\uff0c\u8fd9\u4e0e\u4e0a\u9762\u7684\u67f1\u72b6\u56fe\u7684\u6574\u4f53\u8d8b\u52bf\u662f\u543b\u5408\u7684\uff1b\u62db\u8058\u9700\u6c42\u6700\u591a\u7684\u5b66\u5386\u662f\u672c\u79d1\uff0c\u5176\u6b21\u662f\u5927\u4e13\uff0c\u5de5\u4f5c\u7ecf\u9a8c\u8981\u6c423-5\u5e74\u62161-3\u5e74\u5c45\u591a\u3002", 
            "title": "IT\u884c\u4e1a\u4e0d\u540c\u9886\u57df\u7684\u85aa\u8d44\u4e0e\u6c42\u804c\u8005\u5173\u7cfb\u5206\u6790"
        }, 
        {
            "location": "/data_analysis/lagou_job_analysis/lagou_job_analysis_forshow/#it_6", 
            "text": "# \u4ece\u62db\u8058\u4f01\u4e1a\u7684\u89c4\u6a21\u548c\u91d1\u878d\u72b6\u51b5\u63a2\u8ba8\u5176\u4e0e\u62db\u8058\u804c\u4f4d\u85aa\u8d44\u3001\u62db\u8058\u9700\u6c42\u7684\u5173\u7cfb\nemployee_finance = data.groupby([ finance_stage ,  first_tag ])[ salary ].aggregate([np.size, np.mean])\nemployee_finance = employee_finance.reset_index()\nemployee_field = data.groupby([ industry_field ,  first_tag ])[ salary ].aggregate([np.size, np.mean])\nemployee_field = employee_field.reset_index()\n# education_list = data.groupby( education )[ salary ].count().sort_values(ascending=False).index.values.tolist()\nparam_dist = { industry_field : u \u884c\u4e1a\u9886\u57df ,  city : u \u57ce\u5e02 ,  finance_stage : u \u91d1\u878d\u72b6\u51b5 ,  size : u \u6570\u91cf ,  mean : u \u5e73\u5747\u85aa\u8d44 }  def domains_employee(dataframe, evalute_method, hue_param, hue_order=None):    \n    plt.figure(figsize=(12,8))\n    hue_order = data.groupby(hue_param)[ salary ].aggregate(eval('np.'+evalute_method)).sort_values(ascending=False).index\n    g = sns.barplot(x= first_tag , y=evalute_method, data=dataframe, hue=hue_param, hue_order=hue_order, palette= Set1 )\n    plt.xticks(g.get_xticks(), fontproperties=font, fontsize=16)\n    plt.ylabel(u \u62db\u8058\u804c\u4f4d{} .format(param_dist.get(evalute_method)), fontsize=16, fontproperties=font)\n    plt.xlabel( )\n    plt.title(u IT\u884c\u4e1a\u5404\u9886\u57df\u62db\u8058\u804c\u4f4d{0}\u4e0e\u4f01\u4e1a{1} .format(param_dist.get(evalute_method), param_dist.get(hue_param)), fontproperties=font, fontsize=20)\n    plt.gca().yaxis.grid(True, linestyle =  -. ,)\n    plt.legend(loc= best ,prop=font, fontsize=17)  for method in [ size ,  mean ]:\n    domains_employee(employee_finance, method,  finance_stage )    for method in [ size ,  mean ]:\n    domains_employee(employee_field, method,  industry_field )    \u62db\u8058\u9700\u6c42\u4e2d\u6700\u591a\u7684\u662f\u6280\u672f\u9886\u57df\uff0c\u4e0a\u5e02\u516c\u53f8\u548c\u6210\u957f\u6027\u516c\u53f8\u7684\u62db\u8058\u9700\u6c42\u65fa\u76db\uff0c\u4f46\u5e73\u5747\u85aa\u8d44\u6700\u591a\u7684\u5374\u662f\u6210\u719f\u578b\u516c\u53f8\u5176\u6b21\u624d\u662f\u4e0a\u5e02\u548c\u6210\u957f\u578b\u516c\u53f8\u3002\u4ece\u516c\u53f8\u6240\u5c5e\u7c7b\u578b\u4e0a\u770b\uff0c\u79fb\u52a8\u4e92\u8054\u7f51\u7684\u62db\u8058\u9700\u6c42\u6700\u591a\uff08\u90e8\u5206\u539f\u56e0\u662f\u5206\u7c7b\u7684\u65f6\u5019\u5c06\u6240\u6709\u8ddf\u79fb\u52a8\u4e92\u8054\u7f51\u6cbe\u8fb9\u7684\u516c\u53f8\u5747\u5212\u5206\u5230\u79fb\u52a8\u4e92\u8054\u7f51\u9886\u57df\u4e86\uff09\uff0c\u85aa\u8d44\u4e0a\uff0c\u91d1\u878d\u9886\u57df\u6700\u9ad8\uff0c\u63a5\u7740\u662fO2O\u3001\u793e\u4ea4\u7f51\u7edc\u3001\u6570\u636e\u670d\u52a1\u7b49\u4e00\u4e9b\u65b0\u578b\u7684\u7f51\u7edc\u79d1\u6280\u516c\u53f8\uff0c\u8d85\u8fc7\u4e86\u4f20\u7edf\u7684\u4e92\u8054\u7f51\u516c\u53f8\u7684\u85aa\u8d44\u6c34\u5e73\u3002", 
            "title": "IT\u884c\u4e1a\u4e0d\u540c\u9886\u57df\u7684\u85aa\u8d44\u4e0e\u62db\u8058\u4f01\u4e1a\u5173\u7cfb\u5206\u6790"
        }, 
        {
            "location": "/data_analysis/lagou_job_analysis/lagou_job_analysis_forshow/#it_7", 
            "text": "def IT_occupies(dataframe, content, evaluate_method):\n     \u8ba1\u7b97\u62c9\u52fe\u7f51\u6280\u672f\u5927\u7c7b\u4e2d\u540e\u7aef\u5f00\u53d1\u7684\u804c\u4f4d\u6570\u91cf\u3001\u85aa\u8d44\u60c5\u51b5  \n    # \u83b7\u53d6IT\u6280\u672f\u7c7b\u4e2d\u7684\u540e\u7aef\u5f00\u53d1\u5c97\u4f4d\u4fe1\u606f  \n    technology_backend = dataframe.loc[dataframe[ second_tag ]==u \u540e\u7aef\u5f00\u53d1 ,:]\n     # \u7edf\u8ba1\u6240\u6709\u540e\u7aef\u5f00\u53d1\u7f16\u7a0b\u8bed\u8a00\u7684\u804c\u4f4d\u9700\u6c42\u91cf\u3001\u5e73\u5747\u85aa\u8d44\u3001\u85aa\u8d44\u4e2d\u4f4d\u6570\n    tech_backend = technology_backend.groupby([ third_tag ])[ salary ].aggregate([eval( np. +evaluate_method)]).sort_values(evaluate_method, ascending=False).reset_index()\n     # \u83b7\u53d6Python\u7684\u804c\u4f4d\u4fe1\u606f\u7528\u4e8e\u540e\u7eed\u753b\u56fe\u7684annotate\u7684text\u5750\u6807\u4f4d\u7f6e\u548c\u663e\u793a\u7684\u6570\u5b57\n    python_index = tech_backend.loc[tech_backend[ third_tag ] == u Python , :].index.values[0]\n    python_value = tech_backend.loc[tech_backend[ third_tag ] == u Python , :][evaluate_method].values[0]\n    # \u901a\u8fc7plt.subplots()\u5efa\u7acb\u4e00\u4e2aaxis\u5b50\u56fe\u7528\u4e8e\u540e\u7eed\u7ed8\u56fe\n    fig, ax = plt.subplots(figsize=(10,8))\n    # \u8c03\u7528seaborn\u7684barplot\u8fdb\u884c\u7ed8\u56fe\n    g = sns.barplot(y= third_tag , x=evaluate_method, data=tech_backend, palette= PuBu_d , ax=ax)\n    ax.set_yticklabels(g.get_yticklabels(), fontproperties=font, fontsize=18)\n    # \u786e\u5b9aannotate\u7684text\u6587\u672c\u4f4d\u7f6e\u7684x\u5750\u6807\u4f4d\u7f6e\n    annotate_x_delta = tech_backend[evaluate_method][0] / 10    \n    ax.set_xlabel(content, fontsize=16, fontproperties=font)\n    ax.set_ylabel( )\n    ax.set_title(u \u540e\u7aef\u5f00\u53d1 +content, fontproperties=font, fontsize=20)\n    # sns.despine() \n    ax.annotate(str(int(python_value)), xy = (python_value, python_index), xytext = (python_value+annotate_x_delta, python_index+3), fontproperties=font, fontsize=20, arrowprops = dict(facecolor = 'k'))\n    ax.xaxis.grid(True, linestyle =  -. ,)\n    # \u7ed8\u5236\u540e\u7aef\u5f00\u53d1\u7f16\u7a0b\u8bed\u8a00\u767e\u5206\u6bd4\u997c\u56fe\n    if evaluate_method ==  size :\n        # \u8ba1\u7b97\u540e\u7aef\u5f00\u53d1\u5404\u7f16\u7a0b\u8bed\u8a00\u7684\u804c\u4f4d\u6bd4\u4f8b        \n        tech_backend[ position_property ] = tech_backend[ size ] / tech_backend[ size ].sum() * 100\n        pie_data = tech_backend.loc[tech_backend[ position_property ]   1, [ third_tag ,  position_property ]]\n        less_than_one = 100 - pie_data[ position_property ].sum()\n        pie_data.loc[pie_data[ third_tag ] == u \u540e\u7aef\u5f00\u53d1\u5176\u5b83 ,  position_property ] += less_than_one\n        pie_data.sort_values( position_property , ascending=False, inplace=True)\n        num = len(pie_data)\n        vals = range(num) #\u521b\u5efa\u6570\u636e\u7cfb\u5217\n        labels = pie_data[ third_tag ]\n        explode = np.zeros(num)\n        index_py = pie_data[pie_data[ third_tag ] == u Python ].index.values[0]\n        explode[index_py] += 0.15\n        fig1,ax1 = plt.subplots(figsize=(6,6))\n        ax1.pie(pie_data[ position_property ], labels=labels, autopct='%1.2f%%', \n                pctdistance=.8, shadow=False, startangle=20,radius=1.2, \n                labeldistance=1.06, colors=('b', 'g', 'r', 'c', 'y', 'orange', 'm', 'yellowgreen', 'gold', 'lightskyblue', 'lightcoral'),\n                textprops={ fontproperties : font,  fontsize :12}, explode=explode)\n        ax1.set_title(u'\u540e\u7aef\u5f00\u53d1\u804c\u4f4d\u5206\u5e03',fontsize=20, fontproperties=font)\n        ax1.axis( equal )\n#     fig.savefig( /home/darren/Desktop/backend_techww.png )  IT_occupies(data, u \u62db\u8058\u804c\u4f4d\u6570\u91cf ,  size )    IT_occupies(data, u \u5e73\u5747\u85aa\u8d44 k(\uffe5) ,  mean )   IT_occupies(data, u \u85aa\u8d44\u4e2d\u4f4d\u6570 k(\uffe5) ,  median )   Java\u7684\u62db\u8058\u804c\u4f4d\u4fe1\u606f\u6700\u591a,\u67092700\u591a\u62db\u8058\u804c\u4f4d\uff0c\u5360\u6bd429.37%\uff0c\u7f16\u7a0b\u8bed\u8a00\u7684\u8001\u5927\u5730\u4f4d\u4e0d\u53ef\u64bc\u52a8\uff01PHP\u804c\u4f4d\u9700\u6c42\u6b21\u4e4b\uff0c\u5360\u6bd414.08%\uff0c\u540e\u7eed\u5206\u522b\u662fC\u3001C++\u3001.NET\u3001Python\uff0c\u5176\u4e2dPython\u65e5\u9700\u6c42\u804c\u4f4d\u4e0d\u5230400\u4e2a\uff0c\u5360\u6bd45.24%\u3002\uff08\u6ce8\uff1a\u867d\u7136.NET\u4e0d\u7b97\u771f\u6b63\u7684\u7f16\u7a0b\u8bed\u8a00\uff0c\u4f46\u62c9\u52fe\u7f51\u7684\u6570\u636e\u662f\u5982\u6b64\u5206\u7c7b\uff0c\u5728\u8fd9\u4e5f\u4e00\u5e76\u5f53\u6210\u4e00\u95e8\u7f16\u7a0b\u8bed\u8a00\u770b\u5f85\uff0c\u6570\u636e\u6316\u6398\u3001\u7cbe\u51c6\u63a8\u8350\u7b49\u7c7b\u540c\uff09  \u85aa\u8d44\u65b9\u9762\uff0c\u6700\u9ad8\u7684\u662f\u6570\u636e\u6316\u6398\u548c\u63a8\u8350\u7b97\u6cd5\u7c7b\u3001\u5176\u6b21\u662f\u4e00\u4e9b\u65b0\u5174\u7f16\u7a0b\u8bed\u8a00\u5982Go\uff0cPython\u7684\u5e73\u5747\u85aa\u8d44\u8f83\u9ad8\uff0c\u8fbe\u523019K\uff0c\u9ad8\u4e8eJava\u3001PHP\u3001C\u3001C++\u7b49\u3002  \u6ce8\u610f\uff1a\u62c9\u52fe\u7f51\u53d1\u5e03\u85aa\u8d44\u662f\u4e00\u4e2a\u533a\u95f4\u8303\u56f4\uff0c\u56e0\u6b64\u672c\u6587\u91c7\u53d6\u7684\u662f\u8be5\u533a\u95f4\u7684\u5e73\u5747\u503c\uff0c\u4f46\u4ece\u73b0\u5b9e\u751f\u6d3b\u7684\u89c4\u5f8b\u770b\uff0c\u4f7f\u7528\u85aa\u8d44\u533a\u95f4\u7684\u6700\u4f4e\u503c\u6bd4\u8f83\u7b26\u5408\u903b\u8f91\u3002", 
            "title": "IT\u4e03\u5927\u9886\u57df\u7684\u6280\u672f\u7c7b\u4e2d\u7684\u540e\u7aef\u5f00\u53d1\u5c97\u4f4d\u63cf\u8ff0\u6027\u5206\u6790"
        }, 
        {
            "location": "/data_analysis/lagou_job_analysis/lagou_job_analysis_forshow/#_6", 
            "text": "# seaborn\u7684pointplot\u6216matplotlib\u7684plot\u7684\u70b9\u7684\u7c7b\u578b\nmarkers = [\n            'd', ' ', '.', '*', 'x', 'o', \n            '3', '4', 's', 'p', ',', 'h', '1', 'H', '+',  \n            'D', '^', '2','v', ' ', '|'\n        ] # '_',\nparam_dist = { city : u \u57ce\u5e02 ,  size : u \u804c\u4f4d\u9700\u6c42\u767e\u5206\u6bd4 % ,  mean : u \u5e73\u5747\u85aa\u8d44 k(\uffe5) ,\n               median : u \u85aa\u8d44\u4e2d\u4f4d\u6570 k(\uffe5) ,  company_size : u \u4f01\u4e1a\u89c4\u6a21 , \n               finance_stage : u \u4f01\u4e1a\u91d1\u878d\u72b6\u51b5 ,  work_experience : u \u5de5\u4f5c\u7ecf\u9a8c ,  education : u \u5b66\u5386 }  def tech_backend_plot(second_feature, evaluate_method, lang_part=True, big_feature=u \u540e\u7aef\u5f00\u53d1 ):\n     \u8ba1\u7b97\u5404\u5927\u57ce\u5e02\u7684\u540e\u7aef\u5f00\u53d1\u7684\u7f16\u7a0b\u8bed\u8a00\u7684\u804c\u4f4d\u9700\u6c42\u548c\u85aa\u8d44\u72b6\u51b5\uff0c\u53ea\u53d6\u804c\u4f4d\u9700\u6c42\u767e\u5206\u6bd4 5\u7684\u5e38\u89c1\u7f16\u7a0b\u8bed\u8a00\n    big_feature: IT\u4e03\u5927\u5206\u652f\u9886\u57df\u7684\u4e00\u4e2a\uff0c\u9ed8\u8ba4\u662f\u6280\u672f\n    second_feature: \u662f\u6570\u636e\u96c6\u4e2d\u9664\u4e86\u6280\u672f\u7684\u5176\u4ed6\u7279\u5f81\uff0c\u5305\u62eccity,company_size, education etc\u7aef\n    evaluate_method: \u8868\u793a\u7684\u662f\u5bf9data\u6570\u636e\u5206\u7ec4\u540e\u5bf9\u5404\u4e2a\u5206\u7ec4\u5b9e\u65bd\u7684\u7edf\u8ba1\u65b9\u6cd5\uff0c\u4e3b\u8981\u6709np.mean,np.median,np.size\n    lang_part: \u610f\u601d\u662f\u8981\u4e0d\u8981\u53d6\u540e\u7aef\u7f16\u7a0b\u8bed\u8a00\u7684\u4e00\u90e8\u5206\uff0c\u9ed8\u8ba4\u662fTrue,\u5426\u5219\u5c06\u7ed8\u5236\u6240\u6709\u7684\u540e\u7aef\u5f00\u53d1\u8bed\u8a00\n     \n    technology_backend = data.loc[data[ second_tag ] == big_feature,:]    \n    # \u53ea\u62bd\u53d6\u540e\u7aef\u7f16\u7a0b\u8bed\u8a00\u4e2d\u62db\u8058\u9700\u6c42\u5927\u7684\u524d7\u4e2a\u7f16\u7a0b\u8bed\u8a00\u7684\u540d\u79f0\n    targeted_lang = technology_backend['third_tag'].value_counts().index.values.tolist()[:7]\n    # \u5220\u9664 \u540e\u7aef\u5f00\u53d1\u5176\u4ed6\u8bed\u8a00 \uff0c\u5148\u7528 | .join(targeted_lang)\u518d\u6267\u884c\u4ee5\u4e0b\u8bed\u53e5\n    if u'\\u540e\\u7aef\\u5f00\\u53d1\\u5176\\u5b83' in targeted_lang:\n        targeted_lang.remove(u'\\u540e\\u7aef\\u5f00\\u53d1\\u5176\\u5b83') \n\n    tech_backend = technology_backend.groupby([second_feature,  third_tag ])[ salary ].aggregate([eval( np.  + evaluate_method)]).reset_index()    \n    # \u53ea\u8bc4\u4f30Java\u3001C\u3001C++\u3001Python\u7b496\u4e2a\u540e\u7aef\u7f16\u7a0b\u8bed\u8a00\n    if lang_part:\n        tech_backend = tech_backend[tech_backend['third_tag'].str.contains(u'Java|PHP|C|C\\+\\+|\\.NET|Python')]\n    # \u540e\u7aef\u7f16\u7a0b\u8bed\u8a00\u7684\u540d\u79f0\u5217\u8868\uff0c\u7528\u4e8e\u7ed8\u56fe\u7684tickslabels\u8bbe\u7f6e\n    second_feature_list = tech_backend[second_feature].unique().tolist()\n    # \u5bf9\u8bc4\u4f30\u804c\u4f4d\u9700\u6c42\u7684\uff0c\u91c7\u7528\u767e\u5206\u6bd4\n    if evaluate_method ==  size :\n        for i in second_feature_list:\n            one_data = tech_backend.loc[tech_backend[second_feature] == i, :]\n            index_ = one_data.index\n            total_ = one_data[evaluate_method].sum()\n            # \u5728tech_backend\u7684DataFrame\u65b0\u5efa\u4e00\u4e2a\u7279\u5f81property\uff0c\u5b58\u653e\u8ba1\u7b97\u5404\u4e2a\u7f16\u7a0b\u8bed\u8a00\u5728second_feature\u4e2d\u7684\u767e\u5206\u6bd4\uff0c\u5982second_feature\u662fcity\n            tech_backend.ix[index_,  property ] = one_data[evaluate_method] / total_ * 100\n    # \u7528\u4e8eseaborn barplot\u7684hue_order\u987a\u5e8f\u5217\u8868\n    backend_lang = tech_backend.groupby( third_tag )[evaluate_method].sum().sort_values(ascending=False).index.values.tolist()\n    # \u7528\u4e8eseaborn barplot\u7684order\u987a\u5e8f\u5217\u8868    \n    backend_second_feature = tech_backend.groupby(second_feature)[evaluate_method].sum().sort_values(ascending=False).index.values.tolist()\n\n    plt.figure(figsize=(12,10))\n    with sns.color_palette( PuBuGn_d ):\n        if evaluate_method ==  size :\n            y_str =  property \n        else:\n            y_str = evaluate_method\n        g = sns.pointplot(y=y_str, x=second_feature, hue= third_tag , hue_order=backend_lang, order=backend_second_feature,\n                       data=tech_backend, size=10, markers=markers, index=True,\n                       aspect=1.2, legend=False, dodge=True)\n    plt.xticks(g.get_xticks(), fontproperties=font, fontsize=16, rotation=45)\n    plt.ylabel(u {0} .format(param_dist.get(evaluate_method)), fontsize=16, fontproperties=font)\n    plt.xlabel( )\n    plt.title(u \u540e\u7aef\u5f00\u53d1\u7f16\u7a0b\u8bed\u8a00\u4e0e\u4e0d\u540c{0}\u7684{1} .format(param_dist.get(second_feature),param_dist.get(evaluate_method)), fontproperties=font, fontsize=23)\n    plt.gca().yaxis.grid(True, linestyle =  -. ,)\n    plt.legend(loc= best ,prop=font, fontsize=8)  tech_backend_plot( city ,  size )   tech_backend_plot( city ,  mean )   tech_backend_plot( city ,  median )   \u5317\u4eac\u3001\u4e0a\u6d77\u3001\u6df1\u5733\u3001\u5e7f\u5dde\u3001\u676d\u5dde\u7684IT\u884c\u4e1a\u9700\u6c42\u91cf\u6700\u591a\uff0c\u85aa\u8d44\u4e5f\u8f83\u9ad8\uff08\u5e7f\u5dde\u85aa\u8d44\u504f\u4f4e\uff09\uff0c\u5c5e\u4e8e\u7b2c\u4e00\u68af\u961f\uff1b\u4ece\u5404\u7f16\u7a0b\u8bed\u8a00\u770b\uff0cJava\u7edd\u5bf9\u7684\u9738\u4e3b\u5730\u4f4d\uff0c\u4f46\u5728\u4e00\u7ebf\u53d1\u8fbe\u57ce\u5e02\uff0cJava\u8bed\u8a00\u6240\u5360\u7684\u6bd4\u4f8b\u8fdc\u4f4e\u4e8e\u5176\u4ed6\u57ce\u5e02\u7684\u6bd4\u4f8b\uff0c\u5373\u4e00\u7ebf\u53d1\u8fbe\u57ce\u5e02\u5404\u79cd\u7f16\u7a0b\u8bed\u8a00\u90fd\u6709\u53d1\u5c55\u673a\u4f1a\uff0c\u800c\u4e8c\u7ebf\u57ce\u5e02\u8fd8\u5c40\u9650\u5728\u51e0\u95e8\u7f16\u7a0b\u8bed\u8a00\u4e2d\uff0c\u5982\u6d4e\u5357\uff0cJava\u5360\u6d4e\u5357\u804c\u4f4d\u9700\u6c42\u768480%\u5de6\u53f3\uff0cPHP\u5360\u6bd415%\u5de6\u53f3\uff0c.NET\u5360\u6bd45%\u5de6\u53f3\uff1bPython\u9700\u6c42\u5360\u6bd4\u6700\u5927\u7684\u662f\u5317\u4eac\uff0c\u5176\u6b21\u662f\u4e0a\u6d77\u548c\u676d\u5dde\uff0c\u76f8\u6bd4\u5176\u4ed6\u8bed\u8a00\uff0cPython\u62db\u8058\u9700\u6c42\u8f83\u5c0f\uff0c\u4f46\u85aa\u8d44\u8f83\u9ad8\u3002  tech_backend_plot( finance_stage ,  size )   \u4ece\u62db\u8058\u9700\u6c42\u4e0a\u770b\uff0cJava\u7684\u62db\u8058\u9700\u6c42\u6700\u591a\uff0c\u5176\u6b21\u662fPHP\uff0cPython\u62db\u8058\u804c\u4f4d\u8f83\u4f4e\uff0c\u4f46Python\u7684\u85aa\u8d44\u8f83\u9ad8\u3002  tech_backend_plot( finance_stage ,  mean )   tech_backend_plot( finance_stage ,  median )   tech_backend_plot( company_size ,  size )   tech_backend_plot( company_size ,  mean )   tech_backend_plot( company_size ,  median )   \u516c\u53f8\u89c4\u6a21\u4e0e\u62db\u8058\u9700\u6c42\u548c\u85aa\u8d44\u6298\u7ebf\u56fe\u770b\u51fa\uff0c\u5927\u578b\u516c\u53f8\u5bf9Java\u7684\u9700\u6c42\u6700\u591a\uff0c\u5c0f\u578b\u516c\u53f8\u5bf9PHP\u548cPython\u7684\u9700\u6c42\u8f83\u5927\uff08\u6ce8\u610f\uff0c\u56fe\u4e2d\u4e00\u79cd\u7c7b\u578b\u7684\u516c\u53f8\u4e2d\u5404\u4e2a\u7f16\u7a0b\u8bed\u8a00\u5360\u6bd4\u4e4b\u548c\u662f100%\uff0c\u5176\u4ed6\u6298\u7ebf\u56fe\u4e5f\u7c7b\u4f3c\uff09\u3002\u85aa\u8d44\u65b9\u9762\uff0c\u5927\u578b\u516c\u53f8\u7684\u85aa\u8d44\u6700\u9ad8\uff0c\u5176\u6b21\u662f\u4e2d\u578b\u516c\u53f8\uff0c\u6700\u4f4e\u662f\u5c0f\u578b\u516c\u53f8\u3002  tech_backend_plot( work_experience ,  size )   tech_backend_plot( work_experience ,  mean )   \u85aa\u8d44\u57fa\u672c\u4e0e\u5de5\u4f5c\u7ecf\u9a8c\u6210\u6b63\u6bd4\u3002  tech_backend_plot( education ,  median )   tech_backend_plot( education ,  mean )   tech_backend_plot( education ,  size )   \u4e0a\u56fe\u8868\u793a\u7684\u662f\u4e0d\u540c\u5b66\u5386\u7684\u804c\u4f4d\u9700\u6c42\u767e\u5206\u6bd4\uff0c\u5373\u672c\u79d1\u5b66\u5386\u4e2d\uff0c\u5404\u4e2a\u540e\u7aef\u5f00\u53d1\u8bed\u8a00\u62db\u8058\u9700\u6c42\u7684\u767e\u5206\u6bd4\uff08\u672c\u79d1\u5b66\u5386\u4e2d\u8fd96\u79cd\u7f16\u7a0b\u8bed\u8a00\u7684\u767e\u5206\u6bd4\u4e4b\u548c\u4e3a100%\uff09\uff0c\u7531\u4e8eC#\u548c.NET\u5728\u7855\u58eb\u5b66\u5386\u4e0a\u6ca1\u6709\u62db\u8058\u9700\u6c42\uff0c\u6240\u4ee5\uff0c\u867d\u7136C++\u3001C\u3001Python\u7684\u7855\u58eb\u5b66\u5386\u9700\u6c42\u767e\u5206\u6bd4\u660e\u663e\u589e\u591a\uff0c\u5e76\u4e0d\u4e00\u5b9a\u4ee3\u8868\u4e86\u8fd93\u95e8\u7f16\u7a0b\u8bed\u8a00\u5bf9\u9ad8\u5b66\u5386\u7684\u7edd\u5bf9\u9700\u6c42\u8d85\u8fc7\u4e86\u5176\u4ed6\u76f8\u5bf9\u4f4e\u5b66\u5386\uff0c\u53ea\u662f\u76f8\u5bf9\u800c\u8a00\uff0cC\u548cC++\u66f4\u9752\u7750\u4e8e\u9ad8\u5b66\u5386\u6c42\u804c\u8005\u3002\u4ece\u524d\u9762\u7684\u5206\u6790\u53ef\u77e5\uff0c\u672c\u79d1\u548c\u5927\u4e13\u662f\u62db\u8058\u4f01\u4e1a\u7684\u9996\u5148\u5b66\u5386\u3002  \u85aa\u8d44\u4e0e\u5b66\u5386\u57fa\u672c\u6210\u6b63\u6bd4", 
            "title": "\u5404\u5927\u57ce\u5e02\u7684\u540e\u7aef\u5f00\u53d1\u8bed\u8a00\u7684\u804c\u4f4d\u9700\u6c42\u548c\u85aa\u8d44\u6c34\u5e73"
        }, 
        {
            "location": "/data_analysis/lagou_job_analysis/lagou_job_analysis_forshow/#python", 
            "text": "param_dist = { size : u \u62db\u8058\u804c\u4f4d\u6570\u91cf\u4e0e\u767e\u5206\u6bd4 ,  mean : u \u5e73\u5747\u85aa\u8d44 , \n               median : u \u85aa\u8d44\u4e2d\u4f4d\u6570 ,             \n             }  def series_bar_plot(lang, feature, evaluate_method):\n     \n    \u7ed8\u5236\u4e00\u95e8\u7f16\u7a0b\u8bed\u8a00\u7684\u804c\u4f4d\u9700\u6c42\u3001\u85aa\u8d44\u7684\u67f1\u72b6\u56fe\n    lang: \u7f16\u7a0b\u8bed\u8a00\u540d\u79f0\n    feature: \u6570\u636e\u5206\u7ec4\u7684\u4f9d\u636e\u7279\u5f81\n    evaluate_method: \u5b9e\u65bd\u5230\u5206\u7ec4\u540e\u7684\u6570\u636e\u7684\u7edf\u8ba1\u65b9\u6cd5\n     \n    # \u83b7\u53d6\u4e00\u95e8\u7f16\u7a0b\u8bed\u8a00\u7684\u6240\u6709\u62db\u8058\u4fe1\u606f\u6570\u636e\n    data_lang = data[data[ third_tag ] == lang]\n    # \u6839\u636efeature\u5c06\u6570\u636e\u96c6\u5206\u7ec4\uff0c\u5e76\u4f9d\u636eevaluate_method\u5bf9\u5206\u7ec4\u540e\u7684\u6570\u636e\u8fdb\u884c\u7edf\u8ba1\n    one_series = data_lang.groupby([feature])['salary'].aggregate([eval('np.'+evaluate_method)]).sort_values(evaluate_method, ascending=False)\n\n    fig, ax1 = plt.subplots(figsize=(8,6))  # \u4f7f\u7528subplots()\u521b\u5efa\u7a97\u53e3    \n    g = sns.barplot(y=one_series[evaluate_method], x=one_series.index, palette= BuGn_d , ax=ax1)\n    # \u7edf\u8ba1\u65b9\u6cd5\u662fcout/size\u5c31\u7ed8\u5236\u53ccy\u8f74\u56fe\n    if evaluate_method ==  size :\n        ax2 = ax1.twinx() # \u521b\u5efa\u7b2c\u4e8c\u4e2a\u5750\u6807\u8f74\n        x_list = range(len(one_series))\n        y_point_list = one_series[evaluate_method] / one_series[evaluate_method].sum() * 100\n        ax2.plot(x_list, y_point_list, linewidth = 3, color= g , marker= o , label=u \u804c\u4f4d\u9700\u6c42\u767e\u5206\u6bd4 ) \n        ax2.legend(loc= best , prop=font)\n        ax2.set_ylabel(u'\u62db\u8058\u804c\u4f4d\u6570\u91cf\u767e\u5206\u6bd4%', fontproperties=font, fontsize = 16)\n    ax1.set_xlabel( ) \n    ax1.set_ylabel(param_dist.get(evaluate_method), fontsize=16, fontproperties=font)\n    x_ticks_l = [i for i in one_series.index]\n    ax1.set_xticklabels(x_ticks_l, fontproperties=font, fontsize=16, rotation= 90 if feature ==  finance_stage  else 30)\n    ax1.yaxis.grid(True, linestyle =  -. ,)\n    ax1.set_title(lang+param_dist.get(evaluate_method),fontproperties=font,fontsize=25)\n    plt.xticks(g.get_xticks(), fontproperties=font, fontsize=16)  series_bar_plot( Python ,  city ,  size )   series_bar_plot( Python ,  city ,  mean )   series_bar_plot( Python ,  city ,  median )   series_bar_plot( Python ,  finance_stage ,  size )   series_bar_plot( Python ,  finance_stage ,  mean )   series_bar_plot( Python ,  finance_stage ,  median )   for i in [ size ,  mean ,  median ]:\n    series_bar_plot( Python ,  company_size , i)     for i in [ size ,  mean ,  median ]:\n    series_bar_plot( Python ,  work_experience , i)     for i in [ size ,  mean ,  median ]:\n    series_bar_plot( Python ,  education , i)     Python\u7684\u62db\u8058\u9700\u6c42\u603b\u91cf\u4e0d\u591a\uff0c\u4f46\u5e73\u5747\u85aa\u8d44\u8f83\u9ad8\uff0c\u8fd9\u4e5f\u7b26\u5408\u65b0\u5174\u8bed\u8a00\u7684\u7279\u70b9\u3002  Python\u62db\u8058\u9700\u6c42\u6700\u591a\u7684\u4f9d\u65e7\u662f\u5317\u4eac\uff0c\u5176\u6b21\u4e0a\u6d77\uff0c\u5e73\u5747\u85aa\u8d44\u6700\u9ad8\u7684\u8fd8\u662f\u5317\u4eac\uff0c\u5176\u6b21\u662f\u6df1\u5733\u548c\u4e0a\u6d77\u3002\u4ece\u62db\u8058\u516c\u53f8\u7684\u89d2\u5ea6\u5206\u6790\uff0c\u4e2d\u578b\u7684\u6210\u719f\u548c\u6210\u957f\u6027\u516c\u53f8\u7684\u62db\u8058\u9700\u6c42\u548c\u85aa\u8d44\u6c34\u5e73\u90fd\u8f83\u9ad8\uff0c\u5927\u578b\u4e0a\u5e02\u516c\u53f8\u7684\u85aa\u8d44\u9ad8\u4f46\u62db\u8058\u9700\u6c42\u6ca1\u6709\u4e2d\u578b\u516c\u53f8\u591a\uff0c50\u4eba\u4ee5\u4e0b\u7684\u521d\u521b\u516c\u53f8\u7684\u62db\u8058\u9700\u6c42\u548c\u85aa\u8d44\u90fd\u662f\u6700\u4f4e\u3002  \u5de5\u4f5c\u7ecf\u9a8c\u65b9\u9762\uff0c\u9700\u6c42\u6700\u5927\u7684\u662f3-5\u5e74\uff0c\u5176\u6b21\u662f1-3\u5e74\uff0c\u85aa\u8d44\u8ddf\u5de5\u4f5c\u7ecf\u9a8c\u57fa\u672c\u6210\u6b63\u6bd4\uff0c\u6709\u4e00\u4e2a\u7279\u4f8b\u662f\u5e94\u5c4a\u6bd5\u4e1a\u751f\uff0c\u5176\u5e73\u5747\u85aa\u8d44\u7adf\u7136\u9ad8\u4e8e\u67093\u5e74\u5de5\u4f5c\u7ecf\u9a8c\u7684\u6c42\u804c\u8005\uff01\u4ed4\u7ec6\u5206\u6790\u53d1\u73b0\uff0c\u5e94\u5c4a\u6bd5\u4e1a\u751f\u7684\u62db\u8058\u9700\u6c42\u975e\u5e38\u4e4b\u4f4e\uff0c\u6240\u4ee5\uff0c\u5e94\u5c4a\u6bd5\u4e1a\u751f\u7684\u9ad8\u85aa\u5176\u5b9e\u662f\u7531\u4e8e\u6837\u672c\u91cf\u592a\u5c11\u53c8\u53c8\u53d7\u5230\u7ec4\u5185\u79bb\u7fa4\u503c\u7684\u5e72\u6270\uff0c\u9020\u6210\u5e73\u5747\u85aa\u8d44\u5f88\u9ad8\u3002  \u67e5\u8be2\u6570\u636e\u96c6\uff0c\u53d1\u73b0\u53ea\u6709\u5317\u4eac\u9ad8\u7ef4\u6570\u91d1\u79d1\u6280\u6709\u9650\u516c\u53f8\u660e\u786e\u6807\u660e\u62db\u8058\u5e94\u5c4a\u6bd5\u4e1a\u751f\uff0c\u5e73\u5747\u85aa\u8d44\u662f22k\uff0c\u56e0\u6b64\u672c\u6587\u4e2d\u5e94\u5c4a\u6bd5\u4e1a\u751f\u7684\u4fe1\u606f\u6ca1\u6709\u592a\u5927\u53c2\u8003\u610f\u4e49\u3002  \u5e73\u5747\u85aa\u8d44\u4e0e\u5b66\u5386\u4e5f\u6210\u6b63\u6bd4\uff0c\u4f46\u672c\u79d1\u5b66\u5386\u7684\u62db\u8058\u9700\u6c42\u8fdc\u8fdc\u8d85\u8fc7\u5176\u4ed6\u5b66\u5386\u3002  # data_lang = data[data[ third_tag ] ==  Python ]\n# one_series = data_lang.groupby([ company_size ])['salary'].aggregate([np.size]).sort_values( size , ascending=False)\ndata_py = data[data[ third_tag ] ==  Python ]  data_py.loc[data_py[ work_experience ] == u \u5e94\u5c4a\u6bd5\u4e1a\u751f , :]   \n   \n     \n       \n       finance_stage \n       city \n       dist \n       salary \n       job_nature \n       industry_field \n       company \n       third_tag \n       published_time \n       second_tag \n       position_advantage \n       first_tag \n       last_login \n       work_experience \n       position_type \n       position \n       education \n       crawl \n       company_size \n       day \n     \n   \n   \n     \n       79248 \n       \u6210\u957f\u578b(\u4e0d\u9700\u8981\u878d\u8d44) \n       \u5317\u4eac \n       \u671d\u9633\u533a \n       22.5 \n       \u5168\u804c \n       \u79fb\u52a8\u4e92\u8054\u7f51 \n       \u5317\u4eac\u9ad8\u7ef4\u6570\u91d1\u79d1\u6280\u6709\u9650\u516c\u53f8 \n       Python \n       2017/8/4 10:11 \n       \u540e\u7aef\u5f00\u53d1 \n       \u5e74\u5e95\u53cc\u85aa,\u5f39\u6027\u5236\u529e\u516c,15\u5929\u5e74\u5047 \n       \u6280\u672f \n       1.500000e+12 \n       \u5e94\u5c4a\u6bd5\u4e1a\u751f \n       \u540e\u7aef\u5f00\u53d1 \n       python\u5f00\u53d1\u9ad8\u7ea7\u5de5\u7a0b\u5e08 \n       \u672c\u79d1 \n       2017/8/4 \n       50-150\u4eba \n       2017/8/4 \n     \n      # \u66ff\u6362position\u63cf\u8ff0\n# data_py[ position ] = data_py[ position ].str.replace(u (.*?)\u9ad8\u7ea7(.*) ,  \\\\1\\\\2 )\n# data_py[ position ].replace(u .*?\u7814\u53d1.* , u \u5f00\u53d1 , regex=True, inplace=True)\n# data_py[ position ].replace(u .*?\u722c\u866b.* , u \u722c\u866b , regex=True, inplace=True)\n# data_py[ position ].replace(u .*?\u6570\u636e.* , u \u6570\u636e , regex=True, inplace=True)\n# data_py[ position ].replace(u .*?\u5168\u6808.* , u \u5168\u6808 , regex=True, inplace=True)\n# data_py[ position ].replace(u .*?\u8fd0\u7ef4.* , u \u8fd0\u7ef4 , regex=True, inplace=True)\n# data_py[ position ].replace(u .*?\u7b97\u6cd5.* , u \u7b97\u6cd5 , regex=True, inplace=True)\n# data_py[ position ].replace(u .*?\u540e\u7aef.* ,u \u540e\u7aef , regex=True, inplace=True)\n# data_py[ position ].replace(u .*?\u540e\u53f0.* ,u \u540e\u7aef , regex=True, inplace=True)\n# data_py[ position ].replace(u .*?\u5b89\u5168.* ,u \u5b89\u5168 , regex=True, inplace=True)\n# data_py[ position ] = data_py[ position ].str.replace(r .*?web.* ,u \u540e\u7aef , flags=re.IGNORECASE)\n# data_py[ position ].replace(u .*?\u670d\u52a1[\u5668|\u7aef].* ,u \u540e\u7aef , regex=True, inplace=True)\n# data_py[ position ] = data_py[ position ].str.replace(r .*?python.* ,u python\u5de5\u7a0b\u5e08 , flags=re.IGNORECASE)\n# data_py[ position ].replace(u .*?[\u540e\u7aef|\u5f00\u53d1].* ,u web\u5f00\u53d1\u5de5\u7a0b\u5e08 , regex=True, inplace=True)\n# data_py[ position ].replace(u web\u5f00\u53d1\u5de5\u7a0b\u5e08 ,u python\u5f00\u53d1\u5de5\u7a0b\u5e08 , regex=True, inplace=True)\n# data_py.loc[data_py[ position ].str.contains(u \u5168\u6808 ), :].shape", 
            "title": "\u62c9\u52fe\u7f51Python\u804c\u4f4d\u63cf\u8ff0\u6027\u5206\u6790"
        }, 
        {
            "location": "/data_analysis/lagou_job_analysis/lagou_job_analysis_forshow/#python_1", 
            "text": "py_count = data_py[ position ].value_counts()\npy_count.values.sum()  numpy.int64  fig, ax1 = plt.subplots(figsize=(8,6))  # \u4f7f\u7528subplots()\u521b\u5efa\u7a97\u53e3    \ng = sns.barplot(y=py_count.values, x=py_count.index, palette= PuBu_d , ax=ax1)\n# \u7ed8\u5236\u53ccy\u8f74\u56fe\nax2 = ax1.twinx() # \u521b\u5efa\u7b2c\u4e8c\u4e2a\u5750\u6807\u8f74\nx_list = range(len(py_count))\ny_point_list = py_count.values / np.float(py_count.values.sum()) * 100\nax2.plot(x_list, y_point_list, linewidth = 3, color= b , marker= o , label=u \u804c\u4f4d\u9700\u6c42\u767e\u5206\u6bd4 ) \nax2.legend(loc= best , prop=font)\nax2.set_ylabel(u'\u62db\u8058\u804c\u4f4d\u6570\u91cf\u767e\u5206\u6bd4%', fontproperties=font, fontsize = 16)\nax1.set_xlabel( ) \nax1.set_ylabel(u \u62db\u8058\u804c\u4f4d\u6570\u91cf , fontsize=16, fontproperties=font)\nx_ticks_l = [i for i in py_count.index]\nax1.set_xticklabels(x_ticks_l, fontproperties=font, fontsize=16, rotation= 45)\nax1.yaxis.grid(True, linestyle =  -. ,)\nax1.set_title(u Python\u62db\u8058\u804c\u4f4d\u5206\u5e03\u8be6\u60c5 ,fontproperties=font,fontsize=25)\nplt.xticks(g.get_xticks(), fontproperties=font, fontsize=16)  ([ matplotlib.axis.XTick at 0x7f8a0f50a250 ,\n   matplotlib.axis.XTick at 0x7f8a0f5d9950 ,\n   matplotlib.axis.XTick at 0x7f8a0f5e2690 ,\n   matplotlib.axis.XTick at 0x7f8a0f49b150 ,\n   matplotlib.axis.XTick at 0x7f8a0f49b850 ,\n   matplotlib.axis.XTick at 0x7f8a0f49bf50 ,\n   matplotlib.axis.XTick at 0x7f8a0f4910d0 ,\n   matplotlib.axis.XTick at 0x7f8a0f4a7b90 ,\n   matplotlib.axis.XTick at 0x7f8a0f4b22d0 ],\n  a list of 9 Text xticklabel objects )   python\u5f00\u53d1\u5de5\u7a0b\u5e08\u4e3b\u8981\u6307\u7684\u662fweb\u5f00\u53d1\uff0c\u800cpython\u5de5\u7a0b\u5e08\u662f\u62db\u8058\u5c97\u4f4d\u540d\u79f0\u6ca1\u6709\u660e\u786e\u6807\u660e\uff0c\u8981\u4ece\u5c97\u4f4d\u8be6\u60c5\u9875\u9a8c\u8bc1\u5177\u4f53\u5c97\u4f4d\u60c5\u51b5\uff0c\u5176\u4ed6\u7684\u5206\u7c7b\u6807\u7b7e\u662f\u660e\u786e\u7684\u5177\u4f53\u5c97\u4f4d\uff0c\u5982\u6570\u636e\u7c7b\uff0c\u5305\u62ec\u4e86\u6570\u636e\u5206\u6790\u3001\u6316\u6398\u7b49\u3002  \u7531\u4e8e\u6ca1\u6709\u91c7\u96c6\u804c\u4f4d\u8be6\u60c5\u9875\u4fe1\u606f\uff0c\u65e0\u6cd5\u8fdb\u4e00\u6b65\u9a8c\u8bc1\u62db\u8058\u6570\u91cf\u4ec5\u6b21\u4e8e\u5f00\u53d1\u7c7b\u7684\u6240\u8c13\u7684python\u5de5\u7a0b\u5e08\u5177\u4f53\u5c97\u4f4d\u4fe1\u606f\u3002", 
            "title": "Python\u5177\u4f53\u804c\u4f4d\u5206\u5e03"
        }, 
        {
            "location": "/data_analysis/lagou_job_analysis/lagou_job_analysis_forshow/#_7", 
            "text": "# \u7531\u4e8eposition_advantage\u4e2d\u6709float\u7c7b\u578b\uff0c\u6545\u8981\u5148\u8f6c\u6210str\nword_ = data[ position_advantage ].apply(lambda x: str(x))\n# \u5c06\u6240\u6709str\u8fde\u63a5\u8d77\u6765\nwords =    .join(word_)  from wordcloud import WordCloud, STOPWORDS, ImageColorGenerator   #\u8bcd\u4e91\u5e93\nimport jieba.analyse\nfrom scipy.misc import imread\ntags = jieba.analyse.extract_tags(words, topK=80, withWeight=False)\ntext =   .join(tags)\ntext = unicode(text)\nd = path.dirname(__name__)\ntrump_coloring = imread(path.join(d,  heroes.png ))\n\nwc = WordCloud(font_path= ukai.ttc ,\n        background_color= white , max_words=300, mask=trump_coloring,\n        max_font_size=80, random_state=42)  # gray balck\n# generate word cloud \nwc.generate(text)\n# generate color from image\nimage_colors = ImageColorGenerator(trump_coloring)\nplt.figure(1,figsize=(8,10))\nplt.imshow(wc)\nplt.axis( off )\nplt.show()   \u5c97\u4f4d\u63cf\u8ff0\u7528\u7684\u8bcd\u6c47\u6700\u591a\u7684\u662f\u57f9\u8bad\u3001\u6241\u5e73\u3001\u5e73\u53f0\uff0c\u4f53\u73b0\u51fa\u5f53\u4ecaIT\u884c\u4e1a\u6bd4\u8f83\u6ce8\u91cd\u5458\u5de5\u7684\u57f9\u8bad\u53ca\u5b9e\u65bd\u6241\u5e73\u5316\u7ba1\u7406", 
            "title": "\u62db\u8058\u804c\u4f4d\u63cf\u8ff0\u8bcd\u4e91\u56fe"
        }, 
        {
            "location": "/data_analysis/lagou_job_analysis/lagou_job_analysis_forshow/#_8", 
            "text": "# \u5c06\u65f6\u95f4str\u8f6c\u6210datetime\ndata['time_published'] = pd.to_datetime(data['published_time'])\n# \u5c06\u8f6c\u6362\u597d\u7684\u65f6\u95f4series\u8bbe\u7f6e\u6210\u884c\u7d22\u5f15\ndata.set_index( time_published , inplace=True)  # \u63d0\u53d6\u65f6\u95f4\u7d22\u5f15\u7684\u5c0f\u65f6\ndata[ hour ] = data.index.hour\nhour_info = pd.DataFrame(data.hour.value_counts())\nhour_info[ property ] = np.round(hour_info.hour / hour_info.hour.sum() * 100, 2)  hour_cs = data.groupby([ hour ,  company_size ])[ salary ].aggregate(np.size).reset_index().sort( salary , ascending=False)  plt.figure(figsize=(8,6))\nmarkers = [\n            'd', ' ', '.', '*', 'x', 'o', \n            '3', '4', 's', 'p', ',', 'h', '1', 'H', '+',  \n            'D', '^', '2','v', ' ', '|',  _ \n        ]\ng = sns.pointplot(x= hour , y= salary , hue= company_size ,\n                  data=hour_cs, dodage=True, markers=markers, size=7)\nplt.xticks(g.get_xticks(), fontproperties=font, fontsize=16, rotation=30)\nplt.xlabel(u \u5c0f\u65f6 , fontsize=16, fontproperties=font)\nplt.ylabel(u \u62db\u8058\u804c\u4f4d\u6570\u91cf , fontsize=16, fontproperties=font)\nplt.title(u IT\u884c\u4e1a\u804c\u4f4d\u62db\u8058\u9700\u6c42 , fontproperties=font, fontsize=23)\nplt.gca().yaxis.grid(True, linestyle =  -. ,)\nplt.legend(loc= best ,prop=font, fontsize=15)  matplotlib.legend.Legend at 0x7fc966e6bf50    hour_fs = data.groupby([ hour ,  finance_stage ])[ salary ].aggregate(np.size).reset_index().sort( salary , ascending=False)\nplt.figure(figsize=(8,6))\nmarkers = [\n            'd', ' ', '.', '*', 'x', 'o', \n            '3', '4', 's', 'p', ',', 'h', '1', 'H', '+',  \n            'D', '^', '2','v', ' ', '|',  _ \n        ]\ng = sns.pointplot(x= hour , y= salary , hue= finance_stage ,\n                  data=hour_fs, dodage=True, markers=markers, size=7)\nplt.xticks(g.get_xticks(), fontproperties=font, fontsize=16, rotation=30)\nplt.xlabel(u \u5c0f\u65f6 , fontsize=16, fontproperties=font)\nplt.ylabel(u \u62db\u8058\u804c\u4f4d\u6570\u91cf , fontsize=16, fontproperties=font)\nplt.title(u IT\u884c\u4e1a\u804c\u4f4d\u62db\u8058\u9700\u6c42 , fontproperties=font, fontsize=23)\nplt.gca().yaxis.grid(True, linestyle =  -. ,)\nplt.legend(loc= best ,prop=font, fontsize=15)  matplotlib.legend.Legend at 0x7fc973c6ba10    data_py = data[data[ third_tag ] == u Python ]\nhour_cs = data_py.groupby([ hour ,  company_size ])[ salary ].aggregate(np.size).reset_index().sort( salary , ascending=False)\nplt.figure(figsize=(8,6))\nmarkers = [\n            'd', ' ', '.', '*', 'x', 'o', \n            '3', '4', 's', 'p', ',', 'h', '1', 'H', '+',  \n            'D', '^', '2','v', ' ', '|',  _ \n        ]\ng = sns.pointplot(x= hour , y= salary , hue= company_size ,\n                  data=hour_cs, dodage=True, markers=markers, size=7)\nplt.xticks(g.get_xticks(), fontproperties=font, fontsize=16, rotation=30)\nplt.xlabel(u \u5c0f\u65f6 , fontsize=16, fontproperties=font)\nplt.ylabel(u \u62db\u8058\u804c\u4f4d\u6570\u91cf , fontsize=16, fontproperties=font)\nplt.title(u Python\u804c\u4f4d\u62db\u8058\u9700\u6c42 , fontproperties=font, fontsize=23)\nplt.gca().yaxis.grid(True, linestyle =  -. ,)\nplt.legend(loc= best ,prop=font, fontsize=15)  matplotlib.legend.Legend at 0x7fc965e59c10    data_py = data[data[ third_tag ] == u Python ]\nhour_fs = data_py.groupby([ hour ,  finance_stage ])[ salary ].aggregate(np.size).reset_index().sort( salary , ascending=False)\nplt.figure(figsize=(8,6))\nmarkers = [\n            'd', ' ', '.', '*', 'x', 'o', \n            '3', '4', 's', 'p', ',', 'h', '1', 'H', '+',  \n            'D', '^', '2','v', ' ', '|',  _ \n        ]\ng = sns.pointplot(x= hour , y= salary , hue= finance_stage ,\n                  data=hour_fs, dodage=True, markers=markers, size=7)\nplt.xticks(g.get_xticks(), fontproperties=font, fontsize=16, rotation=30)\nplt.xlabel(u \u5c0f\u65f6 , fontsize=16, fontproperties=font)\nplt.ylabel(u \u62db\u8058\u804c\u4f4d\u6570\u91cf , fontsize=16, fontproperties=font)\nplt.title(u Python\u804c\u4f4d\u62db\u8058\u9700\u6c42 , fontproperties=font, fontsize=23)\nplt.gca().yaxis.grid(True, linestyle =  -. ,)\nplt.legend(loc= best ,prop=font, fontsize=15)  matplotlib.legend.Legend at 0x7fc9639932d0    plt.figure(figsize=(8,6))\ng = sns.pointplot(x=hour_info.index, y=hour_info[ property ], color= indianred , markers= . )\nplt.xticks(g.get_xticks(), fontproperties=font, fontsize=16, rotation=30)\nplt.xlabel(u \u5c0f\u65f6 , fontsize=16, fontproperties=font)\nplt.ylabel(u \u62db\u8058\u804c\u4f4d\u767e\u5206\u6bd4 % , fontsize=16, fontproperties=font)\nplt.title(u IT\u804c\u4f4d\u62db\u8058\u53d1\u5e03\u65f6\u95f4\u89c4\u5f8b , fontproperties=font, fontsize=23)\nplt.gca().yaxis.grid(True, linestyle =  -. ,)\nplt.legend(loc= best ,prop=font, fontsize=15)   \u4ece24\u5c0f\u65f6\u65f6\u6bb5\u7684\u62db\u8058\u4fe1\u606f\u53d1\u5e03\u91cf\u53ef\u77e5\uff0c\u4e0a\u53489-10\u70b9\u662f\u804c\u4f4d\u53d1\u5e03\u7684\u9ad8\u5cf0\u671f\uff0c\u5176\u6b21\u662f\u4e0b\u534814\u70b9\u3002\u56e0\u6b64\uff0c\u6709\u6c42\u804c\u9700\u6c42\u7684\u4e2a\u4eba\u53ef\u4ee5\u5728\u4e0a\u534811\u70b9\u4e4b\u540e\u67e5\u770b\u62c9\u52fe\u7f51\u7684\u62db\u8058\u4fe1\u606f\u3002", 
            "title": "\u62db\u8058\u804c\u4f4d\u53d1\u5e03\u65f6\u95f4\u89c4\u5f8b"
        }, 
        {
            "location": "/data_analysis/lagou_job_analysis/lagou_job_analysis_forshow/#hr", 
            "text": "df_login = pd.read_csv( /home/darren/Desktop/lagou_position/scrapy/job_info_201784.csv , encoding= utf-8 )  # \u53bb\u9664\u91cd\u590d\u7684\u62db\u8058\u804c\u4f4d\u4fe1\u606f\ndf_login.drop_duplicates(inplace=True)  d_time = df_login.published_time.str.split(   ).str.get(0)\ndf_login[ day ] = d_time\n# \u9009\u62e9\u62db\u8058\u53d1\u5e03\u65f6\u95f4\u6700\u65b0\u4e00\u5929\u7684\u6570\u636e\uff0c2017-8-4\uff0c\u62162017-8-5\uff0c\u56e0\u4e3a\u91c7\u96c6\u6570\u636e\u6700\u540e\u65f6\u95f4\u662f8\u67085\u65e5\nda = df_login[(df_login.day ==  2017/8/4 ) | (df_login.day ==  2017/8/5 )]  # \u8fdb\u4e00\u6b65\u53bb\u91cd\u6570\u636e\nda_col = da.columns.values.tolist()\nda_col.remove(u published_time )\nrow_duplicated = da[da.duplicated(da_col)].index.values\nda.drop(row_duplicated, inplace=True)\n# last_login\u683c\u5f0f\u6b63\u786e\n# da.to_csv( /home/darren/Desktop/lagou_drop_duplicated1.csv , index=False)  # \u4ee5\u4e0b\u505a\u6cd5\u62a5\u9519 \n# ValueError: timestamp out of range for platform localtime()/gmtime() function\n# last_login_.head(1).map(lambda x: datetime.datetime.utcfromtimestamp(x).strftime( %Y-%m-%d %H:%M:%S ))\n# \u91c7\u7528\u904d\u5386\u4f9d\u65e7\u4e0d\u884c\n# last_login_date = []\n# for i in xrange(len(last_login_)):       \n#     last_login_date.append(datetime.datetime.utcfromtimestamp(last_login_[i]).strftime( %Y-%m-%d %H:%M:%S ) )  # \u6beb\u79d2\u8f6c\u6362\u6210\u79d2\nlast_login_ = da[ last_login ] / 1000\n# \u5317\u4eac\u65f6\u95f42017/8/4 5\u65e5 0:0:0 \u7684\u65f6\u95f4\u6233\u5206\u522b\u4e3a 1501776000 1501862400\n# \u5148\u5224\u65ad\u6700\u540e\u767b\u5f55\u65f6\u95f4\u662f\u5426\u662f8\u67084\u65e5\nlogin_time_l = last_login_[last_login_.values  = 1501776000]\nlogin_time_ = login_time_l[login_time_l  = 1501862400]\n# \u5c06\u4e00\u5929\u767b\u5f55\u65f6\u95f4\u4ece\u79d2\u53d8\u6210\u5c0f\u65f6\nlast_login_s = ((login_time_ - 1501776000) / 3600).map(lambda x: np.int(x))  # \u7edf\u8ba1Hr\u572824\u5c0f\u65f6\u5185\u6700\u540e\u767b\u5f55\u65f6\u95f4\u5206\u5e03\u60c5\u51b5\nlast_login_time = last_login_s.value_counts()  login_property = last_login_time.values / np.float(last_login_time.values.sum()) *100\nplt.figure(figsize=(8,6))\ng = sns.pointplot(x=last_login_time.index, y=login_property, color= purple , markers= * )\nplt.xticks(g.get_xticks(), fontproperties=font, fontsize=16, rotation=30)\nplt.xlabel(u \u5c0f\u65f6 , fontsize=16, fontproperties=font)\nplt.ylabel(u \u767e\u5206\u6bd4 % , fontsize=16, fontproperties=font)\nplt.title(u Hr\u767b\u5f55\u65f6\u95f4\u5206\u5e03 , fontproperties=font, fontsize=23)\nplt.gca().yaxis.grid(True, linestyle =  -. ,)\nplt.legend(loc= best ,prop=font, fontsize=15)   Hr\u6700\u540e\u767b\u5f55\u65f6\u95f4\u5206\u5e03\u56fe\u5982\u4e0a\uff0cHr\u6700\u540e\u767b\u5f55\u65f6\u95f4\u96c6\u4e2d\u5728\u4e0b\u5348\uff0c\u5c24\u5176\u662f15-17\u70b9\u4e4b\u95f4\uff0c\u7ed3\u5408\u540c\u4e00\u5929\u7684\u62db\u8058\u4fe1\u606f\u53d1\u5e03\u72b6\u51b5\uff0c\u6295\u9012\u7b80\u5386\u7684\u8f83\u4f73\u65f6\u95f4\u6bb5\u4e3a\u4e0a\u534811\u70b9-\u4e0b\u534813\u70b9\u4e4b\u95f4\u3002", 
            "title": "Hr\u6700\u540e\u767b\u5f55\u65f6\u95f4\u89c4\u5f8b"
        }, 
        {
            "location": "/data_analysis/lagou_job_analysis/lagou_job_analysis_forshow/#_9", 
            "text": "\u5f53\u524d\uff0cIT\u884c\u4e1a\u53d1\u5c55\u5982\u706b\u5982\u837c\uff0c\u4eceIT\u884c\u4e1a\u7684\u5e73\u5747\u85aa\u8d44\u4fbf\u53ef\u7aa5\u4e00\u6591\u3002\u4ece\u5168\u56fd\u8303\u56f4\u770b\uff0cIT\u884c\u4e1a\u53d1\u5c55\u5e76\u4e0d\u5747\u8861\uff0c\u800c\u662f\u96c6\u4e2d\u5728\u4e00\u7ebf\u548c\u4e00\u4e9b\u70ed\u95e8\u7684\u4e8c\u7ebf\u57ce\u5e02\uff0c\u5c24\u5176\u662f\u5317\u4e0a\u6df1\u5e7f\u4ee5\u53ca\u676d\u5dde\uff0c\u5176\u4e2d\u53c8\u4ee5\u5317\u4eac\u6700\u4e3a\u53d1\u8fbe\uff01  \u4ece\u5404\u4e2a\u57ce\u5e02\u7684\u62db\u8058\u804c\u4f4d\u9700\u6c42\u770b\uff0c\u5317\u4eac\u7684\u62db\u8058\u804c\u4f4d\u6700\u591a\uff0c\u4e0a\u6d77\u6b21\u4e4b\uff0c\u4ece\u516c\u53f8\u89c4\u6a21\u770b\u4e2d\u578b\u516c\u53f8\u7684\u62db\u8058\u5bfb\u6c42\u6700\u5927\uff0c\u5927\u578b\u516c\u53f8\u6b21\u4e4b\uff0c\u5c0f\u578b\u516c\u53f8\u7684\u9700\u6c42\u91cf\u8f83\u5c0f\uff1b\u4ece\u85aa\u8d44\u4e0a\u770b\uff0c\u5927\u578b\u516c\u53f8\u7684\u85aa\u8d44\u6700\u9ad8\uff0c\u5176\u6b21\u662f\u4e2d\u578b\u516c\u53f8\uff0c\u5c0f\u516c\u53f8\u6700\u4f4e\uff0c\u56e0\u6b64\uff0cIT\u884c\u4e1a\u7684\u6700\u4f73\u6c42\u804c\u5730\u4e3a\u5317\u4eac\uff0c\u516c\u53f8\u53ef\u9009\u62e9\u4e2d\u578b\u7684\u4e0a\u5e02\u6216\u6210\u719f\u578b\u516c\u53f8\u3002  \u5f53\u7136\uff0c\u8fd9\u4ec5\u4ec5\u662f\u4ece\u804c\u4f4d\u9700\u6c42\u72b6\u51b5\u4e0a\u5206\u6790\uff0c\u5e76\u6ca1\u6709\u7ed3\u5408\u6c42\u804c\u8005\u6570\u91cf\u7b49\u5176\u4ed6\u4fe1\u606f\u8fdb\u884c\u5bf9\u6bd4\u5206\u6790\uff0c\u4e3b\u8981\u539f\u56e0\u662f\u8fd9\u90e8\u5206\u6570\u636e\u96be\u91c7\u96c6\uff01  IT\u884c\u4e1a\u804c\u4f4d\u9700\u6c42\u6700\u5927\u7684\u662f\u6280\u672f\u7c7b\uff0c\u85aa\u8d44\u6700\u9ad8\u7684\u662f\u91d1\u878d\u7c7b\uff0c\u5176\u6b21\u662f\u6280\u672f\u7c7b\u3002  \u4ece\u540e\u7aef\u5f00\u53d1\u7684\u5404\u4e2a\u7f16\u7a0b\u8bed\u8a00\u5206\u6790\uff0cJava\u7684\u62db\u8058\u9700\u6c42\u662f\u5904\u4e8e\u9738\u4e3b\u5730\u4f4d\uff0c\u53ea\u662f\u85aa\u8d44\u7565\u4f4e\u3002\u85aa\u8d44\u6700\u9ad8\u7684\u662f\u5404\u79cd\u7b97\u6cd5\u7c7b\uff0c\u5305\u62ec\u6570\u636e\u6316\u6398\u3001\u7cbe\u51c6\u63a8\u8350\u7b49\uff0c\u5176\u6b21\u662f\u4e00\u4e9b\u65b0\u5174\u8bed\u8a00\uff0c\u5982Go\u3001Python\u7b49\u3002  Python\u7684\u62db\u8058\u89c4\u5f8b\u548c\u540e\u7aef\u5f00\u53d1\u662f\u4e00\u81f4\u7684\uff0c\u6574\u4f53\u800c\u8a00\uff0cPython\u7684\u62db\u8058\u9700\u6c42\u603b\u91cf\u4e0d\u591a\uff0c\u4f46\u5e73\u5747\u85aa\u8d44\u8f83\u9ad8\u3002\u62db\u8058\u9700\u6c42\u8f83\u591a\u7684\u662f\u4e00\u7ebf\u57ce\u5e02\u7684\u4e2d\u578b\u516c\u53f8\uff0c\u85aa\u8d44\u4e5f\u6bd4\u8f83\u9ad8\uff0c\u4ec5\u7565\u4f4e\u4e8e\u5927\u578b\u4e0a\u5e02\u516c\u53f8\uff0c\u5b66\u5386\u8981\u6c42\u672c\u79d1\u5c45\u591a\uff0c\u5de5\u4f5c\u7ecf\u9a8c3-5\u548c1-3\u5e74\u8f83\u591a\u3002  python\u62db\u8058\u7684\u5177\u4f53\u5c97\u4f4d\u5206\u5e03\uff0c\u4ee5web\u5f00\u53d1\u5c45\u591a\uff0c\u722c\u866b\u6b21\u4e4b\uff0c\u7531\u4e8e\u6709\u5927\u91cf\u7684\u804c\u4f4d\u6807\u9898\u5e76\u6ca1\u6709\u660e\u786e\u6807\u660e\u5c97\u4f4d\u7684\u5177\u4f53\u540d\u79f0\uff0c\u56e0\u6b64\uff0c\u5177\u4f53\u5c97\u4f4d\u5206\u5e03\u5e76\u4e0d\u51c6\u786e\uff0c\u8fd9\u8fd8\u8981\u7ed3\u5408\u804c\u4f4d\u8be6\u60c5\u9875\u9762\u8fdb\u884c\u5206\u6790\u3002  \u6b64\u5916\uff0c\u6839\u636e\u62db\u8058\u5c97\u4f4d\u63cf\u8ff0\u8bcd\u6c47\u751f\u6210\u7684\u8bcd\u4e91\u56fe\u53ef\u770b\u5230\u51fa\u73b0\u9891\u7387\u6700\u9ad8\u7684\u8bcd\u6c47\u662f\u201c\u57f9\u8bad\u201d\u3001\u201c\u6241\u5e73\u201d\u3001\u201c\u5e73\u53f0\u201d\uff0c\u4f53\u73b0\u51fa\u5f53\u4ecaIT\u884c\u4e1a\u6bd4\u8f83\u6ce8\u91cd\u5458\u5de5\u7684\u57f9\u8bad\u53ca\u6ce8\u91cd\u6241\u5e73\u5316\u7ba1\u7406\u3002  \u5206\u6790\u62db\u8058\u804c\u4f4d\u7684\u53d1\u5e03\u65f6\u95f4\u548cHr\u6700\u540e\u767b\u5f55\u65f6\u95f4\u7684\u6298\u7ebf\u56fe\u53ef\u77e5\uff0c\u804c\u4f4d\u53d1\u5e03\u4e3b\u8981\u96c6\u4e2d\u5728\u4e0a\u53489\u70b9\u5de6\u53f3\uff0c\u800cHr\u6700\u540e\u767b\u5f55\u65f6\u95f4\u96c6\u4e2d\u5728\u4e0b\u534815-17\u70b9\u4e4b\u95f4\uff0c\u56e0\u6b64\uff0c\u4e2a\u4eba\u8ba4\u4e3a\u62c9\u52fe\u7f51\u6295\u9012\u62db\u8058\u7b80\u5386\u7684\u8f83\u4f73\u65f6\u95f4\u4e3a\u4e0a\u534811\u70b9-\u4e0b\u534813\u70b9\u4e4b\u95f4\u3002", 
            "title": "\u603b\u7ed3"
        }, 
        {
            "location": "/data_analysis/p2p_runaway_analysis/p2p_runaway_classify_analysis_forshow/", 
            "text": "p2p\u8dd1\u8def\u5206\u7c7b\u9884\u6d4b\u5206\u6790\n\n\n\u80cc\u666f\u8bf4\u660e\n\n\n\u8fd1\u51e0\u5e74\uff0cp2p\u7f51\u8d37\u884c\u4e1a\u53d1\u5c55\u7684\u662f\u82e5\u706b\u5982\u837c\uff0c\u800c\u6574\u4e2a\u884c\u4e1a\u7684\u5feb\u901f\u53d1\u5c55\u5374\u63a9\u76d6\u4e0d\u4e86\u5176\u53d1\u5c55\u7684\u4e0d\u89c4\u8303\u6027\u3002P2P\u7f51\u8d37\u6700\u5927\u7684\u4f18\u8d8a\u6027\u662f\u4f7f\u4f20\u7edf\u94f6\u884c\u96be\u4ee5\u8986\u76d6\u7684\u501f\u6b3e\u4eba\u5728\u865a\u62df\u4e16\u754c\u91cc\u80fd\u5145\u5206\u4eab\u53d7\u8d37\u6b3e\u7684\u9ad8\u6548\u4e0e\u4fbf\u6377\u3002\u4f46\u4e0e\u6b64\u540c\u65f6\uff0c\u6574\u4e2a\u884c\u4e1a\u4e5f\u662f\u6ce5\u6c99\u4ff1\u4e0b\uff0c\u826f\u83a0\u4e0d\u9f50\u3002\u4e00\u65b9\u9762P2P\u884c\u4e1a\u4ecd\u7136\u5448\u73b0\u9ad8\u901f\u589e\u957f\u6001\u52bf\uff0c\u53e6\u4e00\u65b9\u9762\u5219\u662f\u5e73\u53f0\u63d0\u73b0\u56f0\u96be\u3001\u5012\u95ed\u3001\u574f\u8d26\u98ce\u6ce2\u4e0d\u65ad\uff0c\u51fa\u73b0\u4e86\u6240\u8c13\u7684p2p\u8dd1\u8def\u73b0\u8c61\u3002\n\u672c\u6587\u4ece\u666e\u901a\u6295\u8d44\u8005\u7684\u89d2\u5ea6\u63a2\u8ba8p2p\u7f51\u8d37\u5e73\u53f0\u8dd1\u8def\u7684\u7f18\u7531\uff0c\u5206\u6790\u7f51\u8d37\u5e73\u53f0\u7684\u5404\u79cd\u6307\u6807\u4e0e\u5e73\u53f0\u7ecf\u8425\u72b6\u6001\u7684\u5173\u8054\uff0c\u5bf9p2p\u7f51\u8d37\u5e73\u53f0\u662f\u5426\u4f1a\u201c\u8dd1\u8def\u201d\u8fdb\u884c\u9884\u6d4b\u3002\n\n\n\u672c\u62a5\u544a\u7684\u6240\u6709\u6570\u636e\u6765\u6e90\u4e8exx\u4e4b\u5bb6\u7684\u6863\u6848\uff0c\u6570\u636e\u622a\u6b62\u65e5\u671f\u4e3a2016\u5e7411\u67083\u65e5\u3002\u4ee5xx\u4e4b\u5bb6\u6863\u6848\u4e2d\u76843895\u5bb6p2p\u7f51\u8d37\u5e73\u53f0\u4e3a\u6e90\u6570\u636e\uff0c\u9009\u62e9\u4e86\u7f51\u8d37\u5e73\u53f0\u7684\u51e0\u4e2a\u8bc4\u4f30\u6307\u6807\u5982\uff0c\u5e73\u5747\u6536\u76ca\u7387\u3001\u8d44\u91d1\u6258\u7ba1\u3001\u7f51\u53cb\u8bc4\u5206\u3001\u5e73\u53f0\u8d44\u8d28\u3001\u6295\u8d44\u671f\u9650\u3001\u6ce8\u518c\u5730\u7b49\u4e3a\u6837\u672c\u7684\u7279\u5f81\uff0c\u4ee5\u7f51\u8d37\u5e73\u53f0\u7684\u7ecf\u8425\u72b6\u51b5\uff08\u662f\u6b63\u5e38\u8425\u4e1a\u72b6\u6001\u8fd8\u662f\u8dd1\u8def\u7b49\u975e\u6b63\u5e38\u8425\u4e1a\u72b6\u6001\uff09\u4e3a\u5206\u7c7b\u6807\u7b7e\uff0c\u5c1d\u8bd5\u5229\u7528\u673a\u5668\u5b66\u4e60\u7684\u51b3\u7b56\u6811\u5206\u7c7b\u7b97\u6cd5\u8bc4\u4f30\u548c\u9884\u6d4bp2p\u7f51\u8d37\u5e73\u53f0\u7684\u8dd1\u8def\u73b0\u8c61\u3002\n\n\n\u6570\u636e\u91c7\u96c6\u53ca\u6e05\u6d17\n\n\n\u91c7\u7528python\u7684urllib2\u548cbeautifulsoup\u8fdb\u884c\u6570\u636e\u7684\u91c7\u96c6\u548c\u89e3\u6790\uff0c\u91c7\u7528python\u7b2c\u4e09\u65b9\u5e93pandas, numpy\u5bf9\u6570\u636e\u8fdb\u884c\u6e05\u6d17\u5904\u7406\uff0c\u6570\u636e\u91c7\u96c6\u548c\u7b80\u5355\u7684\u5904\u7406\u8fc7\u7a0b\u5728\u6b64\u7565\u8fc7\u3002\n\n\n\u63a2\u7d22\u6027\u5206\u6790\n\n\nimport pandas as pd\nimport numpy as np \nimport matplotlib.pyplot as plt\nimport seaborn as sns\nsns.set(style=\nwhitegrid\n, palette=\nmuted\n, font_scale=1.0, color_codes=True, context=\ntalk\n)\n%matplotlib inline\nimport sys\nfrom matplotlib.ticker import MultipleLocator, FormatStrFormatter\nfrom matplotlib.font_manager import FontProperties  \nfont = FontProperties(fname=r\n/usr/share/fonts/truetype/arphic/ukai.ttc\n)\nreload(sys)\nsys.setdefaultencoding('utf-8')\n\n\n\n\n# \u8f7d\u5165\u6e05\u6d17\u540e\u7684\u6570\u636e\u96c6\uff0c\u8fdb\u884c\u76f8\u5e94\u5904\u7406\ndall = pd.read_table(\n./p2pchanged.txt\n, sep=',')  # (3895, 12) \n\n\n\n\n# \u5404\u7279\u5f81\u5206\u522b\u4e3a\uff1a\nfeature_dict = {\nname\n: u\np2p\u5e73\u53f0\u540d\n, \naverageI\n: u\n\u5e73\u5747\u5e74\u5316\u5229\u7387\n, \n               \ndate\n: u\n\u4e0a\u7ebf\u65e5\u671f\n, \nzhuzed\n: u\n\u6ce8\u518c\u5730\n, \n                \ntouziq\n: u\n\u6295\u8d44\u671f\u9650\n, \nnetF\n: u\n\u7f51\u53cb\u8bc4\u5206\n, \n                \nbackground\n: u\n\u516c\u53f8\u7c7b\u578b\n, \ntuoguan\n: u\n\u8d44\u91d1\u6258\u7ba1\n,\n                \nzhuz\n: u\n\u6ce8\u518c\u8d44\u672c\n, \nshiz\n: u\n\u5b9e\u7f34\u8d44\u672c\n, \n                \ndatetime\n: u\n\u4e0a\u7ebf\u65f6\u95f4\n, \nclassification\n: u\n\u5206\u7c7b\u6807\u7b7e\n\n               }\n\n\n\n\n# \u6570\u636e\u96c6\u524d5\u884c\ndall.head()\n\n\n\n\n\n\n\n  \n\n    \n\n      \n\n      \nname\n\n      \naverageI\n\n      \ndate\n\n      \nzhuzed\n\n      \nclassification\n\n      \ntouziq\n\n      \nnetF\n\n      \nbackground\n\n      \ntuoguan\n\n      \nzhuz\n\n      \nshiz\n\n      \ndatetime\n\n    \n\n  \n\n  \n\n    \n\n      \n0\n\n      \n108\u8d37\n\n      \n14.548392\n\n      \n2015-02-26\n\n      \n44.0\n\n      \n0.0\n\n      \n2.578413\n\n      \n14.351883\n\n      \n0\n\n      \n0\n\n      \n500\n\n      \n0\n\n      \n5.326389e+07\n\n    \n\n    \n\n      \n1\n\n      \n2025\u91d1\u878d\n\n      \n14.548392\n\n      \n2015-11-16\n\n      \n11.0\n\n      \n0.0\n\n      \n2.578413\n\n      \n14.351883\n\n      \n0\n\n      \n0\n\n      \n2000\n\n      \n0\n\n      \n3.054069e+07\n\n    \n\n    \n\n      \n2\n\n      \n51\u5e2e\u4f60\n\n      \n12.460000\n\n      \n2012-08-15\n\n      \n33.0\n\n      \n1.0\n\n      \n1.172000\n\n      \n16.500000\n\n      \n0\n\n      \n1\n\n      \n3000\n\n      \n2000\n\n      \n1.331839e+08\n\n    \n\n    \n\n      \n3\n\n      \n53\u8d22\u670d\n\n      \n14.548392\n\n      \n2016-04-18\n\n      \n33.0\n\n      \n1.0\n\n      \n1.100000\n\n      \n14.351883\n\n      \n0\n\n      \n0\n\n      \n10000\n\n      \n20\n\n      \n1.723509e+07\n\n    \n\n    \n\n      \n4\n\n      \n51\u94b1\u7ba1\u5bb6\n\n      \n12.000000\n\n      \n2015-11-04\n\n      \n50.0\n\n      \n1.0\n\n      \n2.578413\n\n      \n14.000000\n\n      \n0\n\n      \n1\n\n      \n10000\n\n      \n100\n\n      \n3.157749e+07\n\n    \n\n  \n\n\n\n\n\n\n\n\u5e73\u5747\u5e74\u5316\u5229\u7387\n\n\ndall[\naverageI\n] = dall[\naverageI\n].map(lambda x: np.round(x, 4))\ndall.loc[:, \nclassification\n] = dall[\nclassification\n].replace([0,1], [u'\u8dd1\u8def',u'\u6b63\u5e38\u8425\u4e1a'])\ndf = dall.loc[dall[\naverageI\n] != 14.5484, :]\n\n\n\n\nplt.figure(figsize=(8,6))\nfig = sns.distplot(df['averageI'],kde=True, vertical=False, color=\ngreen\n)\nsns.despine(top=True)\nplt.yticks(fig.get_yticks(), fig.get_yticks() * 100)\nplt.ylabel('Distribution [%]', fontsize=16)\nplt.xticks(range(0, 100, 10))\nplt.gca().yaxis.grid(True, linestyle = \n:\n)\nplt.gca().xaxis.grid(True, linestyle = \n-.\n)\nplt.xlabel(u\n\u5e73\u5747\u5e74\u5316\u5229\u7387 %\n, fontsize=16, fontproperties=font)\nplt.title(u\n\u5e73\u5747\u5e74\u5316\u5229\u7387\u7684\u5206\u5e03\n, fontsize=20, fontproperties=font)\n\n\n\n\nmatplotlib.text.Text at 0x7fe3af9f8a10\n\n\n\n\n\n\n# \u6839\u636e\u8dd1\u8def\u4e0e\u5426\u8fdb\u884c\u5206\u7ec4\u5f97\u5230\u4e86\u5e73\u5747\u5229\u7387\u7684\u5206\u7ec4\u5bf9\u8c61\nrate_cont = df.groupby([\nclassification\n])[\naverageI\n]  \n\n\n\n\nfig, ax1 = plt.subplots(figsize=(8,6))\nrate_cont.plot(kind='kde',ax=ax1, style='--', linewidth=2.5)\nrate_cont.plot(kind='hist',ax=ax1, normed=True, alpha=0.8,)\nax1.legend(loc='best', prop=font, fontsize=17)\nax1.set_ylabel('Frequency', fontsize=16)\nax1.set_xlim(-1, 95)\nax1.text(14.0, 0.115,s=u'\u6b63\u5e38\u8425\u4e1a\u5e73\u53f0\u5e73\u5747\u6536\u76ca\u7387 12.88%', fontsize=12,va=\nbottom\n,ha=\nleft\n,fontproperties=font,color='blue') \nax1.text(20.0, 0.09,s=u'\u8dd1\u8def\u5e73\u53f0\u5e73\u5747\u6536\u76ca\u7387 18.56%', fontsize=12,va=\nbottom\n,ha=\nleft\n,fontproperties=font,color='green')\nax1.annotate('',xy=(12.18,0.109),xytext=(14,0.115),arrowprops=dict(arrowstyle=\n-\n,color='blue')) \nax1.annotate('',xy=(17.9,0.08),xytext=(20,0.09),arrowprops=dict(arrowstyle=\n-\n,color='green'))\nplt.xlabel(u\n\u5e73\u5747\u5e74\u5316\u5229\u7387 %\n, fontsize=16, fontproperties=font)\nplt.title(u\np2p\u5e73\u53f0\u8dd1\u8def\u4e0e\u5426\u4e0e\u5e73\u5747\u6536\u76ca\u7387\n, fontsize=20, fontproperties=font)\nplt.yticks(ax1.get_yticks(), ax1.get_yticks() * 100)\nplt.ylabel('Distribution [%]', fontsize=16)\nplt.xticks(range(0, 100, 10))\nplt.gca().yaxis.grid(True, linestyle = \n:\n)\nplt.gca().xaxis.grid(True, linestyle = \n-.\n)\n\n\n\n\n\n\np2p\u7f51\u8d37\u5e73\u53f0\u7684\u5e73\u5747\u5e74\u5316\u6536\u76ca\u7387\u5206\u5e03\u5f88\u5e7f\uff0c\u4ece\u6700\u4f4e\u76844%\u5230\u6700\u9ad8\u768490%\u5747\u6709\uff0c\u5176\u4e2d\u6b63\u5e38\u8425\u4e1a\u7684p2p\u5e73\u53f0\u4e3b\u8981\u5206\u5e03\u57285-20%, \u800c\u8dd1\u8def\u5e73\u53f0\u4e3b\u8981\u5206\u5e03\u57288-30%\u4e4b\u95f4\u3002\u6b63\u5e38\u8425\u4e1a\u7684p2p\u5e73\u53f0\u7684\u5e73\u5747\u6536\u76ca\u7387\u4e3a12.88%\uff0c\u8dd1\u8def\u5e73\u53f0\u7684\u5e73\u5747\u6536\u76ca\u7387\u662f18.56%\u3002\n\n\n\u5730\u57df\u5206\u5e03\n\n\n# \u8f7d\u5165\u5730\u533a\u7f16\u53f7\uff0c\u517130\u4e2a\u7701\nplaces = pd.read_table(\n./regis_place.txt\n, sep=',', header=None)  # (30,2) \nplaces.columns =[\nnumber_pro\n, \nname_pro\n]\n\n\n\n\ndf_set = set(df[\nzhuzed\n].astype(np.int).values)\nplaces_set = set(places[\nnumber_pro\n])\nplaces_set ^ df_set\n\n\n\n\n{54, 63}\n\n\n\np1 = places.loc[places[\nnumber_pro\n] != 54, :]\np_sub = p1.loc[p1[\nnumber_pro\n] != 63, :][\nname_pro\n]\np_sub.shape\n\n\n\n\n(29,)\n\n\n\n# \u6839\u636e\u6ce8\u518c\u5730\u8fdb\u884c\u5206\u7ec4\npro_groupby = df.groupby(\nzhuzed\n)[\naverageI\n].aggregate([np.size, np.mean]).reset_index()\npro_name = pro_groupby[\nzhuzed\n].replace(pro_groupby[\nzhuzed\n].values, p_sub)\npro_groupby[\npro_name\n] = pro_name.map(lambda x: x.strip())\npro_groupby.sort_values(\nsize\n, ascending=False, inplace=True)\npro_groupby.head(3)\n\n\n\n\n\n\n\n  \n\n    \n\n      \n\n      \nzhuzed\n\n      \nsize\n\n      \nmean\n\n      \npro_name\n\n    \n\n  \n\n  \n\n    \n\n      \n18\n\n      \n44.0\n\n      \n479.0\n\n      \n14.446493\n\n      \n\u5e7f\u4e1c\n\n    \n\n    \n\n      \n0\n\n      \n11.0\n\n      \n335.0\n\n      \n11.644448\n\n      \n\u5317\u4eac\n\n    \n\n    \n\n      \n8\n\n      \n31.0\n\n      \n246.0\n\n      \n12.214431\n\n      \n\u4e0a\u6d77\n\n    \n\n  \n\n\n\n\n\n\n\nfig, ax1 = plt.subplots(figsize=(10,7))\ng = sns.barplot(y=\nsize\n, x=\npro_name\n, data=pro_groupby, palette=\nPuBu_d\n, ax=ax1)\nplt.xticks(g.get_xticks(), fontproperties=font, fontsize=16, rotation=75)\n# g=sns.factorplot(y=\nzhuzed\n, data=df, kind='count', size=6, color=\nindianred\n)\nax2 = ax1.twinx()\nx_list = range(len(pro_groupby))\nax2.plot(x_list, pro_groupby[\nmean\n], linewidth = 3, color=\nskyblue\n, marker=\no\n, label=u\n\u804c\u4f4d\u9700\u6c42\u91cf\n) \nax2.set_ylabel(u\n\u5e73\u5747\u5e74\u5316\u5229\u7387 %\n, fontsize=16, fontproperties=font)\nax1.set_ylabel(u\n\u6570\u91cf\n, fontsize=16, fontproperties=font)\nax2.set_ylim(4, 20)\nax2.yaxis.grid(True, linestyle = \n:\n,)\nax1.yaxis.grid(False)\nplt.title(u\n\u5168\u56fd\u5404\u5730\u533ap2p\u7f51\u8d37\u5e73\u53f0\u6570\u91cf\u53ca\u5e73\u5747\u5e74\u5316\u5229\u7387\n, fontproperties=font, fontsize=20)\n\n\n\n\n\n\n# \u6839\u636e\u6ce8\u518c\u5730\u548c\u8dd1\u8def\u4e0e\u5426\u7684\u5206\u7c7b\u6807\u7b7e\u8fdb\u884c\u5206\u7ec4\npro_cla = df.groupby([\nzhuzed\n, \nclassification\n])[\naverageI\n].aggregate([np.size, np.mean]).reset_index()\npro_name = pro_cla[\nzhuzed\n].replace(pro_cla[\nzhuzed\n].unique(), p_sub)\npro_cla[\npro_name\n] = pro_name.map(lambda x: x.strip())\n\n\n\n\nfor i in pro_cla[\nzhuzed\n].unique():\n    total_ = pro_cla.loc[pro_cla[\nzhuzed\n] == i, \nsize\n].sum()\n    temp = pro_cla.loc[pro_cla[\nzhuzed\n] == i, \nsize\n] / total_ * 100\n    pro_cla.loc[pro_cla[\nzhuzed\n] == i, \nproperty\n] = temp\n    pro_cla.loc[pro_cla[\nzhuzed\n] == i, \ntotal_num\n] = total_   \n\n\n\n\npro_cla.sort_values([\ntotal_num\n, \nclassification\n], ascending=False, inplace=True)\npro_cla.head(15)\n\n\n\n\n\n\n\n  \n\n    \n\n      \n\n      \nzhuzed\n\n      \nclassification\n\n      \nsize\n\n      \nmean\n\n      \npro_name\n\n      \nproperty\n\n      \ntotal_num\n\n    \n\n  \n\n  \n\n    \n\n      \n37\n\n      \n44.0\n\n      \n\u8dd1\u8def\n\n      \n149.0\n\n      \n17.667383\n\n      \n\u5e7f\u4e1c\n\n      \n31.106472\n\n      \n479.0\n\n    \n\n    \n\n      \n36\n\n      \n44.0\n\n      \n\u6b63\u5e38\u8425\u4e1a\n\n      \n330.0\n\n      \n12.992212\n\n      \n\u5e7f\u4e1c\n\n      \n68.893528\n\n      \n479.0\n\n    \n\n    \n\n      \n1\n\n      \n11.0\n\n      \n\u8dd1\u8def\n\n      \n57.0\n\n      \n13.858772\n\n      \n\u5317\u4eac\n\n      \n17.014925\n\n      \n335.0\n\n    \n\n    \n\n      \n0\n\n      \n11.0\n\n      \n\u6b63\u5e38\u8425\u4e1a\n\n      \n278.0\n\n      \n11.190432\n\n      \n\u5317\u4eac\n\n      \n82.985075\n\n      \n335.0\n\n    \n\n    \n\n      \n17\n\n      \n31.0\n\n      \n\u8dd1\u8def\n\n      \n54.0\n\n      \n16.403704\n\n      \n\u4e0a\u6d77\n\n      \n21.951220\n\n      \n246.0\n\n    \n\n    \n\n      \n16\n\n      \n31.0\n\n      \n\u6b63\u5e38\u8425\u4e1a\n\n      \n192.0\n\n      \n11.036198\n\n      \n\u4e0a\u6d77\n\n      \n78.048780\n\n      \n246.0\n\n    \n\n    \n\n      \n21\n\n      \n33.0\n\n      \n\u8dd1\u8def\n\n      \n42.0\n\n      \n22.031429\n\n      \n\u6d59\u6c5f\n\n      \n23.204420\n\n      \n181.0\n\n    \n\n    \n\n      \n20\n\n      \n33.0\n\n      \n\u6b63\u5e38\u8425\u4e1a\n\n      \n139.0\n\n      \n13.863022\n\n      \n\u6d59\u6c5f\n\n      \n76.795580\n\n      \n181.0\n\n    \n\n    \n\n      \n29\n\n      \n37.0\n\n      \n\u8dd1\u8def\n\n      \n92.0\n\n      \n21.970326\n\n      \n\u5c71\u4e1c\n\n      \n57.142857\n\n      \n161.0\n\n    \n\n    \n\n      \n28\n\n      \n37.0\n\n      \n\u6b63\u5e38\u8425\u4e1a\n\n      \n69.0\n\n      \n15.144058\n\n      \n\u5c71\u4e1c\n\n      \n42.857143\n\n      \n161.0\n\n    \n\n    \n\n      \n33\n\n      \n42.0\n\n      \n\u8dd1\u8def\n\n      \n30.0\n\n      \n17.895000\n\n      \n\u6e56\u5317\n\n      \n31.578947\n\n      \n95.0\n\n    \n\n    \n\n      \n32\n\n      \n42.0\n\n      \n\u6b63\u5e38\u8425\u4e1a\n\n      \n65.0\n\n      \n13.785231\n\n      \n\u6e56\u5317\n\n      \n68.421053\n\n      \n95.0\n\n    \n\n    \n\n      \n23\n\n      \n34.0\n\n      \n\u8dd1\u8def\n\n      \n27.0\n\n      \n18.066667\n\n      \n\u5b89\u5fbd\n\n      \n36.486486\n\n      \n74.0\n\n    \n\n    \n\n      \n22\n\n      \n34.0\n\n      \n\u6b63\u5e38\u8425\u4e1a\n\n      \n47.0\n\n      \n13.342553\n\n      \n\u5b89\u5fbd\n\n      \n63.513514\n\n      \n74.0\n\n    \n\n    \n\n      \n19\n\n      \n32.0\n\n      \n\u8dd1\u8def\n\n      \n18.0\n\n      \n21.010556\n\n      \n\u6c5f\u82cf\n\n      \n25.714286\n\n      \n70.0\n\n    \n\n  \n\n\n\n\n\n\n\nplt.figure(figsize=(7, 12))\ng=sns.barplot(y=\npro_name\n, x=\nsize\n, data=pro_cla, hue=\nclassification\n)\nplt.yticks(g.get_yticks(), fontproperties=font, fontsize=16)\nplt.ylabel(\n)\nplt.xlabel(u\n\u6570\u91cf\n, fontsize=16, fontproperties=font)\nplt.title(u\np2p\u7f51\u8d37\u5e73\u53f0\u5730\u533a\u5206\u5e03\n, fontproperties=font, fontsize=20)\nplt.gca().xaxis.grid(True, linestyle = \n-.\n,)\nplt.legend(loc=7,prop=font, fontsize=12)\nplt.annotate(u\n\u5c71\u4e1c\u5730\u533ap2p\u8dd1\u8def\u6bd4\u4f8b\u6700\u9ad8\u8fbe57%\n, xy = (80, 4), xytext = (100, 6), fontproperties=font, fontsize=15, arrowprops = dict(facecolor='purple'))\n\n\n\n\nmatplotlib.text.Annotation at 0x7fe3a13a9110\n\n\n\n\n\n\n\u5168\u56fdp2p\u5e73\u53f0\u7684\u6570\u91cf\u4f4d\u5c45\u524d\u4e09\u7684\u7701\u4efd\uff08\u5e02\uff09\u662f\u5e7f\u4e1c\u3001\u5317\u4eac\u3001\u4e0a\u6d77\uff0c\u8dd1\u8def\u5e73\u53f0\u6bd4\u4f8b\u6700\u9ad8\u7684\u662f\u5c71\u4e1c\uff0c\u8d85\u8fc7\u4e00\u534a\u7684p2p\u7f51\u8d37\u5e73\u53f0\u51fa\u73b0\u8dd1\u8def\u6216\u5176\u4ed6\u975e\u6b63\u5e38\u8425\u4e1a\u73b0\u8c61\u3002\n\n\np2p\u7f51\u8d37\u6210\u7acb\u65f6\u95f4\n\n\n# \u5c06\u65f6\u95f4str\u8f6c\u6210datetime\ndf['date'] = pd.to_datetime(df['date'])\n# \u5c06\u8f6c\u6362\u597d\u7684\u65f6\u95f4series\u8bbe\u7f6e\u6210\u884c\u7d22\u5f15\ndt = df.set_index(\ndate\n)\ndt[\nyear_\n] = dt.index.year\ndt[\nmonth\n] = dt.index.month\nyear_groupby = dt.groupby(\nyear_\n)[\naverageI\n].aggregate([np.size, np.mean, np.median])\nyear_groupby.drop(year_groupby.index[0], inplace=True)\nyear_groupby.reset_index(inplace=True)\n\n\n\n\nmonth_groupby = dt.groupby(\nmonth\n)[\naverageI\n].aggregate([np.size, np.mean, np.median])\nmonth_groupby.drop(month_groupby.index[0], inplace=True)\nmonth_groupby.reset_index(inplace=True)\nmonth_groupby\n\n\n\n\n\n\n\n  \n\n    \n\n      \n\n      \nmonth\n\n      \nsize\n\n      \nmean\n\n      \nmedian\n\n    \n\n  \n\n  \n\n    \n\n      \n0\n\n      \n2\n\n      \n97.0\n\n      \n13.900103\n\n      \n12.600\n\n    \n\n    \n\n      \n1\n\n      \n3\n\n      \n202.0\n\n      \n14.094703\n\n      \n13.295\n\n    \n\n    \n\n      \n2\n\n      \n4\n\n      \n191.0\n\n      \n13.716649\n\n      \n13.000\n\n    \n\n    \n\n      \n3\n\n      \n5\n\n      \n171.0\n\n      \n14.180819\n\n      \n12.790\n\n    \n\n    \n\n      \n4\n\n      \n6\n\n      \n180.0\n\n      \n14.210944\n\n      \n13.000\n\n    \n\n    \n\n      \n5\n\n      \n7\n\n      \n193.0\n\n      \n14.886114\n\n      \n13.500\n\n    \n\n    \n\n      \n6\n\n      \n8\n\n      \n186.0\n\n      \n15.527688\n\n      \n14.000\n\n    \n\n    \n\n      \n7\n\n      \n9\n\n      \n194.0\n\n      \n14.236392\n\n      \n13.195\n\n    \n\n    \n\n      \n8\n\n      \n10\n\n      \n171.0\n\n      \n15.033860\n\n      \n14.000\n\n    \n\n    \n\n      \n9\n\n      \n11\n\n      \n200.0\n\n      \n15.484450\n\n      \n14.300\n\n    \n\n    \n\n      \n10\n\n      \n12\n\n      \n239.0\n\n      \n13.877448\n\n      \n13.440\n\n    \n\n  \n\n\n\n\n\n\n\np2p_date_dict = {\nyear_\n: u\n\u5e74\u4efd\n, \nmonth\n: u\n\u6708\u4efd\n}\n\n\n\n\ndef p2p_date_plot(dt, groupby_item):\n    data = dt.groupby(groupby_item)[\naverageI\n].aggregate([np.size, np.mean, np.median])\n    data.drop(data.index[0], inplace=True)\n    data.reset_index(inplace=True)  \n    fig, ax1 = plt.subplots(figsize=(8,6))\n    g = sns.barplot(y=\nsize\n, x=groupby_item, data=data, palette=\nBuGn_d\n, ax=ax1)\n    plt.xticks(g.get_xticks(), fontproperties=font, fontsize=16, rotation=60)\n    ax2 = ax1.twinx()\n    x_list = range(len(data))\n    ax2.plot(x_list, data[\nmean\n], linewidth = 3, color=\ndarkgreen\n, marker=\no\n, label=u\n\u5229\u7387\n) \n    ax2.set_ylabel(u\n\u5e73\u5747\u5e74\u5316\u5229\u7387 %\n, fontsize=16, fontproperties=font)\n    ax1.set_ylabel(u\n\u6570\u91cf\n, fontsize=16, fontproperties=font)\n    ax1.set_xlabel(\n)\n    ax2.yaxis.grid(True, linestyle = \n:\n, linewidth=2, color=\ngreen\n, alpha=0.2)\n    ax1.yaxis.grid(False)\n    if groupby_item == \nmonth\n:\n        ax2.set_ylim(10, 18) \n        # ax2.axhline(y=14.7,linewidth=2, xmin=0.5, xmax=0.8, color='r')        \n        # \u5e73\u884cx\u8f74\u7684\u77e9\u5f62\uff0c\u53c2\u6570\uff1aymin,ymax,xmin=0,xmin=1        \n        ax2.axhspan(14.7, 15.7, 0.49, 0.6, facecolor=\nskyblue\n, alpha=0.8)\n        ax2.axhspan(14.7, 15.7, 0.74, 0.85, facecolor=\nskyblue\n, alpha=0.8)\n        plt.annotate(\n, xy = (8.1, 15.7), xytext = (7.5, 16.7), fontproperties=font, fontsize=15, arrowprops = dict(facecolor='skyblue'))        \n        plt.annotate(\n, xy = (5, 15.7), xytext = (7, 16.7), fontproperties=font, fontsize=15, arrowprops = dict(facecolor='skyblue'))        \n    plt.title(u\np2p\u7f51\u8d37\u5e73\u53f0\u6570\u91cf\u53ca\u5e73\u5747\u5e74\u5316\u5229\u7387\u4e0e\u6210\u7acb{}\n.format(p2p_date_dict.get(groupby_item)), fontproperties=font, fontsize=20)\n    plt.legend(loc=\nbest\n,prop=font, fontsize=17)\n\n\n\n\nfor i in p2p_date_dict:   \n    p2p_date_plot(dt, i)\n\n\n\n\n\n\n\n\n\u7edf\u8ba1\u6570\u636e\u663e\u793a\u6211\u56fd\u6700\u65e9\u7684p2p\u7f51\u8d37\u5e73\u53f0\u6210\u7acb\u4e8e2004\u5e744\u6708\uff0c\u622a\u6b62\u523016\u5e7411\u6708\u521d\uff0c\u5168\u56fd\u6ce8\u518c\u6210\u7acb\u4e86\u8fd14000\u5bb6p2p\u7f51\u8d37\u5e73\u53f0\u3002\u6211\u56fd\u7684p2p\u7f51\u8d37\u884c\u4e1a\u57282013\u5e74\u8fdb\u884c\u9ad8\u901f\u53d1\u5c55\u671f\uff0c\u52302014\u5e74\u5e95\u53ca2015\u5e74\u521d\u5230\u8fbe\u9876\u5cf0\uff0c\u968f\u540e\u589e\u901f\u653e\u6162\u3002\n\n\n\u4ece\u5e73\u5747\u5229\u7387\u4e0a\u770b\uff0c2013\u5e74\u8fbe\u5230\u6700\u5927\u503c\uff0c\u968f\u540e\u6025\u5267\u964d\u4f4e;\u4ece\u5229\u7387\u4e0e\u6708\u4efd\u7684\u5173\u7cfb\u53ef\u770b\u51fa\uff0c7-8\u300110-11\u6708\u4efd\u7684\u5e73\u5747\u5229\u7387\u9ad8\u4e8e\u5176\u4ed6\u6708\u4efd\uff0c\u96be\u9053\u8ddf\u5e02\u573a\u6d41\u52a8\u8d44\u91d1\u7d27\u7f3a\u7a0b\u5ea6\u76f8\u5173\uff1f\n\n\n\u8d44\u91d1\u6258\u7ba1\n\n\nfig, ax = plt.subplots(figsize=(8,6))\nsns.barplot(x=\ntuoguan\n, y=\naverageI\n, hue=\nclassification\n, hue_order=[u\n\u8dd1\u8def\n, u\n\u6b63\u5e38\u8425\u4e1a\n], data=df, palette=\nhusl\n, ax=ax)\nax.set_xticklabels([u\n\u65e0\u6258\u7ba1\n, u\n\u6258\u7ba1\n], fontproperties=font, fontsize=16)\nax2 = ax.twinx()\n# \u6258\u7ba1\u72b6\u51b5\u767e\u5206\u6bd4\ndft = df[\ntuoguan\n].value_counts() / df.shape[0] * 100\nax2.plot([0,1], dft.values, linewidth = 1, color=\nb\n, marker=\n*\n, markersize=20, label=u\n\u767e\u5206\u6bd4%\n) \nax.set_ylabel(u\n\u5e73\u5747\u5e74\u5316\u5229\u7387%\n, fontsize=16, fontproperties=font)\nax2.set_ylabel(u\n\u767e\u5206\u6bd4%\n, fontsize=16, fontproperties=font)\nax.yaxis.grid(True, linestyle = \n-.\n,)\nax2.yaxis.grid(False)\nax.legend(loc=9,prop=font, fontsize=17)\nax2.legend(loc=1,prop=font, fontsize=17)\nax.set_xlabel(\n)\nplt.title(u\np2p\u5e73\u53f0\u8d44\u91d1\u6258\u7ba1\u72b6\u51b5\n, fontproperties=font, fontsize=20)\n\n\n\n\nmatplotlib.text.Text at 0x7fe397039310\n\n\n\n\n\n\n\u53ea\u6709\u7ea645%\u7684\u7f51\u8d37\u5e73\u53f0\u8fdb\u884c\u4e86\u8d44\u91d1\u6258\u7ba1\uff0c\u8fdb\u884c\u8d44\u91d1\u6258\u7ba1\u7684p2p\u7f51\u8d37\u5e73\u53f0\u7684\u5e73\u5747\u5229\u7387\u4f4e\u4e8e\u672a\u8fdb\u884c\u8d44\u91d1\u6258\u7ba1\u7684\u5e73\u53f0\uff0c\u8dd1\u8def\u6216\u51fa\u73b0\u5176\u4ed6\u7ecf\u8425\u72b6\u51b5\u7684\u5e73\u5747\u5229\u7387\u5747\u9ad8\u4e8e\u6b63\u5e38\u8425\u4e1a\u7684\u5e73\u53f0\u3002\n\n\n\u7f51\u53cb\u8bc4\u5206\n\n\ndf[\nnet_score\n] = df[\nnetF\n].astype(np.int)\nnet_friend_score = df.groupby(\nclassification\n)[\nnet_score\n].value_counts().unstack().unstack().unstack().fillna(0)\nnet_friend_score[\ntotal\n] = net_friend_score.sum(axis=1)\nnet_friend_score_cum = net_friend_score.div(net_friend_score[\ntotal\n], axis=0)*100\nnet_friend_score_cum.drop(\ntotal\n, axis=1, inplace=True)\nnet_friend_score.drop(\ntotal\n, axis=1, inplace=True)\nfig1, (ax1, ax2) = plt.subplots(2,1, sharex=True, figsize=(12,9)) \nnet_friend_score_cum.plot(kind='bar',ax=ax1, stacked=True, label=\n)\nnet_friend_score.plot(kind='bar',ax=ax2, stacked=True)\nax1.legend(loc=1, prop=font, fontsize=17)\nax2.legend(loc='best', prop=font, fontsize=17)\nax2.xaxis.grid(False)\nax2.yaxis.grid(True, linestyle=\n-.\n)\nax1.yaxis.grid(True, linestyle=\n-.\n)\nax2.set_ylabel(u\n\u6570\u91cf\n, fontsize=16, fontproperties=font)\nax1.set_ylabel(u\n\u767e\u5206\u6bd4%\n, fontsize=16, fontproperties=font)\nax2.annotate(\n5\n, xy = (1, 10), xytext = (2.5, 160), fontproperties=font, fontsize=15, arrowprops = dict(facecolor=\nm\n))        \nax1.annotate(u\n\u603b\u6570\u4e3a5\n, xy = (1, 76), xytext = (1.5,60), fontproperties=font, fontsize=15, arrowprops = dict(facecolor=\nm\n))        \nplt.xlabel(u\n\u7f51\u53cb\u8bc4\u5206\n, fontproperties=font, fontsize=17)\n\n\n\n\nmatplotlib.text.Text at 0x7fe3912ed850\n\n\n\n\n\n\n\u7f51\u53cb\u8bc4\u5206\u680f\u5305\u62ec\u56db\u9879\uff0c\u6bcf\u9879\u8bb05\u5206\uff0c\u6ee1\u5206\u603b\u517120\u5206\u3002\u5728\u6570\u636e\u5904\u7406\u65f6\u5c06\u6bcf\u4e00\u8bc4\u5206\u9879\u76ee\u7684\u65e0\u8bc4\u5206\u7684\u6216\u5c0f\u4e8e1.0\u5206\u7684\u7edf\u7edf\u8bb0\u4e3a1.0\u5206\uff0c\u56e0\u6b64\uff0c\u6700\u4f4e\u5206\u4e3a4.0\u5206\uff0c\u6700\u9ad8\u4e3a20\u5206\u3002\u6839\u636e\u76f8\u5bf9\u7d2f\u8ba1\u67f1\u72b6\u56fe\uff0c\u7f51\u53cb\u8bc4\u5206\u8f83\u9ad8\u7684\u7f51\u8d37\u5e73\u53f0\u51fa\u73b0\u8dd1\u8def\u7684\u6bd4\u4f8b\u8f83\u4f4e\u3002\u7531\u4e8e5\u5206\u7684\u5e73\u53f0\u6570\u91cf\u53ea\u67095\u5bb6\uff0c\u9020\u6210\u767e\u5206\u6570\u504f\u79bb\u8f83\u5927\u3002\n\n\np2p\u7f51\u8d37\u5e73\u53f0\u80cc\u666f\n\n\nbackground = df.groupby(\nclassification\n)[\nbackground\n].value_counts().unstack().unstack().unstack().fillna(0)\n# [0,1,2,3],[u'\u79c1\u8425\n\u6c11\u8425\u7cfb',u'\u4e0a\u5e02\u516c\u53f8\u7cfb',u'\u94f6\u884c\u7cfb',u'\u56fd\u8d44\u7cfb']\nbackground[\ntotal\n] = background.sum(axis=1)\nbackground_cum = background.div(background[\ntotal\n], axis=0)*100\nbackground_cum.drop(\ntotal\n, axis=1, inplace=True)\nbackground.drop(\ntotal\n, axis=1, inplace=True)\nfig1, (ax1, ax2) = plt.subplots(2,1, sharex=True, figsize=(12,9)) \nbackground_cum.plot(kind='bar',ax=ax1, stacked=True, label=\n)\nbackground.plot(kind='bar',ax=ax2, stacked=True)\nax1.legend(loc=9, prop=font, fontsize=17)\nax2.legend(loc='best', prop=font, fontsize=17)\nax2.xaxis.grid(False)\nax2.yaxis.grid(True, linestyle=\n-.\n)\nax1.yaxis.grid(True, linestyle=\n-.\n)\nax2.set_ylabel(u\n\u6570\u91cf\n, fontsize=16, fontproperties=font)\nax1.set_ylabel(u\n\u767e\u5206\u6bd4%\n, fontsize=16, fontproperties=font)\nax2.set_xticklabels([u'\u79c1\u8425\n\u6c11\u8425\u7cfb',u'\u4e0a\u5e02\u516c\u53f8\u7cfb',u'\u94f6\u884c\u7cfb',u'\u56fd\u8d44\u7cfb'], rotation=30, fontproperties=font)\nax2.annotate(u'\u63d0\u73b0\u56f0\u96be1\u5bb6',xy=(3,150),xytext=(2.5,300),fontproperties=font,arrowprops=dict(arrowstyle=\n-\n,color='green',linewidth=3)) \nplt.xlabel(u\n\u5e73\u53f0\u8d44\u8d28\n, fontproperties=font, fontsize=17)\n\n\n\n\nmatplotlib.text.Text at 0x7f14b5933510\n\n\n\n\n\n\np2p\u5e73\u53f0\u8d44\u8d28\uff08\u5e73\u53f0\u80cc\u666f\uff09\u5212\u5206\u4e3a\u6c11\u8425\n\u79c1\u8425\u7cfb\u3001\u4e0a\u5e02\u516c\u53f8\u7cfb\u3001\u94f6\u884c\u7cfb\u3001\u56fd\u8d44\u7cfb\uff0c\u5176\u4e2d\u6c11\u8425\u7cfb\u7f51\u8d37\u8dd1\u8def\u6bd4\u4f8b\u6700\u9ad8\uff0c\u56fd\u8d44\u7cfb\u6709\u63d0\u73b0\u56f0\u96be1\u5bb6\uff0c\u4e0a\u5e02\u516c\u53f8\u548c\u94f6\u884c\u7cfb\u65e0\u8dd1\u8def\u3002\n\n\n\u6295\u8d44\u671f\u9650\n\n\ndf.loc[:, \ntouziq\n] = df[\ntouziq\n].map(lambda x: np.round(x, 4))\ndf_span = df.loc[df[\ntouziq\n] != 2.5784, :]  # (1524, 12)\ndf_span.loc[:, \ntouziq\n] = df_span[\ntouziq\n].map(lambda x: np.round(x))\ndf_span.loc[df_span[\ntouziq\n] == 0, \ntouziq\n] = 0.5\ndf_span.loc[:, \ntouziq\n] = df_span['touziq'].astype(np.int64)\n\n\n\n\nplt.figure(figsize=(10,6))\ng = sns.barplot(x=\ntouziq\n, y=\naverageI\n, data=df_span, hue=\nclassification\n)\nplt.xticks(g.get_xticks(), fontproperties=font, fontsize=16)\nplt.ylabel(u\n\u5e73\u5747\u5e74\u5316\u5229\u7387%\n, fontsize=16, fontproperties=font)\nplt.xlabel(u\n\u6295\u8d44\u671f\u9650(\u6708)\n, fontsize=16, fontproperties=font)\nplt.title(u\np2p\u5e73\u53f0\u5e73\u5747\u5e74\u5316\u5229\u7387\u4e0e\u6295\u8d44\u671f\u9650\n, fontproperties=font, fontsize=20)\nplt.gca().yaxis.grid(True, linestyle = \n-.\n,)\nplt.legend(loc=\nbest\n,prop=font, fontsize=17)\n\n\n\n\nmatplotlib.legend.Legend at 0x7f14b2acf0d0\n\n\n\n\n\n\nspan = df_span.groupby(\nclassification\n)[\ntouziq\n].value_counts().unstack().unstack().unstack().fillna(0)\nspan[\ntotal\n] = span.sum(axis=1)\nspan_cum = span.div(span[\ntotal\n], axis=0)*100\nspan_cum.drop(\ntotal\n, axis=1, inplace=True)\nspan.drop(\ntotal\n, axis=1, inplace=True)\nfig1, (ax1, ax2) = plt.subplots(2,1, sharex=True, figsize=(12,9)) \nspan_cum.plot(kind='bar',ax=ax1, stacked=True, label=\n)\nspan.plot(kind='bar',ax=ax2, stacked=True)\nax1.legend(loc=2, prop=font, fontsize=17)\nax2.legend(loc='best', prop=font, fontsize=17)\nax2.xaxis.grid(False)\nax2.yaxis.grid(True, linestyle=\n-.\n)\nax1.yaxis.grid(True, linestyle=\n-.\n)\nax2.set_ylabel(u\n\u6570\u91cf\n, fontsize=16, fontproperties=font)\nax1.set_ylabel(u\n\u767e\u5206\u6bd4%\n, fontsize=16, fontproperties=font) \nax2.annotate(u'\u5c0f\u4e8e1\u4e2a\u6708',xy=(0,30),xytext=(0,100),fontproperties=font,arrowprops=dict(arrowstyle=\n-\n,color='k',linewidth=3)) \nplt.xlabel(u\n\u6295\u8d44\u671f\u9650(\u6708)\n, fontproperties=font, fontsize=17)\n\n\n\n\nmatplotlib.text.Text at 0x7f14b0e47550\n\n\n\n\n\n\np2p\u7f51\u8d37\u7684\u6295\u8d44\u671f\u9650\u53d8\u5316\u8303\u56f4\u5f88\u5bbd\u6cdb\uff0c\u5c11\u7684\u77ed\u5219\u51e0\u5929\uff0c\u591a\u7684\u957f\u8fbe\u51e0\u5e74\u3002\u4e3a\u4e86\u65b9\u4fbf\uff0c\u5c06\u79d2\u6807\u3001\u5929\u6807\u7b49\u5c0f\u4e8e1\u4e2a\u6708\u7684\u7f51\u8d37\u5e73\u53f0\u8bb0\u4e3a\u5c0f\u4e8e1\u4e2a\u6708(0)\uff0c\u5c06\u5927\u4e8e\u7b49\u4e8e24\u4e2a\u6708\u7684\u5e73\u53f0\u8bb0\u4e3a24\u4e2a\u6708\u3002\u5927\u90e8\u5206\u7f51\u8d37\u5e73\u53f0\u7684\u6295\u8d44\u671f\u9650\u5c0f\u4e8e\u534a\u5e74\uff0c\u5c24\u5176\u96c6\u4e2d\u57281\u6708\u30012\u6708\u30013\u6708\u6807\u53ca\u5929\u6807\u4e0a\u3002\u800c\u8dd1\u8def\u7684\u7f51\u8d37\u5e73\u53f0\u4e5f\u591a\u96c6\u4e2d\u5728\u77ed\u671f\u6295\u8d44\u4e0a\u3002\u4e00\u5e74\u4ee5\u4e0a\u7684\u6295\u8d44\u671f\u9650\u7684\u5e73\u53f0\u6ca1\u6709\u8dd1\u8def\u73b0\u8c61\u3002\u56e0\u6b64\uff0c\u5728\u9009\u62e9p2p\u5e73\u53f0\u65f6\uff0c\u8981\u9009\u62e9\u6295\u8d44\u671f\u9650\u957f\u7684\u4e3a\u5b9c\u3002\n\n\np2p\u8dd1\u8def\u539f\u56e0\u5206\u6790\u53ca\u9884\u6d4b\n\n\n\u901a\u8fc7\u524d\u9762\u7684\u7b80\u5355\u7684\u63a2\u7d22\u5206\u6790\u6211\u4eec\u5bf9p2p\u7f51\u8d37\u5e73\u53f0\u7684\u51e0\u4e2a\u6837\u672c\u7279\u5f81\u4e0e\u5e73\u53f0\u8dd1\u8def\u7684\u5173\u7cfb\u6709\u4e86\u4e00\u5b9a\u8ba4\u8bc6\uff0c\u4e0b\u9762\u5c1d\u8bd5\u5229\u7528\u673a\u5668\u5b66\u4e60\u7684\u51b3\u7b56\u6811\u5206\u7c7b\u7b97\u6cd5\u6765\u5206\u6790\u548c\u9884\u6d4bp2p\u7f51\u8d37\u5e73\u53f0\u7684\u8dd1\u8def\u73b0\u8c61\u3002\n\n\n\u6837\u672c\u7279\u5f81\u9009\u62e9\n\n\n\u91c7\u7528\u76f8\u5173\u7cfb\u6570\u77e9\u9635\u548c\u9012\u5f52\u7279\u5f81\u6d88\u9664\u6cd5(RFE)\u8bc4\u4f30\u7279\u5f81\u6307\u6807\u7684\u91cd\u8981\u6027\uff0c\u8fdb\u800c\u9009\u62e9\u5408\u9002\u7684\u6837\u54c1\u7279\u5f81\u8fdb\u884c\u5206\u7c7b\u6a21\u578b\u8bad\u7ec3\u3002\n\n\n# \u6682\u4e14\u4e0d\u8003\u8651p2p\u7f51\u8d37\u5e73\u53f0\u540d\u79f0\u548c\u6210\u7acb\u65e5\u671f\ndata = dall.drop([\nname\n, \ndate\n,], axis=1)  \ncols = data.columns.tolist()\ndata.head(3)\n\n\n\n\n\n\n\n  \n\n    \n\n      \n\n      \naverageI\n\n      \nzhuzed\n\n      \nclassification\n\n      \ntouziq\n\n      \nnetF\n\n      \nbackground\n\n      \ntuoguan\n\n      \nzhuz\n\n      \nshiz\n\n      \ndatetime\n\n    \n\n  \n\n  \n\n    \n\n      \n0\n\n      \n14.548392\n\n      \n44.0\n\n      \n0.0\n\n      \n2.578413\n\n      \n14.351883\n\n      \n0\n\n      \n0\n\n      \n500\n\n      \n0\n\n      \n5.326389e+07\n\n    \n\n    \n\n      \n1\n\n      \n14.548392\n\n      \n11.0\n\n      \n0.0\n\n      \n2.578413\n\n      \n14.351883\n\n      \n0\n\n      \n0\n\n      \n2000\n\n      \n0\n\n      \n3.054069e+07\n\n    \n\n    \n\n      \n2\n\n      \n12.460000\n\n      \n33.0\n\n      \n1.0\n\n      \n1.172000\n\n      \n16.500000\n\n      \n0\n\n      \n1\n\n      \n3000\n\n      \n2000\n\n      \n1.331839e+08\n\n    \n\n  \n\n\n\n\n\n\n\n# corrcoef\u51fd\u6570\u8ba1\u7b97\u76f8\u5173\u7cfb\u6570,\u66f4\u7cbe\u786e\u5730\u662f\u76f8\u5173\u7cfb\u6570\u77e9\u9635\ncm = np.corrcoef(data[cols].values.T)\nplt.figure(figsize=(10,8))\ng = sns.heatmap(cm, cbar=True, annot=True, \n            square=True, fmt=\n.2f\n, \n            annot_kws={'size': 15}, \n           yticklabels=cols,xticklabels=cols)\nplt.yticks(g.get_yticks(), fontproperties=font, fontsize=16)\nplt.xticks(g.get_xticks(), fontproperties=font, fontsize=16)\n\n\n\n\n([\nmatplotlib.axis.XTick at 0x7f4cbaab8c50\n,\n  \nmatplotlib.axis.XTick at 0x7f4cbab0e050\n,\n  \nmatplotlib.axis.XTick at 0x7f4cba9db890\n,\n  \nmatplotlib.axis.XTick at 0x7f4cba9dbdd0\n,\n  \nmatplotlib.axis.XTick at 0x7f4cba9e3310\n,\n  \nmatplotlib.axis.XTick at 0x7f4cba9e39d0\n,\n  \nmatplotlib.axis.XTick at 0x7f4cba9ec110\n,\n  \nmatplotlib.axis.XTick at 0x7f4cba9ec810\n,\n  \nmatplotlib.axis.XTick at 0x7f4cba9ecc90\n,\n  \nmatplotlib.axis.XTick at 0x7f4cba9f93d0\n],\n \na list of 10 Text xticklabel objects\n)\n\n\n\n\n\n\u4ece\u76f8\u5173\u7cfb\u6570\u77e9\u9635\uff0c\u6295\u8d44\u671f\u9650\u548c\u5e73\u5747\u5229\u7387\u4e0e\u5206\u7c7b\u6807\u7b7e\uff08\u662f\u5426\u8dd1\u8def\uff09\u6709\u8f83\u5f3a\u7684\u7ebf\u6027\u76f8\u5173\u6027\uff0c\u6ce8\u518c\u8d44\u672c\u7ebf\u6027\u76f8\u5173\u6027\u6700\u4f4e\uff0c\u5176\u4ed6\u7684\u7279\u5f81\u6709\u4e00\u5b9a\u7684\u7ebf\u6027\u76f8\u5173\u6027\uff0c\u4f46\u5f3a\u5ea6\u8f83\u5f31\u3002\n\n\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.feature_selection import RFE\nfrom sklearn.linear_model import RandomizedLasso\nfrom sklearn.linear_model import RandomizedLogisticRegression\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.preprocessing import StandardScaler \nfrom sklearn.metrics import accuracy_score\nfrom sklearn.model_selection import learning_curve\nfrom sklearn.metrics import classification_report\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.model_selection import GridSearchCV\n\n\n\n\ny = data.pop(\nclassification\n)\nX = data\nfeatures = X.columns.values\n\n\n\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=0)\nsc = StandardScaler()\nsc.fit(X_train)  # \u8ba1\u7b97\u5747\u503c\u548c\u65b9\u5dee\nX_train_std = sc.transform(X_train)  # \u8fdb\u884c\u6807\u51c6\u53d8\u6362\uff0c\u53d8\u6210\u6807\u51c6\u6b63\u6001\u5206\u5e03\nX_test_std = sc.transform(X_test)\n\n\n\n\n\n\u9012\u5f52\u6d88\u9664\u7279\u5f81\u6cd5\u4f7f\u7528\u4e00\u4e2a\u57fa\u6a21\u578b\u6765\u8fdb\u884c\u591a\u8f6e\u8bad\u7ec3\uff0c\u6bcf\u8f6e\u8bad\u7ec3\u540e\uff0c\u9009\u51fa\u6700\u597d\u7684\u7684\u7279\u5f81\uff0c\n\u7136\u540e\u5728\u5269\u4f59\u7684\u7279\u5f81\u4e0a\u91cd\u590d\u8fd9\u4e2a\u8fc7\u7a0b\u3002\u6574\u4e2a\u8fc7\u7a0b\u4e2d\u7279\u5f81\u88ab\u6d88\u9664\u7684\u6b21\u5e8f\u5c31\u662f\u7279\u5f81\u7684\u6392\u5e8f\u3002\nRFE\u7684\u7a33\u5b9a\u6027\u5f88\u5927\u7a0b\u5ea6\u4e0a\u53d6\u51b3\u4e8e\u5728\u8fed\u4ee3\u7684\u65f6\u5019\u5e95\u5c42\u7528\u54ea\u79cd\u6a21\u578b\u3002\u53c2\u6570estimator\u4e3a\u57fa\u6a21\u578b\uff0c\n\u53c2\u6570n_features_to_select\u4e3a\u9009\u62e9\u7684\u7279\u5f81\u4e2a\u6570\u3002\n\n \nestimator = LogisticRegression()\nselector = RFE(estimator, n_features_to_select=1, step=1)  \nselector = selector.fit(X_train_std, y_train) \nbag = sorted(zip(features, selector.ranking_, selector.support_),\n             key=lambda x: x[1])\nbag\n\n\n\n\n[('background', 1, True),\n ('tuoguan', 2, False),\n ('shiz', 3, False),\n ('averageI', 4, False),\n ('netF', 5, False),\n ('zhuz', 6, False),\n ('touziq', 7, False),\n ('zhuzed', 8, False),\n ('datetime', 9, False)]\n\n\n\n\n\u7a33\u5b9a\u6027\u9009\u62e9\u662f\u4e00\u79cd\u57fa\u4e8e\u4e8c\u6b21\u62bd\u6837\u548c\u9009\u62e9\u7b97\u6cd5\u76f8\u7ed3\u5408\u7684\u65b9\u6cd5\uff0c\u9009\u62e9\u7b97\u6cd5\u53ef\u4ee5\u662f\u56de\u5f52\u3001SVM\u6216\u5176\u4ed6\n\u7c7b\u4f3c\u7684\u65b9\u6cd5\u3002\u5b83\u7684\u4e3b\u8981\u601d\u60f3\u662f\u5728\u4e0d\u540c\u7684\u6570\u636e\u5b50\u96c6\u548c\u7279\u5f81\u5b50\u96c6\u4e0a\u8fd0\u884c\u7279\u5f81\u9009\u62e9\u7b97\u6cd5\uff0c\u4e0d\u65ad\u7684\u91cd\u590d\uff0c\n\u6700\u7ec8\u6c47\u603b\u7279\u5f81\u9009\u62e9\u7ed3\u679c\uff0c\u6bd4\u5982\u53ef\u4ee5\u7edf\u8ba1\u67d0\u4e2a\u7279\u5f81\u88ab\u8ba4\u4e3a\u662f\u91cd\u8981\u7279\u5f81\u7684\u9891\u7387\uff08\u88ab\u9009\u4e3a\u91cd\u8981\u7279\u5f81\u7684\n\u6b21\u6570\u9664\u4ee5\u5b83\u6240\u5728\u7684\u5b50\u96c6\u88ab\u6d4b\u8bd5\u7684\u6b21\u6570\uff09\u3002\u7406\u60f3\u60c5\u51b5\u4e0b\uff0c\u91cd\u8981\u7279\u5f81\u7684\u5f97\u5206\u4f1a\u63a5\u8fd1100%\u3002\u7a0d\u5fae\u5f31\u4e00\u70b9\n\u7684\u7279\u5f81\u5f97\u5206\u4f1a\u662f\u975e0\u7684\u6570\uff0c\u800c\u6700\u65e0\u7528\u7684\u7279\u5f81\u5f97\u5206\u5c06\u4f1a\u63a5\u8fd1\u4e8e0\u3002\nsklearn\u63d0\u4f9b\u4e86\u968f\u673alasso\u548c\u968f\u673a\u903b\u8f91\u56de\u5f52\u3002\n\n\nrlg = RandomizedLogisticRegression()\nrlg.fit(X_train, y_train)\nbag_rr = sorted(zip(features, rlg.scores_), key=lambda x: x[1], reverse=True)\nbag_rr\n\n\n\n\n[('averageI', 1.0),\n ('netF', 1.0),\n ('background', 1.0),\n ('tuoguan', 1.0),\n ('touziq', 0.56000000000000005),\n ('zhuzed', 0.53500000000000003),\n ('shiz', 0.40000000000000002),\n ('datetime', 0.23000000000000001),\n ('zhuz', 0.0)]\n\n\n\n\u7efc\u5408\u76f8\u5173\u7cfb\u6570\u77e9\u9635\u3001\u9012\u5f52\u6d88\u9664\u7279\u5f81\u6cd5\u3001\u7a33\u5b9a\u6027\u9009\u62e9\u7684\u8bc4\u4f30\u7ed3\u679c\uff0c\u5e73\u5747\u5229\u7387\u3001\u7f51\u53cb\u8bc4\u5206\u3001\u5e73\u53f0\u80cc\u666f\u3001\u6709\u65e0\u6258\u7ba1\u56db\u4e2a\u7279\u5f81\u4e0ep2p\u7f51\u8d37\u5e73\u53f0\u7684\u662f\u5426\u8dd1\u8def\u7ebf\u6027\u76f8\u5173\u6027\u8f83\u5927\uff0c\u6211\u4eec\u5148\u91c7\u7528\u8fd9\u56db\u4e2a\u7279\u5f81\u8fdb\u884c\u5206\u7c7b\u6a21\u578b\u6784\u5efa\u3002\n\n\n\u5206\u7c7b\u6a21\u578b\u6784\u5efa\n\n\n# \u7528sklearn\u7684learning_curve\u5f97\u5230training_score\u548ccv_score\uff0c\u4f7f\u7528matplotlib\u753b\u51falearning curve\ndef plot_learning_curve(estimator, title, X, y, ylim=None, cv=5, n_jobs=1, \n                        train_sizes=np.linspace(.05, 1., 20), \n                        verbose=0, plot=True, text_=None):\n    \n\n    \u753b\u51fadata\u5728\u67d0\u6a21\u578b\u4e0a\u7684learning curve.\n    \u53c2\u6570\u89e3\u91ca\n    ----------\n    estimator : \u4f7f\u7528\u7684\u5206\u7c7b\u5668\u3002\n    title : \u56fe\u7684\u6807\u9898\u3002\n    X : \u8f93\u5165\u7684feature\uff0cnumpy\u7c7b\u578b\n    y : \u8f93\u5165\u7684target vector\n    ylim : tuple\u683c\u5f0f\u7684(ymin, ymax), \u8bbe\u5b9a\u56fe\u50cf\u4e2d\u7eb5\u5750\u6807\u7684\u6700\u4f4e\u70b9\u548c\u6700\u9ad8\u70b9\n    cv : \u505across-validation\u7684\u65f6\u5019\uff0c\u6570\u636e\u5206\u6210\u7684\u4efd\u6570\uff0c\u5176\u4e2d\u4e00\u4efd\u4f5c\u4e3acv\u96c6\uff0c\u5176\u4f59n-1\u4efd\u4f5c\u4e3atraining(\u9ed8\u8ba4\u4e3a3\u4efd)\n    n_jobs : \u5e76\u884c\u7684\u7684\u4efb\u52a1\u6570(\u9ed8\u8ba41)\n    \n\n    train_sizes, train_scores, test_scores = learning_curve(\n        estimator, X, y, cv=cv, n_jobs=n_jobs, train_sizes=train_sizes, verbose=verbose)\n    train_scores_mean = np.mean(train_scores, axis=1)  # train_scores\u662f\u4e00\u4e2a\uff12\uff10\u884c\uff15\u5217\u7684ndarry,20\u4e3a\u4ece\u6837\u672c\u53d6\u7684\u4e0d\u540c\u6bd4\u4f8b\u7684\u6837\u672c\u6570\u636e\u4f5c\u4e3aX, \u800c\uff15\u8868\u793a\uff15\u6b21\u4ea4\u53c9\u9a8c\u8bc1\n    train_scores_std = np.std(train_scores, axis=1)\n    test_scores_mean = np.mean(test_scores, axis=1)\n    test_scores_std = np.std(test_scores, axis=1)\n\n    if plot:\n        plt.figure(figsize=(7,7))\n        plt.title(title)\n        if ylim is not None:\n            plt.ylim(*ylim)\n        plt.xlabel(\nsamples\n)\n        plt.ylabel(\nscores\n)\n        # plt.gca().invert_yaxis() \u4f8b\u5982y\u8f74\u5750\u68073000-10000\uff0c\u8c03\u6574\u4e3a10000-3000\u6765\u663e\u793a\n        plt.fill_between(train_sizes, train_scores_mean - train_scores_std, train_scores_mean + train_scores_std, \n                         alpha=0.2, color=\nb\n)\n        plt.fill_between(train_sizes, test_scores_mean - test_scores_std, test_scores_mean + test_scores_std, \n                         alpha=0.2, color=\nr\n)\n        plt.plot(train_sizes, train_scores_mean, '^-', color=\nblue\n, label=\ntrain score\n)\n        plt.plot(train_sizes, test_scores_mean, 'v-', color=\nred\n, label=\ncross_validation score\n)\n        plt.legend(loc=\nbest\n)\n        plt.gca().yaxis.grid(True, linestyle = \n-.\n)\n        plt.gca().xaxis.grid(True, linestyle = \n-.\n)   \n        plt.text(500, 0.754, text_, size = 12, color = \nk\n, weight = \nlight\n, bbox = dict(facecolor = \npurple\n, alpha = 0.3))   \n        # plt.text(60, .025, r'$\\mu=100,\\ \\sigma=15$')\n        plt.show()        \n\n\n\n\nLogisticReregession \u5206\u7c7b\u6a21\u578b\u6784\u5efa\n\n\ndef evaluate_feature(df, feature_add, C_):\n    \n\u8bc4\u4f30\u589e\u52a0\u65b0\u7684\u7279\u5f81\u7684\u5206\u7c7b\u51c6\u786e\u7387\n\n    raw_feature = ['averageI','classification','netF',\n                   'background','tuoguan']\n    raw_feature.extend(feature_add) if type(feature_add) == list else raw_feature.append(feature_add)\n    data = df[raw_feature]\n    y = data.pop(\nclassification\n)\n    X = data\n    for i in X.columns.tolist():\n        if i in [\nbackground\n, \ntuoguan\n, \nzhuzed\n]:\n            dummies_ = pd.get_dummies(X[i], prefix=i)\n            X_dummies = pd.concat([X, dummies_], axis=1)\n            X_dummies.drop([i], axis=1, inplace=True)\n\n    if \ntouziq\n in X_dummies.columns.tolist():\n            X_dummies[\ntouziq\n] = X_dummies[\ntouziq\n].astype(np.int)\n    X_train, X_test, y_train, y_test = train_test_split(X_dummies, y, test_size=0.2, random_state=0)\n    lr = LogisticRegression(C=C_, penalty=\nl2\n, random_state=0, tol=1e-6)\n    lr.fit(X_train, y_train)\n    y_pred = lr.predict(X_test)\n    num_test = len(y_test)\n    result = (num_test - (y_test != y_pred).sum()) / float(num_test) * 100\n    feature_str = \nadd feature:\n + \n,\n.join(feature_add) if feature_add else \n    \n    content = \n{2} accuracy_score:{0} C:{1}\n.format(np.round(result, 4), C_, feature_str)\n    plot_learning_curve(lr, \nlearning curve\n, X_train, y_train, text_=content)    \n\n\n\n\nfor i in [None, \ntouziq\n, \nzhuzed\n]:\n    add_feature = []\n    if i is not None:\n        add_feature.append(i)\n    evaluate_feature(dall, add_feature, 0.5)    \n\n\n\n\n\n\n\n\n\n\nfor C in [0.01, 0.05, 0.1, 0.5, 1]:\n    evaluate_feature(dall, [\ntouziq\n, \nzhuzed\n], C)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\u5f53\u9009\u62e9\u5e73\u5747\u5e74\u5316\u5229\u7387\u3001\u7f51\u53cb\u8bc4\u5206\u3001\u8d44\u91d1\u6258\u7ba1\u3001\u5e73\u53f0\u8d44\u8d28\u56db\u4e2a\u7279\u5f81\uff0c\u6b63\u5219\u5316\u7cfb\u6570\u4e3a0.5\u5019\uff0cLogisticRegression\u7684\u5206\u7c7b\u51c6\u786e\u7387\u4e3a76.5%\uff0c\u5f53\u589e\u52a0\u6295\u8d44\u671f\u9650\u7684\u5206\u7c7b\u7279\u5f81\u65f6\u5019\uff0c\u51c6\u786e\u7387\u7565\u6709\u63d0\u9ad8\u8fbe\u523077.1%\uff0c\u5f53\u589e\u52a0\u6ce8\u518c\u5730\u7684\u5206\u7c7b\u7279\u5f81\u65f6\u5019\uff0c\u51c6\u786e\u7387\u53cd\u800c\u964d\u4f4e\uff0c\u8fd9\u53ef\u80fd\u4e0e\u5904\u7406\u6ce8\u518c\u5730\u7684\u54d1\u53d8\u91cf\u6ca1\u6709\u8fdb\u4e00\u6b65\u8fdb\u884c\u6570\u91cf\u4e0a\u7684\u9650\u5236\u6709\u5173\u3002\u5728\u6b64\uff0c\u5148\u9009\u53d6\u5e73\u5747\u5e74\u5316\u5229\u7387\u3001\u7f51\u53cb\u8bc4\u5206\u3001\u8d44\u91d1\u6258\u7ba1\u3001\u5e73\u53f0\u8d44\u8d28\u3001\u6ce8\u518c\u5730\u4e3a\u5206\u7c7b\u7279\u5f81\u3002\n\n\n\u968f\u673a\u68ee\u6797\u5206\u7c7b\u6a21\u578b\u6784\u5efa\n\n\ndall.head(2)\n\n\n\n\n\n\n\n  \n\n    \n\n      \n\n      \nname\n\n      \naverageI\n\n      \ndate\n\n      \nzhuzed\n\n      \nclassification\n\n      \ntouziq\n\n      \nnetF\n\n      \nbackground\n\n      \ntuoguan\n\n      \nzhuz\n\n      \nshiz\n\n      \ndatetime\n\n    \n\n  \n\n  \n\n    \n\n      \n0\n\n      \n108\u8d37\n\n      \n14.548392\n\n      \n2015-02-26\n\n      \n44.0\n\n      \n0.0\n\n      \n2.578413\n\n      \n14.351883\n\n      \n0\n\n      \n0\n\n      \n500\n\n      \n0\n\n      \n5.326389e+07\n\n    \n\n    \n\n      \n1\n\n      \n2025\u91d1\u878d\n\n      \n14.548392\n\n      \n2015-11-16\n\n      \n11.0\n\n      \n0.0\n\n      \n2.578413\n\n      \n14.351883\n\n      \n0\n\n      \n0\n\n      \n2000\n\n      \n0\n\n      \n3.054069e+07\n\n    \n\n  \n\n\n\n\n\n\n\ndef randomforest_classifier(df):   \n    feature = ['averageI','classification','netF',\n                   'background','tuoguan','touziq']\n    data = df[feature]\n    y = data.pop(\nclassification\n)\n    X = data\n    for i in X.columns.tolist():\n        if i in [\nbackground\n, \ntuoguan\n, \nzhuzed\n]:\n            dummies_ = pd.get_dummies(X[i], prefix=i)\n            X_dummies = pd.concat([X, dummies_], axis=1)\n            X_dummies.drop([i], axis=1, inplace=True)\n\n    if \ntouziq\n in X_dummies.columns.tolist():\n            X_dummies[\ntouziq\n] = X_dummies[\ntouziq\n].astype(np.int)\n    X_train, X_test, y_train, y_test = train_test_split(X_dummies, y, test_size=0.2, random_state=0)\n\n    pipeline = Pipeline([('clf', RandomForestClassifier(criterion='gini'))])\n    parameters = {\n                  'clf__n_estimators': (40, 80),\n                  'clf__max_depth': (15, 20, 30),\n                  'clf__min_samples_split': (10,20,50),\n                  'clf__min_samples_leaf': (2,5,15),\n                  'clf__max_features': (2,5)\n                  }\n    grid_search = GridSearchCV(pipeline, parameters, n_jobs=2, verbose=1, scoring='accuracy')\n    grid_search.fit(X_train, y_train)\n    accuracy_score = \nbest_accuray_score: {}\n.format(grid_search.best_score_) \n    best_parameters = grid_search.best_estimator_.get_params()\n    parameters = sorted(parameters.keys())\n    #print \n\\t%s: %r\n % (param_name, best_parameters[param_name])\n    predictions = grid_search.predict(X_test)\n    print '\\t%s\\t%s\\t%s\\t%s' % ('\u5206\u7c7b','\u7cbe\u786e\u7387','\u53ec\u56de\u7387','f1-score')\n    evaluate_result = classification_report(y_test, predictions)\n    #print '0 \uff1ap2p\u5e73\u53f0\u8dd1\u8def(\u6216\u51fa\u73b0\u5176\u4ed6\u975e\u6b63\u5e38\u8fd0\u8425\u7684\u95ee\u9898)' \n    #print '1 \uff1a\u6b63\u5e38\u8fd0\u8425' \n    return accuracy_score, best_parameters, evaluate_result    \n\n\n\n\naccuracy_score, best_params, evaluate_result = randomforest_classifier(dall)\n\n\n\n\naccuracy_score\n\n\n\n\n'best_accuray_score: 0.825738125802'\n\n\n\nbest_params\n\n\n{'clf': RandomForestClassifier(bootstrap=True, class_weight=None, criterion='gini',\n             max_depth=30, max_features=5, max_leaf_nodes=None,\n             min_impurity_split=1e-07, min_samples_leaf=2,\n             min_samples_split=50, min_weight_fraction_leaf=0.0,\n             n_estimators=80, n_jobs=1, oob_score=False, random_state=None,\n             verbose=0, warm_start=False),\n\n\n\n\n\n\n# \u4f7f\u7528gridsearch\u7684\u6700\u4f73\u53c2\u6570\u8fdb\u884crandomforestclssification,\u5206\u6790learning curve\nfeature = ['averageI','classification','netF','background','tuoguan','touziq']\ndata = dall[feature]\ny = data.pop(\nclassification\n)\nX = data\nfor i in X.columns.tolist():\n    if i in [\nbackground\n, \ntuoguan\n, \nzhuzed\n]:\n        dummies_ = pd.get_dummies(X[i], prefix=i)\n        X_dummies = pd.concat([X, dummies_], axis=1)\n        X_dummies.drop([i], axis=1, inplace=True)\n\nif \ntouziq\n in X_dummies.columns.tolist():\n        X_dummies[\ntouziq\n] = X_dummies[\ntouziq\n].astype(np.int)\nX_train, X_test, y_train, y_test = train_test_split(X_dummies, y, test_size=0.2, random_state=0)\nrsl = RandomForestClassifier(n_estimators=80, criterion='gini', max_depth=30, min_samples_split=50, min_samples_leaf=2,\n                             max_features=5)  \nrsl.fit(X_train, y_train)\ny_pred = rsl.predict(X_test)\nnum_test = len(y_test)\nresult = (num_test - (y_test != y_pred).sum()) / float(num_test) * 100\nplot_learning_curve(rsl, \nlearning curve\n, X_train, y_train, text_=result)        \nresult\n\n\n\n\n\n\n80.616174582798465\n\n\n\nRandomForestClassifier\u7684\u8bad\u7ec3\u96c6\u7684\u6700\u9ad8\u5206\u7c7b\u51c6\u786e\u7387\u4e3a82.5%\uff0c\u4f46\u4ecelearning curve\u80fd\u770b\u51fa\u5b58\u5728\u7740\u660e\u663e\u7684\u8fc7\u62df\u5408\u73b0\u8c61\uff0c\u6545\u6d4b\u8bd5\u96c6\u7684\u51c6\u786e\u7387\u53ea\u670980.6%\uff0c\u7565\u9ad8\u4e8eLogisticRegression\u7684\u5206\u7c7b\u6548\u679c\u3002\n\n\n\u603b\u7ed3\n\n\n\u901a\u8fc7LogistciRegression\u548cRandomForestClassifier\u5efa\u7acb\u7684\u5206\u7c7b\u6a21\u578b\u7684\u5206\u7c7b\u6548\u679c\u5747\u8f83\u5dee\u3002\u9020\u6210\u4ee5\u4e0a\u539f\u56e0\u8ddf\u6570\u636e\u6e90\u6709\u4e00\u5b9a\u5173\u7cfb\u3002\u6709\u5173p2p\u7f51\u8d37\u5e73\u53f0\u7684\u8bc4\u4f30\u6307\u6807\u6709\u5f88\u591a\uff0c\u672c\u62a5\u544a\u53ea\u9009\u62e9\u4e865\u4e2a\u7279\u5f81\u7ed9\u673a\u5668\u7b97\u6cd5\u5b66\u4e60\u548c\u8bad\u7ec3\uff0c\u5176\u4ed6\u6307\u6807\u5982\u7f51\u8d37\u5e73\u53f0\u7684\u5de5\u5546\u6ce8\u518c\u4fe1\u606f\u3001\u7f51\u7ad9ICP\u3001\u878d\u8d44\u53ca\u98ce\u6295\u4fe1\u606f\u7b49\u6682\u6ca1\u8003\u8651\u3002\u6b64\u5916\uff0c\u7531\u4e8e\u6570\u636e\u7684\u7f3a\u5931\u503c\u8f83\u591a\uff0c\u6bd4\u5982\u5e73\u5747\u5229\u7387\u8fd9\u4e00\u4e2a\u6307\u6807\uff0c\u5728\u5206\u6790\u76843895\u5bb6p2p\u5e73\u53f0\u4e2d\u67091695\u5bb6\u65e0\u6b64\u9879\u6570\u636e\uff0c\u8fd9\u4e9b\u90fd\u4f1a\u5f71\u54cd\u5230\u5206\u7c7b\u6a21\u578b\u7684\u5206\u7c7b\u53ca\u9884\u6d4b\u6548\u679c\u3002\n\n\np2p\u5e73\u53f0\u8dd1\u8def\u539f\u56e0\u53ef\u7b80\u5355\u5730\u5206\u4e3a\u8bc8\u9a97\u7c7b\u548c\u7ecf\u8425\u4e0d\u5584\u7c7b\u3002\u5e9e\u6c0f\u9a97\u5c40\u3001\u6076\u610f\u81ea\u878d\u7b49\u5c5e\u4e8e\u8bc8\u9a97\u7c7b\u3002\u7531\u4e8e\u7f51\u8d37\u5e73\u53f0\u7ecf\u8425\u8fc7\u7a0b\u7684\u6210\u672c\u504f\u9ad8\uff0c\u98ce\u63a7\u4e0d\u8fc7\u5173\u800c\u5bfc\u81f4\u7684\u7ecf\u8425\u4e0d\u5584\uff0c\u5f15\u8d77\u8fd0\u8425\u5e73\u53f0\u8d44\u91d1\u94fe\u65ad\u88c2\uff0c\u6700\u7ec8\u5173\u95e8\u8dd1\u8def\u3002\u4e00\u822c\u800c\u8a00\uff0c\u8dd1\u8def\u5e73\u53f0\u6709\u4e00\u4e9b\u7279\u70b9\uff0c\u5982\u8d44\u4ea7\u9879\u76ee\u4fe1\u606f\u62ab\u9732\u4e0d\u660e\uff0c\u98ce\u63a7\u4e0d\u8fbe\u6807\u6216\u6839\u672c\u65e0\u98ce\u63a7\u4e00\u73af\uff0c\u79d2\u6807\u3001\u5929\u6807\u3001\u9ad8\u606f\u6807\u6bd4\u4f8b\u9ad8\uff0c\u6295\u8d44\u8005\u7528\u6237\u4f53\u9a8c\u5ea6\u5dee\u7b49\u3002\n\n\n\u672c\u6587\u9996\u5148\u5bf9p2p\u7f51\u8d37\u5e73\u53f0\u7684\u7279\u5f81\u4e0e\u662f\u5426\u8dd1\u8def\u7684\u5173\u7cfb\u8fdb\u884c\u5b9a\u6027\u5206\u6790\uff0c\u968f\u540e\u5c1d\u8bd5\u56fe\u901a\u8fc7sklearn\u63d0\u4f9b\u7684\u4e24\u79cd\u5206\u7c7b\u7b97\u6cd5\u5bf9p2p\u7f51\u8d37\u5e73\u53f0\u7684\u8dd1\u8def\u73b0\u8c61\u8fdb\u884c\u5206\u7c7b\u9884\u6d4b\uff0c\u6548\u679c\u4e00\u822c\uff08\u51c6\u786e\u73870.8\uff09\uff0c\u5176\u539f\u56e0\u5728\u6837\u672c\u6570\u636e\u7f3a\u5931\u8f83\u591a\u53ca\u6837\u672c\u7279\u5f81\u4e0d\u5168\u9762\u3002\u56e0\u6b64\uff0c\u8981\u5bf9\u7f51\u8d37\u5e73\u53f0\u7684\u8dd1\u8def\u4e0e\u5426\u8fdb\u884c\u66f4\u7cbe\u786e\u7684\u9884\u6d4b\uff0c\u5c31\u8981\u66f4\u8fdb\u4e00\u6b65\u5730\u91c7\u53d6\u4e00\u4e9b\u63aa\u65bd\u8003\u5bdf\u7f51\u8d37\u5e73\u53f0\uff0c\u6bd4\u5982\uff0c\u5bf9\u7f51\u8d37\u5e73\u53f0\u7684\u76f8\u5173\u5de5\u5546\u4fe1\u606f\u8fdb\u884c\u67e5\u8be2\u548c\u786e\u8ba4\uff0c\u67e5\u8be2\u7f51\u8d37\u5e73\u53f0\u662f\u5426\u63a5\u53d7\u8fc7\u98ce\u6295\uff0c\u53ef\u53c2\u8003\u7b2c\u4e09\u65b9\u7f51\u8d37\u673a\u6784\u7684\u8bc4\u7ea7\u6570\u636e\uff0c\u5bf9\u5e73\u53f0\u8fdb\u884c\u5b9e\u5730\u8003\u5bdf\u7b49\u7b49\u3002\u53ea\u6709\u5bf9\u7f51\u8d37\u5e73\u53f0\u8fdb\u884c\u5168\u9762\u7684\u8003\u5bdf\u548c\u5224\u65ad\u624d\u80fd\u6700\u5927\u5730\u964d\u4f4e\u7f51\u8d37\u6295\u8d44\u98ce\u9669\u3002", 
            "title": "p2p\u7f51\u8d37\u5e73\u53f0\u8dd1\u8def\u6570\u636e\u5206\u6790"
        }, 
        {
            "location": "/data_analysis/p2p_runaway_analysis/p2p_runaway_classify_analysis_forshow/#p2p", 
            "text": "", 
            "title": "p2p\u8dd1\u8def\u5206\u7c7b\u9884\u6d4b\u5206\u6790"
        }, 
        {
            "location": "/data_analysis/p2p_runaway_analysis/p2p_runaway_classify_analysis_forshow/#_1", 
            "text": "\u8fd1\u51e0\u5e74\uff0cp2p\u7f51\u8d37\u884c\u4e1a\u53d1\u5c55\u7684\u662f\u82e5\u706b\u5982\u837c\uff0c\u800c\u6574\u4e2a\u884c\u4e1a\u7684\u5feb\u901f\u53d1\u5c55\u5374\u63a9\u76d6\u4e0d\u4e86\u5176\u53d1\u5c55\u7684\u4e0d\u89c4\u8303\u6027\u3002P2P\u7f51\u8d37\u6700\u5927\u7684\u4f18\u8d8a\u6027\u662f\u4f7f\u4f20\u7edf\u94f6\u884c\u96be\u4ee5\u8986\u76d6\u7684\u501f\u6b3e\u4eba\u5728\u865a\u62df\u4e16\u754c\u91cc\u80fd\u5145\u5206\u4eab\u53d7\u8d37\u6b3e\u7684\u9ad8\u6548\u4e0e\u4fbf\u6377\u3002\u4f46\u4e0e\u6b64\u540c\u65f6\uff0c\u6574\u4e2a\u884c\u4e1a\u4e5f\u662f\u6ce5\u6c99\u4ff1\u4e0b\uff0c\u826f\u83a0\u4e0d\u9f50\u3002\u4e00\u65b9\u9762P2P\u884c\u4e1a\u4ecd\u7136\u5448\u73b0\u9ad8\u901f\u589e\u957f\u6001\u52bf\uff0c\u53e6\u4e00\u65b9\u9762\u5219\u662f\u5e73\u53f0\u63d0\u73b0\u56f0\u96be\u3001\u5012\u95ed\u3001\u574f\u8d26\u98ce\u6ce2\u4e0d\u65ad\uff0c\u51fa\u73b0\u4e86\u6240\u8c13\u7684p2p\u8dd1\u8def\u73b0\u8c61\u3002\n\u672c\u6587\u4ece\u666e\u901a\u6295\u8d44\u8005\u7684\u89d2\u5ea6\u63a2\u8ba8p2p\u7f51\u8d37\u5e73\u53f0\u8dd1\u8def\u7684\u7f18\u7531\uff0c\u5206\u6790\u7f51\u8d37\u5e73\u53f0\u7684\u5404\u79cd\u6307\u6807\u4e0e\u5e73\u53f0\u7ecf\u8425\u72b6\u6001\u7684\u5173\u8054\uff0c\u5bf9p2p\u7f51\u8d37\u5e73\u53f0\u662f\u5426\u4f1a\u201c\u8dd1\u8def\u201d\u8fdb\u884c\u9884\u6d4b\u3002  \u672c\u62a5\u544a\u7684\u6240\u6709\u6570\u636e\u6765\u6e90\u4e8exx\u4e4b\u5bb6\u7684\u6863\u6848\uff0c\u6570\u636e\u622a\u6b62\u65e5\u671f\u4e3a2016\u5e7411\u67083\u65e5\u3002\u4ee5xx\u4e4b\u5bb6\u6863\u6848\u4e2d\u76843895\u5bb6p2p\u7f51\u8d37\u5e73\u53f0\u4e3a\u6e90\u6570\u636e\uff0c\u9009\u62e9\u4e86\u7f51\u8d37\u5e73\u53f0\u7684\u51e0\u4e2a\u8bc4\u4f30\u6307\u6807\u5982\uff0c\u5e73\u5747\u6536\u76ca\u7387\u3001\u8d44\u91d1\u6258\u7ba1\u3001\u7f51\u53cb\u8bc4\u5206\u3001\u5e73\u53f0\u8d44\u8d28\u3001\u6295\u8d44\u671f\u9650\u3001\u6ce8\u518c\u5730\u7b49\u4e3a\u6837\u672c\u7684\u7279\u5f81\uff0c\u4ee5\u7f51\u8d37\u5e73\u53f0\u7684\u7ecf\u8425\u72b6\u51b5\uff08\u662f\u6b63\u5e38\u8425\u4e1a\u72b6\u6001\u8fd8\u662f\u8dd1\u8def\u7b49\u975e\u6b63\u5e38\u8425\u4e1a\u72b6\u6001\uff09\u4e3a\u5206\u7c7b\u6807\u7b7e\uff0c\u5c1d\u8bd5\u5229\u7528\u673a\u5668\u5b66\u4e60\u7684\u51b3\u7b56\u6811\u5206\u7c7b\u7b97\u6cd5\u8bc4\u4f30\u548c\u9884\u6d4bp2p\u7f51\u8d37\u5e73\u53f0\u7684\u8dd1\u8def\u73b0\u8c61\u3002", 
            "title": "\u80cc\u666f\u8bf4\u660e"
        }, 
        {
            "location": "/data_analysis/p2p_runaway_analysis/p2p_runaway_classify_analysis_forshow/#_2", 
            "text": "\u91c7\u7528python\u7684urllib2\u548cbeautifulsoup\u8fdb\u884c\u6570\u636e\u7684\u91c7\u96c6\u548c\u89e3\u6790\uff0c\u91c7\u7528python\u7b2c\u4e09\u65b9\u5e93pandas, numpy\u5bf9\u6570\u636e\u8fdb\u884c\u6e05\u6d17\u5904\u7406\uff0c\u6570\u636e\u91c7\u96c6\u548c\u7b80\u5355\u7684\u5904\u7406\u8fc7\u7a0b\u5728\u6b64\u7565\u8fc7\u3002", 
            "title": "\u6570\u636e\u91c7\u96c6\u53ca\u6e05\u6d17"
        }, 
        {
            "location": "/data_analysis/p2p_runaway_analysis/p2p_runaway_classify_analysis_forshow/#_3", 
            "text": "import pandas as pd\nimport numpy as np \nimport matplotlib.pyplot as plt\nimport seaborn as sns\nsns.set(style= whitegrid , palette= muted , font_scale=1.0, color_codes=True, context= talk )\n%matplotlib inline\nimport sys\nfrom matplotlib.ticker import MultipleLocator, FormatStrFormatter\nfrom matplotlib.font_manager import FontProperties  \nfont = FontProperties(fname=r /usr/share/fonts/truetype/arphic/ukai.ttc )\nreload(sys)\nsys.setdefaultencoding('utf-8')  # \u8f7d\u5165\u6e05\u6d17\u540e\u7684\u6570\u636e\u96c6\uff0c\u8fdb\u884c\u76f8\u5e94\u5904\u7406\ndall = pd.read_table( ./p2pchanged.txt , sep=',')  # (3895, 12)   # \u5404\u7279\u5f81\u5206\u522b\u4e3a\uff1a\nfeature_dict = { name : u p2p\u5e73\u53f0\u540d ,  averageI : u \u5e73\u5747\u5e74\u5316\u5229\u7387 , \n                date : u \u4e0a\u7ebf\u65e5\u671f ,  zhuzed : u \u6ce8\u518c\u5730 , \n                 touziq : u \u6295\u8d44\u671f\u9650 ,  netF : u \u7f51\u53cb\u8bc4\u5206 , \n                 background : u \u516c\u53f8\u7c7b\u578b ,  tuoguan : u \u8d44\u91d1\u6258\u7ba1 ,\n                 zhuz : u \u6ce8\u518c\u8d44\u672c ,  shiz : u \u5b9e\u7f34\u8d44\u672c , \n                 datetime : u \u4e0a\u7ebf\u65f6\u95f4 ,  classification : u \u5206\u7c7b\u6807\u7b7e \n               }  # \u6570\u636e\u96c6\u524d5\u884c\ndall.head()   \n   \n     \n       \n       name \n       averageI \n       date \n       zhuzed \n       classification \n       touziq \n       netF \n       background \n       tuoguan \n       zhuz \n       shiz \n       datetime \n     \n   \n   \n     \n       0 \n       108\u8d37 \n       14.548392 \n       2015-02-26 \n       44.0 \n       0.0 \n       2.578413 \n       14.351883 \n       0 \n       0 \n       500 \n       0 \n       5.326389e+07 \n     \n     \n       1 \n       2025\u91d1\u878d \n       14.548392 \n       2015-11-16 \n       11.0 \n       0.0 \n       2.578413 \n       14.351883 \n       0 \n       0 \n       2000 \n       0 \n       3.054069e+07 \n     \n     \n       2 \n       51\u5e2e\u4f60 \n       12.460000 \n       2012-08-15 \n       33.0 \n       1.0 \n       1.172000 \n       16.500000 \n       0 \n       1 \n       3000 \n       2000 \n       1.331839e+08 \n     \n     \n       3 \n       53\u8d22\u670d \n       14.548392 \n       2016-04-18 \n       33.0 \n       1.0 \n       1.100000 \n       14.351883 \n       0 \n       0 \n       10000 \n       20 \n       1.723509e+07 \n     \n     \n       4 \n       51\u94b1\u7ba1\u5bb6 \n       12.000000 \n       2015-11-04 \n       50.0 \n       1.0 \n       2.578413 \n       14.000000 \n       0 \n       1 \n       10000 \n       100 \n       3.157749e+07", 
            "title": "\u63a2\u7d22\u6027\u5206\u6790"
        }, 
        {
            "location": "/data_analysis/p2p_runaway_analysis/p2p_runaway_classify_analysis_forshow/#_4", 
            "text": "dall[ averageI ] = dall[ averageI ].map(lambda x: np.round(x, 4))\ndall.loc[:,  classification ] = dall[ classification ].replace([0,1], [u'\u8dd1\u8def',u'\u6b63\u5e38\u8425\u4e1a'])\ndf = dall.loc[dall[ averageI ] != 14.5484, :]  plt.figure(figsize=(8,6))\nfig = sns.distplot(df['averageI'],kde=True, vertical=False, color= green )\nsns.despine(top=True)\nplt.yticks(fig.get_yticks(), fig.get_yticks() * 100)\nplt.ylabel('Distribution [%]', fontsize=16)\nplt.xticks(range(0, 100, 10))\nplt.gca().yaxis.grid(True, linestyle =  : )\nplt.gca().xaxis.grid(True, linestyle =  -. )\nplt.xlabel(u \u5e73\u5747\u5e74\u5316\u5229\u7387 % , fontsize=16, fontproperties=font)\nplt.title(u \u5e73\u5747\u5e74\u5316\u5229\u7387\u7684\u5206\u5e03 , fontsize=20, fontproperties=font)  matplotlib.text.Text at 0x7fe3af9f8a10    # \u6839\u636e\u8dd1\u8def\u4e0e\u5426\u8fdb\u884c\u5206\u7ec4\u5f97\u5230\u4e86\u5e73\u5747\u5229\u7387\u7684\u5206\u7ec4\u5bf9\u8c61\nrate_cont = df.groupby([ classification ])[ averageI ]    fig, ax1 = plt.subplots(figsize=(8,6))\nrate_cont.plot(kind='kde',ax=ax1, style='--', linewidth=2.5)\nrate_cont.plot(kind='hist',ax=ax1, normed=True, alpha=0.8,)\nax1.legend(loc='best', prop=font, fontsize=17)\nax1.set_ylabel('Frequency', fontsize=16)\nax1.set_xlim(-1, 95)\nax1.text(14.0, 0.115,s=u'\u6b63\u5e38\u8425\u4e1a\u5e73\u53f0\u5e73\u5747\u6536\u76ca\u7387 12.88%', fontsize=12,va= bottom ,ha= left ,fontproperties=font,color='blue') \nax1.text(20.0, 0.09,s=u'\u8dd1\u8def\u5e73\u53f0\u5e73\u5747\u6536\u76ca\u7387 18.56%', fontsize=12,va= bottom ,ha= left ,fontproperties=font,color='green')\nax1.annotate('',xy=(12.18,0.109),xytext=(14,0.115),arrowprops=dict(arrowstyle= - ,color='blue')) \nax1.annotate('',xy=(17.9,0.08),xytext=(20,0.09),arrowprops=dict(arrowstyle= - ,color='green'))\nplt.xlabel(u \u5e73\u5747\u5e74\u5316\u5229\u7387 % , fontsize=16, fontproperties=font)\nplt.title(u p2p\u5e73\u53f0\u8dd1\u8def\u4e0e\u5426\u4e0e\u5e73\u5747\u6536\u76ca\u7387 , fontsize=20, fontproperties=font)\nplt.yticks(ax1.get_yticks(), ax1.get_yticks() * 100)\nplt.ylabel('Distribution [%]', fontsize=16)\nplt.xticks(range(0, 100, 10))\nplt.gca().yaxis.grid(True, linestyle =  : )\nplt.gca().xaxis.grid(True, linestyle =  -. )   p2p\u7f51\u8d37\u5e73\u53f0\u7684\u5e73\u5747\u5e74\u5316\u6536\u76ca\u7387\u5206\u5e03\u5f88\u5e7f\uff0c\u4ece\u6700\u4f4e\u76844%\u5230\u6700\u9ad8\u768490%\u5747\u6709\uff0c\u5176\u4e2d\u6b63\u5e38\u8425\u4e1a\u7684p2p\u5e73\u53f0\u4e3b\u8981\u5206\u5e03\u57285-20%, \u800c\u8dd1\u8def\u5e73\u53f0\u4e3b\u8981\u5206\u5e03\u57288-30%\u4e4b\u95f4\u3002\u6b63\u5e38\u8425\u4e1a\u7684p2p\u5e73\u53f0\u7684\u5e73\u5747\u6536\u76ca\u7387\u4e3a12.88%\uff0c\u8dd1\u8def\u5e73\u53f0\u7684\u5e73\u5747\u6536\u76ca\u7387\u662f18.56%\u3002", 
            "title": "\u5e73\u5747\u5e74\u5316\u5229\u7387"
        }, 
        {
            "location": "/data_analysis/p2p_runaway_analysis/p2p_runaway_classify_analysis_forshow/#_5", 
            "text": "# \u8f7d\u5165\u5730\u533a\u7f16\u53f7\uff0c\u517130\u4e2a\u7701\nplaces = pd.read_table( ./regis_place.txt , sep=',', header=None)  # (30,2) \nplaces.columns =[ number_pro ,  name_pro ]  df_set = set(df[ zhuzed ].astype(np.int).values)\nplaces_set = set(places[ number_pro ])\nplaces_set ^ df_set  {54, 63}  p1 = places.loc[places[ number_pro ] != 54, :]\np_sub = p1.loc[p1[ number_pro ] != 63, :][ name_pro ]\np_sub.shape  (29,)  # \u6839\u636e\u6ce8\u518c\u5730\u8fdb\u884c\u5206\u7ec4\npro_groupby = df.groupby( zhuzed )[ averageI ].aggregate([np.size, np.mean]).reset_index()\npro_name = pro_groupby[ zhuzed ].replace(pro_groupby[ zhuzed ].values, p_sub)\npro_groupby[ pro_name ] = pro_name.map(lambda x: x.strip())\npro_groupby.sort_values( size , ascending=False, inplace=True)\npro_groupby.head(3)   \n   \n     \n       \n       zhuzed \n       size \n       mean \n       pro_name \n     \n   \n   \n     \n       18 \n       44.0 \n       479.0 \n       14.446493 \n       \u5e7f\u4e1c \n     \n     \n       0 \n       11.0 \n       335.0 \n       11.644448 \n       \u5317\u4eac \n     \n     \n       8 \n       31.0 \n       246.0 \n       12.214431 \n       \u4e0a\u6d77 \n     \n      fig, ax1 = plt.subplots(figsize=(10,7))\ng = sns.barplot(y= size , x= pro_name , data=pro_groupby, palette= PuBu_d , ax=ax1)\nplt.xticks(g.get_xticks(), fontproperties=font, fontsize=16, rotation=75)\n# g=sns.factorplot(y= zhuzed , data=df, kind='count', size=6, color= indianred )\nax2 = ax1.twinx()\nx_list = range(len(pro_groupby))\nax2.plot(x_list, pro_groupby[ mean ], linewidth = 3, color= skyblue , marker= o , label=u \u804c\u4f4d\u9700\u6c42\u91cf ) \nax2.set_ylabel(u \u5e73\u5747\u5e74\u5316\u5229\u7387 % , fontsize=16, fontproperties=font)\nax1.set_ylabel(u \u6570\u91cf , fontsize=16, fontproperties=font)\nax2.set_ylim(4, 20)\nax2.yaxis.grid(True, linestyle =  : ,)\nax1.yaxis.grid(False)\nplt.title(u \u5168\u56fd\u5404\u5730\u533ap2p\u7f51\u8d37\u5e73\u53f0\u6570\u91cf\u53ca\u5e73\u5747\u5e74\u5316\u5229\u7387 , fontproperties=font, fontsize=20)   # \u6839\u636e\u6ce8\u518c\u5730\u548c\u8dd1\u8def\u4e0e\u5426\u7684\u5206\u7c7b\u6807\u7b7e\u8fdb\u884c\u5206\u7ec4\npro_cla = df.groupby([ zhuzed ,  classification ])[ averageI ].aggregate([np.size, np.mean]).reset_index()\npro_name = pro_cla[ zhuzed ].replace(pro_cla[ zhuzed ].unique(), p_sub)\npro_cla[ pro_name ] = pro_name.map(lambda x: x.strip())  for i in pro_cla[ zhuzed ].unique():\n    total_ = pro_cla.loc[pro_cla[ zhuzed ] == i,  size ].sum()\n    temp = pro_cla.loc[pro_cla[ zhuzed ] == i,  size ] / total_ * 100\n    pro_cla.loc[pro_cla[ zhuzed ] == i,  property ] = temp\n    pro_cla.loc[pro_cla[ zhuzed ] == i,  total_num ] = total_     pro_cla.sort_values([ total_num ,  classification ], ascending=False, inplace=True)\npro_cla.head(15)   \n   \n     \n       \n       zhuzed \n       classification \n       size \n       mean \n       pro_name \n       property \n       total_num \n     \n   \n   \n     \n       37 \n       44.0 \n       \u8dd1\u8def \n       149.0 \n       17.667383 \n       \u5e7f\u4e1c \n       31.106472 \n       479.0 \n     \n     \n       36 \n       44.0 \n       \u6b63\u5e38\u8425\u4e1a \n       330.0 \n       12.992212 \n       \u5e7f\u4e1c \n       68.893528 \n       479.0 \n     \n     \n       1 \n       11.0 \n       \u8dd1\u8def \n       57.0 \n       13.858772 \n       \u5317\u4eac \n       17.014925 \n       335.0 \n     \n     \n       0 \n       11.0 \n       \u6b63\u5e38\u8425\u4e1a \n       278.0 \n       11.190432 \n       \u5317\u4eac \n       82.985075 \n       335.0 \n     \n     \n       17 \n       31.0 \n       \u8dd1\u8def \n       54.0 \n       16.403704 \n       \u4e0a\u6d77 \n       21.951220 \n       246.0 \n     \n     \n       16 \n       31.0 \n       \u6b63\u5e38\u8425\u4e1a \n       192.0 \n       11.036198 \n       \u4e0a\u6d77 \n       78.048780 \n       246.0 \n     \n     \n       21 \n       33.0 \n       \u8dd1\u8def \n       42.0 \n       22.031429 \n       \u6d59\u6c5f \n       23.204420 \n       181.0 \n     \n     \n       20 \n       33.0 \n       \u6b63\u5e38\u8425\u4e1a \n       139.0 \n       13.863022 \n       \u6d59\u6c5f \n       76.795580 \n       181.0 \n     \n     \n       29 \n       37.0 \n       \u8dd1\u8def \n       92.0 \n       21.970326 \n       \u5c71\u4e1c \n       57.142857 \n       161.0 \n     \n     \n       28 \n       37.0 \n       \u6b63\u5e38\u8425\u4e1a \n       69.0 \n       15.144058 \n       \u5c71\u4e1c \n       42.857143 \n       161.0 \n     \n     \n       33 \n       42.0 \n       \u8dd1\u8def \n       30.0 \n       17.895000 \n       \u6e56\u5317 \n       31.578947 \n       95.0 \n     \n     \n       32 \n       42.0 \n       \u6b63\u5e38\u8425\u4e1a \n       65.0 \n       13.785231 \n       \u6e56\u5317 \n       68.421053 \n       95.0 \n     \n     \n       23 \n       34.0 \n       \u8dd1\u8def \n       27.0 \n       18.066667 \n       \u5b89\u5fbd \n       36.486486 \n       74.0 \n     \n     \n       22 \n       34.0 \n       \u6b63\u5e38\u8425\u4e1a \n       47.0 \n       13.342553 \n       \u5b89\u5fbd \n       63.513514 \n       74.0 \n     \n     \n       19 \n       32.0 \n       \u8dd1\u8def \n       18.0 \n       21.010556 \n       \u6c5f\u82cf \n       25.714286 \n       70.0 \n     \n      plt.figure(figsize=(7, 12))\ng=sns.barplot(y= pro_name , x= size , data=pro_cla, hue= classification )\nplt.yticks(g.get_yticks(), fontproperties=font, fontsize=16)\nplt.ylabel( )\nplt.xlabel(u \u6570\u91cf , fontsize=16, fontproperties=font)\nplt.title(u p2p\u7f51\u8d37\u5e73\u53f0\u5730\u533a\u5206\u5e03 , fontproperties=font, fontsize=20)\nplt.gca().xaxis.grid(True, linestyle =  -. ,)\nplt.legend(loc=7,prop=font, fontsize=12)\nplt.annotate(u \u5c71\u4e1c\u5730\u533ap2p\u8dd1\u8def\u6bd4\u4f8b\u6700\u9ad8\u8fbe57% , xy = (80, 4), xytext = (100, 6), fontproperties=font, fontsize=15, arrowprops = dict(facecolor='purple'))  matplotlib.text.Annotation at 0x7fe3a13a9110    \u5168\u56fdp2p\u5e73\u53f0\u7684\u6570\u91cf\u4f4d\u5c45\u524d\u4e09\u7684\u7701\u4efd\uff08\u5e02\uff09\u662f\u5e7f\u4e1c\u3001\u5317\u4eac\u3001\u4e0a\u6d77\uff0c\u8dd1\u8def\u5e73\u53f0\u6bd4\u4f8b\u6700\u9ad8\u7684\u662f\u5c71\u4e1c\uff0c\u8d85\u8fc7\u4e00\u534a\u7684p2p\u7f51\u8d37\u5e73\u53f0\u51fa\u73b0\u8dd1\u8def\u6216\u5176\u4ed6\u975e\u6b63\u5e38\u8425\u4e1a\u73b0\u8c61\u3002", 
            "title": "\u5730\u57df\u5206\u5e03"
        }, 
        {
            "location": "/data_analysis/p2p_runaway_analysis/p2p_runaway_classify_analysis_forshow/#p2p_1", 
            "text": "# \u5c06\u65f6\u95f4str\u8f6c\u6210datetime\ndf['date'] = pd.to_datetime(df['date'])\n# \u5c06\u8f6c\u6362\u597d\u7684\u65f6\u95f4series\u8bbe\u7f6e\u6210\u884c\u7d22\u5f15\ndt = df.set_index( date )\ndt[ year_ ] = dt.index.year\ndt[ month ] = dt.index.month\nyear_groupby = dt.groupby( year_ )[ averageI ].aggregate([np.size, np.mean, np.median])\nyear_groupby.drop(year_groupby.index[0], inplace=True)\nyear_groupby.reset_index(inplace=True)  month_groupby = dt.groupby( month )[ averageI ].aggregate([np.size, np.mean, np.median])\nmonth_groupby.drop(month_groupby.index[0], inplace=True)\nmonth_groupby.reset_index(inplace=True)\nmonth_groupby   \n   \n     \n       \n       month \n       size \n       mean \n       median \n     \n   \n   \n     \n       0 \n       2 \n       97.0 \n       13.900103 \n       12.600 \n     \n     \n       1 \n       3 \n       202.0 \n       14.094703 \n       13.295 \n     \n     \n       2 \n       4 \n       191.0 \n       13.716649 \n       13.000 \n     \n     \n       3 \n       5 \n       171.0 \n       14.180819 \n       12.790 \n     \n     \n       4 \n       6 \n       180.0 \n       14.210944 \n       13.000 \n     \n     \n       5 \n       7 \n       193.0 \n       14.886114 \n       13.500 \n     \n     \n       6 \n       8 \n       186.0 \n       15.527688 \n       14.000 \n     \n     \n       7 \n       9 \n       194.0 \n       14.236392 \n       13.195 \n     \n     \n       8 \n       10 \n       171.0 \n       15.033860 \n       14.000 \n     \n     \n       9 \n       11 \n       200.0 \n       15.484450 \n       14.300 \n     \n     \n       10 \n       12 \n       239.0 \n       13.877448 \n       13.440 \n     \n      p2p_date_dict = { year_ : u \u5e74\u4efd ,  month : u \u6708\u4efd }  def p2p_date_plot(dt, groupby_item):\n    data = dt.groupby(groupby_item)[ averageI ].aggregate([np.size, np.mean, np.median])\n    data.drop(data.index[0], inplace=True)\n    data.reset_index(inplace=True)  \n    fig, ax1 = plt.subplots(figsize=(8,6))\n    g = sns.barplot(y= size , x=groupby_item, data=data, palette= BuGn_d , ax=ax1)\n    plt.xticks(g.get_xticks(), fontproperties=font, fontsize=16, rotation=60)\n    ax2 = ax1.twinx()\n    x_list = range(len(data))\n    ax2.plot(x_list, data[ mean ], linewidth = 3, color= darkgreen , marker= o , label=u \u5229\u7387 ) \n    ax2.set_ylabel(u \u5e73\u5747\u5e74\u5316\u5229\u7387 % , fontsize=16, fontproperties=font)\n    ax1.set_ylabel(u \u6570\u91cf , fontsize=16, fontproperties=font)\n    ax1.set_xlabel( )\n    ax2.yaxis.grid(True, linestyle =  : , linewidth=2, color= green , alpha=0.2)\n    ax1.yaxis.grid(False)\n    if groupby_item ==  month :\n        ax2.set_ylim(10, 18) \n        # ax2.axhline(y=14.7,linewidth=2, xmin=0.5, xmax=0.8, color='r')        \n        # \u5e73\u884cx\u8f74\u7684\u77e9\u5f62\uff0c\u53c2\u6570\uff1aymin,ymax,xmin=0,xmin=1        \n        ax2.axhspan(14.7, 15.7, 0.49, 0.6, facecolor= skyblue , alpha=0.8)\n        ax2.axhspan(14.7, 15.7, 0.74, 0.85, facecolor= skyblue , alpha=0.8)\n        plt.annotate( , xy = (8.1, 15.7), xytext = (7.5, 16.7), fontproperties=font, fontsize=15, arrowprops = dict(facecolor='skyblue'))        \n        plt.annotate( , xy = (5, 15.7), xytext = (7, 16.7), fontproperties=font, fontsize=15, arrowprops = dict(facecolor='skyblue'))        \n    plt.title(u p2p\u7f51\u8d37\u5e73\u53f0\u6570\u91cf\u53ca\u5e73\u5747\u5e74\u5316\u5229\u7387\u4e0e\u6210\u7acb{} .format(p2p_date_dict.get(groupby_item)), fontproperties=font, fontsize=20)\n    plt.legend(loc= best ,prop=font, fontsize=17)  for i in p2p_date_dict:   \n    p2p_date_plot(dt, i)    \u7edf\u8ba1\u6570\u636e\u663e\u793a\u6211\u56fd\u6700\u65e9\u7684p2p\u7f51\u8d37\u5e73\u53f0\u6210\u7acb\u4e8e2004\u5e744\u6708\uff0c\u622a\u6b62\u523016\u5e7411\u6708\u521d\uff0c\u5168\u56fd\u6ce8\u518c\u6210\u7acb\u4e86\u8fd14000\u5bb6p2p\u7f51\u8d37\u5e73\u53f0\u3002\u6211\u56fd\u7684p2p\u7f51\u8d37\u884c\u4e1a\u57282013\u5e74\u8fdb\u884c\u9ad8\u901f\u53d1\u5c55\u671f\uff0c\u52302014\u5e74\u5e95\u53ca2015\u5e74\u521d\u5230\u8fbe\u9876\u5cf0\uff0c\u968f\u540e\u589e\u901f\u653e\u6162\u3002  \u4ece\u5e73\u5747\u5229\u7387\u4e0a\u770b\uff0c2013\u5e74\u8fbe\u5230\u6700\u5927\u503c\uff0c\u968f\u540e\u6025\u5267\u964d\u4f4e;\u4ece\u5229\u7387\u4e0e\u6708\u4efd\u7684\u5173\u7cfb\u53ef\u770b\u51fa\uff0c7-8\u300110-11\u6708\u4efd\u7684\u5e73\u5747\u5229\u7387\u9ad8\u4e8e\u5176\u4ed6\u6708\u4efd\uff0c\u96be\u9053\u8ddf\u5e02\u573a\u6d41\u52a8\u8d44\u91d1\u7d27\u7f3a\u7a0b\u5ea6\u76f8\u5173\uff1f", 
            "title": "p2p\u7f51\u8d37\u6210\u7acb\u65f6\u95f4"
        }, 
        {
            "location": "/data_analysis/p2p_runaway_analysis/p2p_runaway_classify_analysis_forshow/#_6", 
            "text": "fig, ax = plt.subplots(figsize=(8,6))\nsns.barplot(x= tuoguan , y= averageI , hue= classification , hue_order=[u \u8dd1\u8def , u \u6b63\u5e38\u8425\u4e1a ], data=df, palette= husl , ax=ax)\nax.set_xticklabels([u \u65e0\u6258\u7ba1 , u \u6258\u7ba1 ], fontproperties=font, fontsize=16)\nax2 = ax.twinx()\n# \u6258\u7ba1\u72b6\u51b5\u767e\u5206\u6bd4\ndft = df[ tuoguan ].value_counts() / df.shape[0] * 100\nax2.plot([0,1], dft.values, linewidth = 1, color= b , marker= * , markersize=20, label=u \u767e\u5206\u6bd4% ) \nax.set_ylabel(u \u5e73\u5747\u5e74\u5316\u5229\u7387% , fontsize=16, fontproperties=font)\nax2.set_ylabel(u \u767e\u5206\u6bd4% , fontsize=16, fontproperties=font)\nax.yaxis.grid(True, linestyle =  -. ,)\nax2.yaxis.grid(False)\nax.legend(loc=9,prop=font, fontsize=17)\nax2.legend(loc=1,prop=font, fontsize=17)\nax.set_xlabel( )\nplt.title(u p2p\u5e73\u53f0\u8d44\u91d1\u6258\u7ba1\u72b6\u51b5 , fontproperties=font, fontsize=20)  matplotlib.text.Text at 0x7fe397039310    \u53ea\u6709\u7ea645%\u7684\u7f51\u8d37\u5e73\u53f0\u8fdb\u884c\u4e86\u8d44\u91d1\u6258\u7ba1\uff0c\u8fdb\u884c\u8d44\u91d1\u6258\u7ba1\u7684p2p\u7f51\u8d37\u5e73\u53f0\u7684\u5e73\u5747\u5229\u7387\u4f4e\u4e8e\u672a\u8fdb\u884c\u8d44\u91d1\u6258\u7ba1\u7684\u5e73\u53f0\uff0c\u8dd1\u8def\u6216\u51fa\u73b0\u5176\u4ed6\u7ecf\u8425\u72b6\u51b5\u7684\u5e73\u5747\u5229\u7387\u5747\u9ad8\u4e8e\u6b63\u5e38\u8425\u4e1a\u7684\u5e73\u53f0\u3002", 
            "title": "\u8d44\u91d1\u6258\u7ba1"
        }, 
        {
            "location": "/data_analysis/p2p_runaway_analysis/p2p_runaway_classify_analysis_forshow/#_7", 
            "text": "df[ net_score ] = df[ netF ].astype(np.int)\nnet_friend_score = df.groupby( classification )[ net_score ].value_counts().unstack().unstack().unstack().fillna(0)\nnet_friend_score[ total ] = net_friend_score.sum(axis=1)\nnet_friend_score_cum = net_friend_score.div(net_friend_score[ total ], axis=0)*100\nnet_friend_score_cum.drop( total , axis=1, inplace=True)\nnet_friend_score.drop( total , axis=1, inplace=True)\nfig1, (ax1, ax2) = plt.subplots(2,1, sharex=True, figsize=(12,9)) \nnet_friend_score_cum.plot(kind='bar',ax=ax1, stacked=True, label= )\nnet_friend_score.plot(kind='bar',ax=ax2, stacked=True)\nax1.legend(loc=1, prop=font, fontsize=17)\nax2.legend(loc='best', prop=font, fontsize=17)\nax2.xaxis.grid(False)\nax2.yaxis.grid(True, linestyle= -. )\nax1.yaxis.grid(True, linestyle= -. )\nax2.set_ylabel(u \u6570\u91cf , fontsize=16, fontproperties=font)\nax1.set_ylabel(u \u767e\u5206\u6bd4% , fontsize=16, fontproperties=font)\nax2.annotate( 5 , xy = (1, 10), xytext = (2.5, 160), fontproperties=font, fontsize=15, arrowprops = dict(facecolor= m ))        \nax1.annotate(u \u603b\u6570\u4e3a5 , xy = (1, 76), xytext = (1.5,60), fontproperties=font, fontsize=15, arrowprops = dict(facecolor= m ))        \nplt.xlabel(u \u7f51\u53cb\u8bc4\u5206 , fontproperties=font, fontsize=17)  matplotlib.text.Text at 0x7fe3912ed850    \u7f51\u53cb\u8bc4\u5206\u680f\u5305\u62ec\u56db\u9879\uff0c\u6bcf\u9879\u8bb05\u5206\uff0c\u6ee1\u5206\u603b\u517120\u5206\u3002\u5728\u6570\u636e\u5904\u7406\u65f6\u5c06\u6bcf\u4e00\u8bc4\u5206\u9879\u76ee\u7684\u65e0\u8bc4\u5206\u7684\u6216\u5c0f\u4e8e1.0\u5206\u7684\u7edf\u7edf\u8bb0\u4e3a1.0\u5206\uff0c\u56e0\u6b64\uff0c\u6700\u4f4e\u5206\u4e3a4.0\u5206\uff0c\u6700\u9ad8\u4e3a20\u5206\u3002\u6839\u636e\u76f8\u5bf9\u7d2f\u8ba1\u67f1\u72b6\u56fe\uff0c\u7f51\u53cb\u8bc4\u5206\u8f83\u9ad8\u7684\u7f51\u8d37\u5e73\u53f0\u51fa\u73b0\u8dd1\u8def\u7684\u6bd4\u4f8b\u8f83\u4f4e\u3002\u7531\u4e8e5\u5206\u7684\u5e73\u53f0\u6570\u91cf\u53ea\u67095\u5bb6\uff0c\u9020\u6210\u767e\u5206\u6570\u504f\u79bb\u8f83\u5927\u3002", 
            "title": "\u7f51\u53cb\u8bc4\u5206"
        }, 
        {
            "location": "/data_analysis/p2p_runaway_analysis/p2p_runaway_classify_analysis_forshow/#p2p_2", 
            "text": "background = df.groupby( classification )[ background ].value_counts().unstack().unstack().unstack().fillna(0)\n# [0,1,2,3],[u'\u79c1\u8425 \u6c11\u8425\u7cfb',u'\u4e0a\u5e02\u516c\u53f8\u7cfb',u'\u94f6\u884c\u7cfb',u'\u56fd\u8d44\u7cfb']\nbackground[ total ] = background.sum(axis=1)\nbackground_cum = background.div(background[ total ], axis=0)*100\nbackground_cum.drop( total , axis=1, inplace=True)\nbackground.drop( total , axis=1, inplace=True)\nfig1, (ax1, ax2) = plt.subplots(2,1, sharex=True, figsize=(12,9)) \nbackground_cum.plot(kind='bar',ax=ax1, stacked=True, label= )\nbackground.plot(kind='bar',ax=ax2, stacked=True)\nax1.legend(loc=9, prop=font, fontsize=17)\nax2.legend(loc='best', prop=font, fontsize=17)\nax2.xaxis.grid(False)\nax2.yaxis.grid(True, linestyle= -. )\nax1.yaxis.grid(True, linestyle= -. )\nax2.set_ylabel(u \u6570\u91cf , fontsize=16, fontproperties=font)\nax1.set_ylabel(u \u767e\u5206\u6bd4% , fontsize=16, fontproperties=font)\nax2.set_xticklabels([u'\u79c1\u8425 \u6c11\u8425\u7cfb',u'\u4e0a\u5e02\u516c\u53f8\u7cfb',u'\u94f6\u884c\u7cfb',u'\u56fd\u8d44\u7cfb'], rotation=30, fontproperties=font)\nax2.annotate(u'\u63d0\u73b0\u56f0\u96be1\u5bb6',xy=(3,150),xytext=(2.5,300),fontproperties=font,arrowprops=dict(arrowstyle= - ,color='green',linewidth=3)) \nplt.xlabel(u \u5e73\u53f0\u8d44\u8d28 , fontproperties=font, fontsize=17)  matplotlib.text.Text at 0x7f14b5933510    p2p\u5e73\u53f0\u8d44\u8d28\uff08\u5e73\u53f0\u80cc\u666f\uff09\u5212\u5206\u4e3a\u6c11\u8425 \u79c1\u8425\u7cfb\u3001\u4e0a\u5e02\u516c\u53f8\u7cfb\u3001\u94f6\u884c\u7cfb\u3001\u56fd\u8d44\u7cfb\uff0c\u5176\u4e2d\u6c11\u8425\u7cfb\u7f51\u8d37\u8dd1\u8def\u6bd4\u4f8b\u6700\u9ad8\uff0c\u56fd\u8d44\u7cfb\u6709\u63d0\u73b0\u56f0\u96be1\u5bb6\uff0c\u4e0a\u5e02\u516c\u53f8\u548c\u94f6\u884c\u7cfb\u65e0\u8dd1\u8def\u3002", 
            "title": "p2p\u7f51\u8d37\u5e73\u53f0\u80cc\u666f"
        }, 
        {
            "location": "/data_analysis/p2p_runaway_analysis/p2p_runaway_classify_analysis_forshow/#_8", 
            "text": "df.loc[:,  touziq ] = df[ touziq ].map(lambda x: np.round(x, 4))\ndf_span = df.loc[df[ touziq ] != 2.5784, :]  # (1524, 12)\ndf_span.loc[:,  touziq ] = df_span[ touziq ].map(lambda x: np.round(x))\ndf_span.loc[df_span[ touziq ] == 0,  touziq ] = 0.5\ndf_span.loc[:,  touziq ] = df_span['touziq'].astype(np.int64)  plt.figure(figsize=(10,6))\ng = sns.barplot(x= touziq , y= averageI , data=df_span, hue= classification )\nplt.xticks(g.get_xticks(), fontproperties=font, fontsize=16)\nplt.ylabel(u \u5e73\u5747\u5e74\u5316\u5229\u7387% , fontsize=16, fontproperties=font)\nplt.xlabel(u \u6295\u8d44\u671f\u9650(\u6708) , fontsize=16, fontproperties=font)\nplt.title(u p2p\u5e73\u53f0\u5e73\u5747\u5e74\u5316\u5229\u7387\u4e0e\u6295\u8d44\u671f\u9650 , fontproperties=font, fontsize=20)\nplt.gca().yaxis.grid(True, linestyle =  -. ,)\nplt.legend(loc= best ,prop=font, fontsize=17)  matplotlib.legend.Legend at 0x7f14b2acf0d0    span = df_span.groupby( classification )[ touziq ].value_counts().unstack().unstack().unstack().fillna(0)\nspan[ total ] = span.sum(axis=1)\nspan_cum = span.div(span[ total ], axis=0)*100\nspan_cum.drop( total , axis=1, inplace=True)\nspan.drop( total , axis=1, inplace=True)\nfig1, (ax1, ax2) = plt.subplots(2,1, sharex=True, figsize=(12,9)) \nspan_cum.plot(kind='bar',ax=ax1, stacked=True, label= )\nspan.plot(kind='bar',ax=ax2, stacked=True)\nax1.legend(loc=2, prop=font, fontsize=17)\nax2.legend(loc='best', prop=font, fontsize=17)\nax2.xaxis.grid(False)\nax2.yaxis.grid(True, linestyle= -. )\nax1.yaxis.grid(True, linestyle= -. )\nax2.set_ylabel(u \u6570\u91cf , fontsize=16, fontproperties=font)\nax1.set_ylabel(u \u767e\u5206\u6bd4% , fontsize=16, fontproperties=font) \nax2.annotate(u'\u5c0f\u4e8e1\u4e2a\u6708',xy=(0,30),xytext=(0,100),fontproperties=font,arrowprops=dict(arrowstyle= - ,color='k',linewidth=3)) \nplt.xlabel(u \u6295\u8d44\u671f\u9650(\u6708) , fontproperties=font, fontsize=17)  matplotlib.text.Text at 0x7f14b0e47550    p2p\u7f51\u8d37\u7684\u6295\u8d44\u671f\u9650\u53d8\u5316\u8303\u56f4\u5f88\u5bbd\u6cdb\uff0c\u5c11\u7684\u77ed\u5219\u51e0\u5929\uff0c\u591a\u7684\u957f\u8fbe\u51e0\u5e74\u3002\u4e3a\u4e86\u65b9\u4fbf\uff0c\u5c06\u79d2\u6807\u3001\u5929\u6807\u7b49\u5c0f\u4e8e1\u4e2a\u6708\u7684\u7f51\u8d37\u5e73\u53f0\u8bb0\u4e3a\u5c0f\u4e8e1\u4e2a\u6708(0)\uff0c\u5c06\u5927\u4e8e\u7b49\u4e8e24\u4e2a\u6708\u7684\u5e73\u53f0\u8bb0\u4e3a24\u4e2a\u6708\u3002\u5927\u90e8\u5206\u7f51\u8d37\u5e73\u53f0\u7684\u6295\u8d44\u671f\u9650\u5c0f\u4e8e\u534a\u5e74\uff0c\u5c24\u5176\u96c6\u4e2d\u57281\u6708\u30012\u6708\u30013\u6708\u6807\u53ca\u5929\u6807\u4e0a\u3002\u800c\u8dd1\u8def\u7684\u7f51\u8d37\u5e73\u53f0\u4e5f\u591a\u96c6\u4e2d\u5728\u77ed\u671f\u6295\u8d44\u4e0a\u3002\u4e00\u5e74\u4ee5\u4e0a\u7684\u6295\u8d44\u671f\u9650\u7684\u5e73\u53f0\u6ca1\u6709\u8dd1\u8def\u73b0\u8c61\u3002\u56e0\u6b64\uff0c\u5728\u9009\u62e9p2p\u5e73\u53f0\u65f6\uff0c\u8981\u9009\u62e9\u6295\u8d44\u671f\u9650\u957f\u7684\u4e3a\u5b9c\u3002", 
            "title": "\u6295\u8d44\u671f\u9650"
        }, 
        {
            "location": "/data_analysis/p2p_runaway_analysis/p2p_runaway_classify_analysis_forshow/#p2p_3", 
            "text": "\u901a\u8fc7\u524d\u9762\u7684\u7b80\u5355\u7684\u63a2\u7d22\u5206\u6790\u6211\u4eec\u5bf9p2p\u7f51\u8d37\u5e73\u53f0\u7684\u51e0\u4e2a\u6837\u672c\u7279\u5f81\u4e0e\u5e73\u53f0\u8dd1\u8def\u7684\u5173\u7cfb\u6709\u4e86\u4e00\u5b9a\u8ba4\u8bc6\uff0c\u4e0b\u9762\u5c1d\u8bd5\u5229\u7528\u673a\u5668\u5b66\u4e60\u7684\u51b3\u7b56\u6811\u5206\u7c7b\u7b97\u6cd5\u6765\u5206\u6790\u548c\u9884\u6d4bp2p\u7f51\u8d37\u5e73\u53f0\u7684\u8dd1\u8def\u73b0\u8c61\u3002", 
            "title": "p2p\u8dd1\u8def\u539f\u56e0\u5206\u6790\u53ca\u9884\u6d4b"
        }, 
        {
            "location": "/data_analysis/p2p_runaway_analysis/p2p_runaway_classify_analysis_forshow/#_9", 
            "text": "\u91c7\u7528\u76f8\u5173\u7cfb\u6570\u77e9\u9635\u548c\u9012\u5f52\u7279\u5f81\u6d88\u9664\u6cd5(RFE)\u8bc4\u4f30\u7279\u5f81\u6307\u6807\u7684\u91cd\u8981\u6027\uff0c\u8fdb\u800c\u9009\u62e9\u5408\u9002\u7684\u6837\u54c1\u7279\u5f81\u8fdb\u884c\u5206\u7c7b\u6a21\u578b\u8bad\u7ec3\u3002  # \u6682\u4e14\u4e0d\u8003\u8651p2p\u7f51\u8d37\u5e73\u53f0\u540d\u79f0\u548c\u6210\u7acb\u65e5\u671f\ndata = dall.drop([ name ,  date ,], axis=1)  \ncols = data.columns.tolist()\ndata.head(3)   \n   \n     \n       \n       averageI \n       zhuzed \n       classification \n       touziq \n       netF \n       background \n       tuoguan \n       zhuz \n       shiz \n       datetime \n     \n   \n   \n     \n       0 \n       14.548392 \n       44.0 \n       0.0 \n       2.578413 \n       14.351883 \n       0 \n       0 \n       500 \n       0 \n       5.326389e+07 \n     \n     \n       1 \n       14.548392 \n       11.0 \n       0.0 \n       2.578413 \n       14.351883 \n       0 \n       0 \n       2000 \n       0 \n       3.054069e+07 \n     \n     \n       2 \n       12.460000 \n       33.0 \n       1.0 \n       1.172000 \n       16.500000 \n       0 \n       1 \n       3000 \n       2000 \n       1.331839e+08 \n     \n      # corrcoef\u51fd\u6570\u8ba1\u7b97\u76f8\u5173\u7cfb\u6570,\u66f4\u7cbe\u786e\u5730\u662f\u76f8\u5173\u7cfb\u6570\u77e9\u9635\ncm = np.corrcoef(data[cols].values.T)\nplt.figure(figsize=(10,8))\ng = sns.heatmap(cm, cbar=True, annot=True, \n            square=True, fmt= .2f , \n            annot_kws={'size': 15}, \n           yticklabels=cols,xticklabels=cols)\nplt.yticks(g.get_yticks(), fontproperties=font, fontsize=16)\nplt.xticks(g.get_xticks(), fontproperties=font, fontsize=16)  ([ matplotlib.axis.XTick at 0x7f4cbaab8c50 ,\n   matplotlib.axis.XTick at 0x7f4cbab0e050 ,\n   matplotlib.axis.XTick at 0x7f4cba9db890 ,\n   matplotlib.axis.XTick at 0x7f4cba9dbdd0 ,\n   matplotlib.axis.XTick at 0x7f4cba9e3310 ,\n   matplotlib.axis.XTick at 0x7f4cba9e39d0 ,\n   matplotlib.axis.XTick at 0x7f4cba9ec110 ,\n   matplotlib.axis.XTick at 0x7f4cba9ec810 ,\n   matplotlib.axis.XTick at 0x7f4cba9ecc90 ,\n   matplotlib.axis.XTick at 0x7f4cba9f93d0 ],\n  a list of 10 Text xticklabel objects )   \u4ece\u76f8\u5173\u7cfb\u6570\u77e9\u9635\uff0c\u6295\u8d44\u671f\u9650\u548c\u5e73\u5747\u5229\u7387\u4e0e\u5206\u7c7b\u6807\u7b7e\uff08\u662f\u5426\u8dd1\u8def\uff09\u6709\u8f83\u5f3a\u7684\u7ebf\u6027\u76f8\u5173\u6027\uff0c\u6ce8\u518c\u8d44\u672c\u7ebf\u6027\u76f8\u5173\u6027\u6700\u4f4e\uff0c\u5176\u4ed6\u7684\u7279\u5f81\u6709\u4e00\u5b9a\u7684\u7ebf\u6027\u76f8\u5173\u6027\uff0c\u4f46\u5f3a\u5ea6\u8f83\u5f31\u3002  from sklearn.model_selection import train_test_split\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.feature_selection import RFE\nfrom sklearn.linear_model import RandomizedLasso\nfrom sklearn.linear_model import RandomizedLogisticRegression\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.preprocessing import StandardScaler \nfrom sklearn.metrics import accuracy_score\nfrom sklearn.model_selection import learning_curve\nfrom sklearn.metrics import classification_report\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.model_selection import GridSearchCV  y = data.pop( classification )\nX = data\nfeatures = X.columns.values  X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=0)\nsc = StandardScaler()\nsc.fit(X_train)  # \u8ba1\u7b97\u5747\u503c\u548c\u65b9\u5dee\nX_train_std = sc.transform(X_train)  # \u8fdb\u884c\u6807\u51c6\u53d8\u6362\uff0c\u53d8\u6210\u6807\u51c6\u6b63\u6001\u5206\u5e03\nX_test_std = sc.transform(X_test)  \n\u9012\u5f52\u6d88\u9664\u7279\u5f81\u6cd5\u4f7f\u7528\u4e00\u4e2a\u57fa\u6a21\u578b\u6765\u8fdb\u884c\u591a\u8f6e\u8bad\u7ec3\uff0c\u6bcf\u8f6e\u8bad\u7ec3\u540e\uff0c\u9009\u51fa\u6700\u597d\u7684\u7684\u7279\u5f81\uff0c\n\u7136\u540e\u5728\u5269\u4f59\u7684\u7279\u5f81\u4e0a\u91cd\u590d\u8fd9\u4e2a\u8fc7\u7a0b\u3002\u6574\u4e2a\u8fc7\u7a0b\u4e2d\u7279\u5f81\u88ab\u6d88\u9664\u7684\u6b21\u5e8f\u5c31\u662f\u7279\u5f81\u7684\u6392\u5e8f\u3002\nRFE\u7684\u7a33\u5b9a\u6027\u5f88\u5927\u7a0b\u5ea6\u4e0a\u53d6\u51b3\u4e8e\u5728\u8fed\u4ee3\u7684\u65f6\u5019\u5e95\u5c42\u7528\u54ea\u79cd\u6a21\u578b\u3002\u53c2\u6570estimator\u4e3a\u57fa\u6a21\u578b\uff0c\n\u53c2\u6570n_features_to_select\u4e3a\u9009\u62e9\u7684\u7279\u5f81\u4e2a\u6570\u3002  \nestimator = LogisticRegression()\nselector = RFE(estimator, n_features_to_select=1, step=1)  \nselector = selector.fit(X_train_std, y_train) \nbag = sorted(zip(features, selector.ranking_, selector.support_),\n             key=lambda x: x[1])\nbag  [('background', 1, True),\n ('tuoguan', 2, False),\n ('shiz', 3, False),\n ('averageI', 4, False),\n ('netF', 5, False),\n ('zhuz', 6, False),\n ('touziq', 7, False),\n ('zhuzed', 8, False),\n ('datetime', 9, False)]  \n\u7a33\u5b9a\u6027\u9009\u62e9\u662f\u4e00\u79cd\u57fa\u4e8e\u4e8c\u6b21\u62bd\u6837\u548c\u9009\u62e9\u7b97\u6cd5\u76f8\u7ed3\u5408\u7684\u65b9\u6cd5\uff0c\u9009\u62e9\u7b97\u6cd5\u53ef\u4ee5\u662f\u56de\u5f52\u3001SVM\u6216\u5176\u4ed6\n\u7c7b\u4f3c\u7684\u65b9\u6cd5\u3002\u5b83\u7684\u4e3b\u8981\u601d\u60f3\u662f\u5728\u4e0d\u540c\u7684\u6570\u636e\u5b50\u96c6\u548c\u7279\u5f81\u5b50\u96c6\u4e0a\u8fd0\u884c\u7279\u5f81\u9009\u62e9\u7b97\u6cd5\uff0c\u4e0d\u65ad\u7684\u91cd\u590d\uff0c\n\u6700\u7ec8\u6c47\u603b\u7279\u5f81\u9009\u62e9\u7ed3\u679c\uff0c\u6bd4\u5982\u53ef\u4ee5\u7edf\u8ba1\u67d0\u4e2a\u7279\u5f81\u88ab\u8ba4\u4e3a\u662f\u91cd\u8981\u7279\u5f81\u7684\u9891\u7387\uff08\u88ab\u9009\u4e3a\u91cd\u8981\u7279\u5f81\u7684\n\u6b21\u6570\u9664\u4ee5\u5b83\u6240\u5728\u7684\u5b50\u96c6\u88ab\u6d4b\u8bd5\u7684\u6b21\u6570\uff09\u3002\u7406\u60f3\u60c5\u51b5\u4e0b\uff0c\u91cd\u8981\u7279\u5f81\u7684\u5f97\u5206\u4f1a\u63a5\u8fd1100%\u3002\u7a0d\u5fae\u5f31\u4e00\u70b9\n\u7684\u7279\u5f81\u5f97\u5206\u4f1a\u662f\u975e0\u7684\u6570\uff0c\u800c\u6700\u65e0\u7528\u7684\u7279\u5f81\u5f97\u5206\u5c06\u4f1a\u63a5\u8fd1\u4e8e0\u3002\nsklearn\u63d0\u4f9b\u4e86\u968f\u673alasso\u548c\u968f\u673a\u903b\u8f91\u56de\u5f52\u3002 \nrlg = RandomizedLogisticRegression()\nrlg.fit(X_train, y_train)\nbag_rr = sorted(zip(features, rlg.scores_), key=lambda x: x[1], reverse=True)\nbag_rr  [('averageI', 1.0),\n ('netF', 1.0),\n ('background', 1.0),\n ('tuoguan', 1.0),\n ('touziq', 0.56000000000000005),\n ('zhuzed', 0.53500000000000003),\n ('shiz', 0.40000000000000002),\n ('datetime', 0.23000000000000001),\n ('zhuz', 0.0)]  \u7efc\u5408\u76f8\u5173\u7cfb\u6570\u77e9\u9635\u3001\u9012\u5f52\u6d88\u9664\u7279\u5f81\u6cd5\u3001\u7a33\u5b9a\u6027\u9009\u62e9\u7684\u8bc4\u4f30\u7ed3\u679c\uff0c\u5e73\u5747\u5229\u7387\u3001\u7f51\u53cb\u8bc4\u5206\u3001\u5e73\u53f0\u80cc\u666f\u3001\u6709\u65e0\u6258\u7ba1\u56db\u4e2a\u7279\u5f81\u4e0ep2p\u7f51\u8d37\u5e73\u53f0\u7684\u662f\u5426\u8dd1\u8def\u7ebf\u6027\u76f8\u5173\u6027\u8f83\u5927\uff0c\u6211\u4eec\u5148\u91c7\u7528\u8fd9\u56db\u4e2a\u7279\u5f81\u8fdb\u884c\u5206\u7c7b\u6a21\u578b\u6784\u5efa\u3002", 
            "title": "\u6837\u672c\u7279\u5f81\u9009\u62e9"
        }, 
        {
            "location": "/data_analysis/p2p_runaway_analysis/p2p_runaway_classify_analysis_forshow/#_10", 
            "text": "# \u7528sklearn\u7684learning_curve\u5f97\u5230training_score\u548ccv_score\uff0c\u4f7f\u7528matplotlib\u753b\u51falearning curve\ndef plot_learning_curve(estimator, title, X, y, ylim=None, cv=5, n_jobs=1, \n                        train_sizes=np.linspace(.05, 1., 20), \n                        verbose=0, plot=True, text_=None):\n     \n    \u753b\u51fadata\u5728\u67d0\u6a21\u578b\u4e0a\u7684learning curve.\n    \u53c2\u6570\u89e3\u91ca\n    ----------\n    estimator : \u4f7f\u7528\u7684\u5206\u7c7b\u5668\u3002\n    title : \u56fe\u7684\u6807\u9898\u3002\n    X : \u8f93\u5165\u7684feature\uff0cnumpy\u7c7b\u578b\n    y : \u8f93\u5165\u7684target vector\n    ylim : tuple\u683c\u5f0f\u7684(ymin, ymax), \u8bbe\u5b9a\u56fe\u50cf\u4e2d\u7eb5\u5750\u6807\u7684\u6700\u4f4e\u70b9\u548c\u6700\u9ad8\u70b9\n    cv : \u505across-validation\u7684\u65f6\u5019\uff0c\u6570\u636e\u5206\u6210\u7684\u4efd\u6570\uff0c\u5176\u4e2d\u4e00\u4efd\u4f5c\u4e3acv\u96c6\uff0c\u5176\u4f59n-1\u4efd\u4f5c\u4e3atraining(\u9ed8\u8ba4\u4e3a3\u4efd)\n    n_jobs : \u5e76\u884c\u7684\u7684\u4efb\u52a1\u6570(\u9ed8\u8ba41)\n     \n    train_sizes, train_scores, test_scores = learning_curve(\n        estimator, X, y, cv=cv, n_jobs=n_jobs, train_sizes=train_sizes, verbose=verbose)\n    train_scores_mean = np.mean(train_scores, axis=1)  # train_scores\u662f\u4e00\u4e2a\uff12\uff10\u884c\uff15\u5217\u7684ndarry,20\u4e3a\u4ece\u6837\u672c\u53d6\u7684\u4e0d\u540c\u6bd4\u4f8b\u7684\u6837\u672c\u6570\u636e\u4f5c\u4e3aX, \u800c\uff15\u8868\u793a\uff15\u6b21\u4ea4\u53c9\u9a8c\u8bc1\n    train_scores_std = np.std(train_scores, axis=1)\n    test_scores_mean = np.mean(test_scores, axis=1)\n    test_scores_std = np.std(test_scores, axis=1)\n\n    if plot:\n        plt.figure(figsize=(7,7))\n        plt.title(title)\n        if ylim is not None:\n            plt.ylim(*ylim)\n        plt.xlabel( samples )\n        plt.ylabel( scores )\n        # plt.gca().invert_yaxis() \u4f8b\u5982y\u8f74\u5750\u68073000-10000\uff0c\u8c03\u6574\u4e3a10000-3000\u6765\u663e\u793a\n        plt.fill_between(train_sizes, train_scores_mean - train_scores_std, train_scores_mean + train_scores_std, \n                         alpha=0.2, color= b )\n        plt.fill_between(train_sizes, test_scores_mean - test_scores_std, test_scores_mean + test_scores_std, \n                         alpha=0.2, color= r )\n        plt.plot(train_sizes, train_scores_mean, '^-', color= blue , label= train score )\n        plt.plot(train_sizes, test_scores_mean, 'v-', color= red , label= cross_validation score )\n        plt.legend(loc= best )\n        plt.gca().yaxis.grid(True, linestyle =  -. )\n        plt.gca().xaxis.grid(True, linestyle =  -. )   \n        plt.text(500, 0.754, text_, size = 12, color =  k , weight =  light , bbox = dict(facecolor =  purple , alpha = 0.3))   \n        # plt.text(60, .025, r'$\\mu=100,\\ \\sigma=15$')\n        plt.show()", 
            "title": "\u5206\u7c7b\u6a21\u578b\u6784\u5efa"
        }, 
        {
            "location": "/data_analysis/p2p_runaway_analysis/p2p_runaway_classify_analysis_forshow/#logisticreregession", 
            "text": "def evaluate_feature(df, feature_add, C_):\n     \u8bc4\u4f30\u589e\u52a0\u65b0\u7684\u7279\u5f81\u7684\u5206\u7c7b\u51c6\u786e\u7387 \n    raw_feature = ['averageI','classification','netF',\n                   'background','tuoguan']\n    raw_feature.extend(feature_add) if type(feature_add) == list else raw_feature.append(feature_add)\n    data = df[raw_feature]\n    y = data.pop( classification )\n    X = data\n    for i in X.columns.tolist():\n        if i in [ background ,  tuoguan ,  zhuzed ]:\n            dummies_ = pd.get_dummies(X[i], prefix=i)\n            X_dummies = pd.concat([X, dummies_], axis=1)\n            X_dummies.drop([i], axis=1, inplace=True)\n\n    if  touziq  in X_dummies.columns.tolist():\n            X_dummies[ touziq ] = X_dummies[ touziq ].astype(np.int)\n    X_train, X_test, y_train, y_test = train_test_split(X_dummies, y, test_size=0.2, random_state=0)\n    lr = LogisticRegression(C=C_, penalty= l2 , random_state=0, tol=1e-6)\n    lr.fit(X_train, y_train)\n    y_pred = lr.predict(X_test)\n    num_test = len(y_test)\n    result = (num_test - (y_test != y_pred).sum()) / float(num_test) * 100\n    feature_str =  add feature:  +  , .join(feature_add) if feature_add else      \n    content =  {2} accuracy_score:{0} C:{1} .format(np.round(result, 4), C_, feature_str)\n    plot_learning_curve(lr,  learning curve , X_train, y_train, text_=content)      for i in [None,  touziq ,  zhuzed ]:\n    add_feature = []\n    if i is not None:\n        add_feature.append(i)\n    evaluate_feature(dall, add_feature, 0.5)         for C in [0.01, 0.05, 0.1, 0.5, 1]:\n    evaluate_feature(dall, [ touziq ,  zhuzed ], C)       \u5f53\u9009\u62e9\u5e73\u5747\u5e74\u5316\u5229\u7387\u3001\u7f51\u53cb\u8bc4\u5206\u3001\u8d44\u91d1\u6258\u7ba1\u3001\u5e73\u53f0\u8d44\u8d28\u56db\u4e2a\u7279\u5f81\uff0c\u6b63\u5219\u5316\u7cfb\u6570\u4e3a0.5\u5019\uff0cLogisticRegression\u7684\u5206\u7c7b\u51c6\u786e\u7387\u4e3a76.5%\uff0c\u5f53\u589e\u52a0\u6295\u8d44\u671f\u9650\u7684\u5206\u7c7b\u7279\u5f81\u65f6\u5019\uff0c\u51c6\u786e\u7387\u7565\u6709\u63d0\u9ad8\u8fbe\u523077.1%\uff0c\u5f53\u589e\u52a0\u6ce8\u518c\u5730\u7684\u5206\u7c7b\u7279\u5f81\u65f6\u5019\uff0c\u51c6\u786e\u7387\u53cd\u800c\u964d\u4f4e\uff0c\u8fd9\u53ef\u80fd\u4e0e\u5904\u7406\u6ce8\u518c\u5730\u7684\u54d1\u53d8\u91cf\u6ca1\u6709\u8fdb\u4e00\u6b65\u8fdb\u884c\u6570\u91cf\u4e0a\u7684\u9650\u5236\u6709\u5173\u3002\u5728\u6b64\uff0c\u5148\u9009\u53d6\u5e73\u5747\u5e74\u5316\u5229\u7387\u3001\u7f51\u53cb\u8bc4\u5206\u3001\u8d44\u91d1\u6258\u7ba1\u3001\u5e73\u53f0\u8d44\u8d28\u3001\u6ce8\u518c\u5730\u4e3a\u5206\u7c7b\u7279\u5f81\u3002", 
            "title": "LogisticReregession \u5206\u7c7b\u6a21\u578b\u6784\u5efa"
        }, 
        {
            "location": "/data_analysis/p2p_runaway_analysis/p2p_runaway_classify_analysis_forshow/#_11", 
            "text": "dall.head(2)   \n   \n     \n       \n       name \n       averageI \n       date \n       zhuzed \n       classification \n       touziq \n       netF \n       background \n       tuoguan \n       zhuz \n       shiz \n       datetime \n     \n   \n   \n     \n       0 \n       108\u8d37 \n       14.548392 \n       2015-02-26 \n       44.0 \n       0.0 \n       2.578413 \n       14.351883 \n       0 \n       0 \n       500 \n       0 \n       5.326389e+07 \n     \n     \n       1 \n       2025\u91d1\u878d \n       14.548392 \n       2015-11-16 \n       11.0 \n       0.0 \n       2.578413 \n       14.351883 \n       0 \n       0 \n       2000 \n       0 \n       3.054069e+07 \n     \n      def randomforest_classifier(df):   \n    feature = ['averageI','classification','netF',\n                   'background','tuoguan','touziq']\n    data = df[feature]\n    y = data.pop( classification )\n    X = data\n    for i in X.columns.tolist():\n        if i in [ background ,  tuoguan ,  zhuzed ]:\n            dummies_ = pd.get_dummies(X[i], prefix=i)\n            X_dummies = pd.concat([X, dummies_], axis=1)\n            X_dummies.drop([i], axis=1, inplace=True)\n\n    if  touziq  in X_dummies.columns.tolist():\n            X_dummies[ touziq ] = X_dummies[ touziq ].astype(np.int)\n    X_train, X_test, y_train, y_test = train_test_split(X_dummies, y, test_size=0.2, random_state=0)\n\n    pipeline = Pipeline([('clf', RandomForestClassifier(criterion='gini'))])\n    parameters = {\n                  'clf__n_estimators': (40, 80),\n                  'clf__max_depth': (15, 20, 30),\n                  'clf__min_samples_split': (10,20,50),\n                  'clf__min_samples_leaf': (2,5,15),\n                  'clf__max_features': (2,5)\n                  }\n    grid_search = GridSearchCV(pipeline, parameters, n_jobs=2, verbose=1, scoring='accuracy')\n    grid_search.fit(X_train, y_train)\n    accuracy_score =  best_accuray_score: {} .format(grid_search.best_score_) \n    best_parameters = grid_search.best_estimator_.get_params()\n    parameters = sorted(parameters.keys())\n    #print  \\t%s: %r  % (param_name, best_parameters[param_name])\n    predictions = grid_search.predict(X_test)\n    print '\\t%s\\t%s\\t%s\\t%s' % ('\u5206\u7c7b','\u7cbe\u786e\u7387','\u53ec\u56de\u7387','f1-score')\n    evaluate_result = classification_report(y_test, predictions)\n    #print '0 \uff1ap2p\u5e73\u53f0\u8dd1\u8def(\u6216\u51fa\u73b0\u5176\u4ed6\u975e\u6b63\u5e38\u8fd0\u8425\u7684\u95ee\u9898)' \n    #print '1 \uff1a\u6b63\u5e38\u8fd0\u8425' \n    return accuracy_score, best_parameters, evaluate_result      accuracy_score, best_params, evaluate_result = randomforest_classifier(dall)  accuracy_score  'best_accuray_score: 0.825738125802'  best_params \n{'clf': RandomForestClassifier(bootstrap=True, class_weight=None, criterion='gini',\n             max_depth=30, max_features=5, max_leaf_nodes=None,\n             min_impurity_split=1e-07, min_samples_leaf=2,\n             min_samples_split=50, min_weight_fraction_leaf=0.0,\n             n_estimators=80, n_jobs=1, oob_score=False, random_state=None,\n             verbose=0, warm_start=False),   # \u4f7f\u7528gridsearch\u7684\u6700\u4f73\u53c2\u6570\u8fdb\u884crandomforestclssification,\u5206\u6790learning curve\nfeature = ['averageI','classification','netF','background','tuoguan','touziq']\ndata = dall[feature]\ny = data.pop( classification )\nX = data\nfor i in X.columns.tolist():\n    if i in [ background ,  tuoguan ,  zhuzed ]:\n        dummies_ = pd.get_dummies(X[i], prefix=i)\n        X_dummies = pd.concat([X, dummies_], axis=1)\n        X_dummies.drop([i], axis=1, inplace=True)\n\nif  touziq  in X_dummies.columns.tolist():\n        X_dummies[ touziq ] = X_dummies[ touziq ].astype(np.int)\nX_train, X_test, y_train, y_test = train_test_split(X_dummies, y, test_size=0.2, random_state=0)\nrsl = RandomForestClassifier(n_estimators=80, criterion='gini', max_depth=30, min_samples_split=50, min_samples_leaf=2,\n                             max_features=5)  \nrsl.fit(X_train, y_train)\ny_pred = rsl.predict(X_test)\nnum_test = len(y_test)\nresult = (num_test - (y_test != y_pred).sum()) / float(num_test) * 100\nplot_learning_curve(rsl,  learning curve , X_train, y_train, text_=result)        \nresult   80.616174582798465  RandomForestClassifier\u7684\u8bad\u7ec3\u96c6\u7684\u6700\u9ad8\u5206\u7c7b\u51c6\u786e\u7387\u4e3a82.5%\uff0c\u4f46\u4ecelearning curve\u80fd\u770b\u51fa\u5b58\u5728\u7740\u660e\u663e\u7684\u8fc7\u62df\u5408\u73b0\u8c61\uff0c\u6545\u6d4b\u8bd5\u96c6\u7684\u51c6\u786e\u7387\u53ea\u670980.6%\uff0c\u7565\u9ad8\u4e8eLogisticRegression\u7684\u5206\u7c7b\u6548\u679c\u3002", 
            "title": "\u968f\u673a\u68ee\u6797\u5206\u7c7b\u6a21\u578b\u6784\u5efa"
        }, 
        {
            "location": "/data_analysis/p2p_runaway_analysis/p2p_runaway_classify_analysis_forshow/#_12", 
            "text": "\u901a\u8fc7LogistciRegression\u548cRandomForestClassifier\u5efa\u7acb\u7684\u5206\u7c7b\u6a21\u578b\u7684\u5206\u7c7b\u6548\u679c\u5747\u8f83\u5dee\u3002\u9020\u6210\u4ee5\u4e0a\u539f\u56e0\u8ddf\u6570\u636e\u6e90\u6709\u4e00\u5b9a\u5173\u7cfb\u3002\u6709\u5173p2p\u7f51\u8d37\u5e73\u53f0\u7684\u8bc4\u4f30\u6307\u6807\u6709\u5f88\u591a\uff0c\u672c\u62a5\u544a\u53ea\u9009\u62e9\u4e865\u4e2a\u7279\u5f81\u7ed9\u673a\u5668\u7b97\u6cd5\u5b66\u4e60\u548c\u8bad\u7ec3\uff0c\u5176\u4ed6\u6307\u6807\u5982\u7f51\u8d37\u5e73\u53f0\u7684\u5de5\u5546\u6ce8\u518c\u4fe1\u606f\u3001\u7f51\u7ad9ICP\u3001\u878d\u8d44\u53ca\u98ce\u6295\u4fe1\u606f\u7b49\u6682\u6ca1\u8003\u8651\u3002\u6b64\u5916\uff0c\u7531\u4e8e\u6570\u636e\u7684\u7f3a\u5931\u503c\u8f83\u591a\uff0c\u6bd4\u5982\u5e73\u5747\u5229\u7387\u8fd9\u4e00\u4e2a\u6307\u6807\uff0c\u5728\u5206\u6790\u76843895\u5bb6p2p\u5e73\u53f0\u4e2d\u67091695\u5bb6\u65e0\u6b64\u9879\u6570\u636e\uff0c\u8fd9\u4e9b\u90fd\u4f1a\u5f71\u54cd\u5230\u5206\u7c7b\u6a21\u578b\u7684\u5206\u7c7b\u53ca\u9884\u6d4b\u6548\u679c\u3002  p2p\u5e73\u53f0\u8dd1\u8def\u539f\u56e0\u53ef\u7b80\u5355\u5730\u5206\u4e3a\u8bc8\u9a97\u7c7b\u548c\u7ecf\u8425\u4e0d\u5584\u7c7b\u3002\u5e9e\u6c0f\u9a97\u5c40\u3001\u6076\u610f\u81ea\u878d\u7b49\u5c5e\u4e8e\u8bc8\u9a97\u7c7b\u3002\u7531\u4e8e\u7f51\u8d37\u5e73\u53f0\u7ecf\u8425\u8fc7\u7a0b\u7684\u6210\u672c\u504f\u9ad8\uff0c\u98ce\u63a7\u4e0d\u8fc7\u5173\u800c\u5bfc\u81f4\u7684\u7ecf\u8425\u4e0d\u5584\uff0c\u5f15\u8d77\u8fd0\u8425\u5e73\u53f0\u8d44\u91d1\u94fe\u65ad\u88c2\uff0c\u6700\u7ec8\u5173\u95e8\u8dd1\u8def\u3002\u4e00\u822c\u800c\u8a00\uff0c\u8dd1\u8def\u5e73\u53f0\u6709\u4e00\u4e9b\u7279\u70b9\uff0c\u5982\u8d44\u4ea7\u9879\u76ee\u4fe1\u606f\u62ab\u9732\u4e0d\u660e\uff0c\u98ce\u63a7\u4e0d\u8fbe\u6807\u6216\u6839\u672c\u65e0\u98ce\u63a7\u4e00\u73af\uff0c\u79d2\u6807\u3001\u5929\u6807\u3001\u9ad8\u606f\u6807\u6bd4\u4f8b\u9ad8\uff0c\u6295\u8d44\u8005\u7528\u6237\u4f53\u9a8c\u5ea6\u5dee\u7b49\u3002  \u672c\u6587\u9996\u5148\u5bf9p2p\u7f51\u8d37\u5e73\u53f0\u7684\u7279\u5f81\u4e0e\u662f\u5426\u8dd1\u8def\u7684\u5173\u7cfb\u8fdb\u884c\u5b9a\u6027\u5206\u6790\uff0c\u968f\u540e\u5c1d\u8bd5\u56fe\u901a\u8fc7sklearn\u63d0\u4f9b\u7684\u4e24\u79cd\u5206\u7c7b\u7b97\u6cd5\u5bf9p2p\u7f51\u8d37\u5e73\u53f0\u7684\u8dd1\u8def\u73b0\u8c61\u8fdb\u884c\u5206\u7c7b\u9884\u6d4b\uff0c\u6548\u679c\u4e00\u822c\uff08\u51c6\u786e\u73870.8\uff09\uff0c\u5176\u539f\u56e0\u5728\u6837\u672c\u6570\u636e\u7f3a\u5931\u8f83\u591a\u53ca\u6837\u672c\u7279\u5f81\u4e0d\u5168\u9762\u3002\u56e0\u6b64\uff0c\u8981\u5bf9\u7f51\u8d37\u5e73\u53f0\u7684\u8dd1\u8def\u4e0e\u5426\u8fdb\u884c\u66f4\u7cbe\u786e\u7684\u9884\u6d4b\uff0c\u5c31\u8981\u66f4\u8fdb\u4e00\u6b65\u5730\u91c7\u53d6\u4e00\u4e9b\u63aa\u65bd\u8003\u5bdf\u7f51\u8d37\u5e73\u53f0\uff0c\u6bd4\u5982\uff0c\u5bf9\u7f51\u8d37\u5e73\u53f0\u7684\u76f8\u5173\u5de5\u5546\u4fe1\u606f\u8fdb\u884c\u67e5\u8be2\u548c\u786e\u8ba4\uff0c\u67e5\u8be2\u7f51\u8d37\u5e73\u53f0\u662f\u5426\u63a5\u53d7\u8fc7\u98ce\u6295\uff0c\u53ef\u53c2\u8003\u7b2c\u4e09\u65b9\u7f51\u8d37\u673a\u6784\u7684\u8bc4\u7ea7\u6570\u636e\uff0c\u5bf9\u5e73\u53f0\u8fdb\u884c\u5b9e\u5730\u8003\u5bdf\u7b49\u7b49\u3002\u53ea\u6709\u5bf9\u7f51\u8d37\u5e73\u53f0\u8fdb\u884c\u5168\u9762\u7684\u8003\u5bdf\u548c\u5224\u65ad\u624d\u80fd\u6700\u5927\u5730\u964d\u4f4e\u7f51\u8d37\u6295\u8d44\u98ce\u9669\u3002", 
            "title": "\u603b\u7ed3"
        }, 
        {
            "location": "/machine_learning/logistic_regression/logistic regression_forshow/", 
            "text": "\\mathbb{\u903b\u8f91\u56de\u5f52\u4e0epython \u4ee3\u7801\u5b9e\u73b0}\n\n\n\n\n\u903b\u8f91\u56de\u5f52(Logistic Regression, LR)\u53c8\u79f0\u4e3a\u903b\u8f91\u56de\u5f52\u5206\u6790\uff0c\u662f\u5206\u7c7b\u548c\u9884\u6d4b\u7b97\u6cd5\u4e2d\u7684\u4e00\u79cd\u3002\u901a\u8fc7\u5386\u53f2\u6570\u636e\u7684\u8868\u73b0\u5bf9\u672a\u6765\u7ed3\u679c\u53d1\u751f\u7684\u6982\u7387\u8fdb\u884c\u9884\u6d4b\u3002\n\n\n\u4f8b\u5982\uff0c\u6211\u4eec\u53ef\u4ee5\u5c06\u5546\u54c1\u7684\u8d2d\u4e70\u6982\u7387\u8bbe\u7f6e\u4e3a\u56e0\u53d8\u91cf\uff0c\u5c06\u7528\u6237\u7684\u7279\u5f81\u5c5e\u6027\uff0c\u4f8b\u5982\u6027\u522b\uff0c\u5e74\u9f84\uff0c\u6ce8\u518c\u65f6\u95f4\u7b49\u8bbe\u7f6e\u4e3a\u81ea\u53d8\u91cf\u3002\u6839\u636e\u7279\u5f81\u5c5e\u6027\u9884\u6d4b\u8d2d\u4e70\u7684\u6982\u7387\u3002\u903b\u8f91\u56de\u5f52\u4e0e\u7ebf\u6027\u56de\u5f52\u5206\u6790\uff08Linear Regression\uff09\u6709\u5f88\u591a\u76f8\u4f3c\u4e4b\u5904\uff0c\u4e0b\u9762\u5148\u6765\u770b\u4e0b\u7ebf\u6027\u56de\u5f52\u5206\u6790\n\n\n\u7ebf\u6027\u56de\u5f52\u5206\u6790\n\n\n\u9996\u5148\uff0c\u6e29\u6545\u4e00\u4e0b\u76f4\u7ebf\u65b9\u7a0b\n\n\n\n\n\n y = ax + b \n\n\n\n\n\u81ea\u53d8\u91cfx\u4e58\u4ee5\u659c\u7387a\u518d\u52a0\u4e0a\u622a\u8dddb\u5c31\u5f97\u5230\u4e86\u56e0\u53d8\u91cfy\n\n\n\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\n%matplotlib inline\n# from matplotlib.font_manager import FontProperties\nx = np.arange(-10, 10)\na, b = 2, 5\nfig, ax = plt.subplots(figsize=(8, 8))\n# \u9690\u85cf\u4e0a\u8fb9\u548c\u53f3\u8fb9\nax.spines[\ntop\n].set_color(\nnone\n) \nax.spines[\nright\n].set_color(\nnone\n) \n# \u79fb\u52a8\u53e6\u5916\u4e24\u4e2a\u8f74\nax.xaxis.set_ticks_position(\nbottom\n)\nax.spines['bottom'].set_position(('data', 0))\nax.yaxis.set_ticks_position('left')\nax.spines['left'].set_position(('data', 0))\nax.plot(x, a*x+b, linewidth=2, label=\ny=2x+5\n)\nax.legend()\nax.grid(True, linestyle=\n:\n, linewidth=1.5, alpha=0.8)\n\n\n\n\n\n\n\u4e00\u5143\u4e00\u6b21\u65b9\u7a0b\n \n\\quad y \\ = \\ ax \\ + \\ b \\quad \u4f8b\u5982\uff1a\\ y = 2x + 5\n\n\n\n\n\u53ef\u4ee5\u5199\u6210\uff1a  \n\\quad y \\ = \\ w_0 \\times x_0 \\ + \\ w_1 \\times x_1 \\quad \u5176\u4e2dw_0 =5, \\ x_0=1, \\ w_1=2, \\ x_1=x\n\n\n\n\n\u4e8c\u5143\u4e00\u6b21\u65b9\u7a0b\n \n\\quad y \\ = \\ ax \\ + \\ bx \\ + \\ c \n\n\n\n\n\u53ef\u4ee5\u5199\u6210\uff1a  \n\\quad y \\ = \\ w_0 \\times x_0 \\ + \\ w_1 \\times x_1 \\ + \\ w_2 \\times x_2 \\quad \u5176\u4e2dx_0=1, \\ w_0=c\n\n\n\n\nn\u5143\u4e00\u6b21\u65b9\u7a0b\u8868\u8fbe\u5f0f\u53ca\u77e9\u9635\u8868\u793a\uff1a\n\n\n\n\ny \\ = \\ w_0\\times x_0 + w_1 \\times x_1 + w_2 \\times x_2 + \\cdot\\cdot\\cdot \\ w_n \\times x_n \\ \n\n\n\n\n\n\n=\\underbrace{\\begin{bmatrix} w_0 & w_1 & w_2 & \\cdots\\ &w_n \\end{bmatrix}}_{\u6743\u91cd\u7cfb\u6570\u5411\u91cf\\bf w} {\\ \\bullet}  \\underbrace{\\begin{bmatrix} x_{0} \\\\ x_{1} \\\\ x_{2} \\\\ \\vdots \\\\ x_n \\end{bmatrix}}_{\u6837\u672c\u7279\u5f81\u77e9\u9635\\bf x}\n\n\n\n\n\n\n=\\ {\\bf w^T x} \\quad {\u5176\u4e2dx_0=1}\n\n\n\n\n\u56de\u5f52\u5206\u6790\u7528\u6765\u63cf\u8ff0\u81ea\u53d8\u91cfx\u548c\u56e0\u53d8\u91cfY\u4e4b\u95f4\u7684\u5173\u7cfb\uff0c\u6216\u8005\u8bf4\u81ea\u53d8\u91cfX\u5bf9\u56e0\u53d8\u91cfY\u7684\u5f71\u54cd\u7a0b\u5ea6\uff0c\u5e76\u5bf9\u56e0\u53d8\u91cfY\u8fdb\u884c\u9884\u6d4b\u3002\n \n\u5176\u4e2d\u56e0\u53d8\u91cf(y)\u662f\u6211\u4eec\u5e0c\u671b\u83b7\u5f97\u7684\u7ed3\u679c\uff0c\u81ea\u53d8\u91cf(x)\u662f\u5f71\u54cd\u7ed3\u679c\u7684\u6f5c\u5728\u56e0\u7d20\uff0c\u81ea\u53d8\u91cf\u53ef\u4ee5\u6709\u4e00\u4e2a\uff0c\u4e5f\u53ef\u4ee5\u6709\u591a\u4e2a\u3002\u4e00\u4e2a\u81ea\u53d8\u91cf\u7684\u53eb\u505a\u4e00\u5143\u56de\u5f52\u5206\u6790\uff0c\u8d85\u8fc7\u4e00\u4e2a\u81ea\u53d8\u91cf\u7684\u53eb\u505a\u591a\u5143\u56de\u5f52\u5206\u6790\u3002\n\n\n\u56de\u5f52\u5206\u6790\u5176\u5b9e\u5c31\u662f\u5bf9\u5df2\u77e5\u516c\u5f0f\u7684\u672a\u77e5\u53c2\u6570\u8fdb\u884c\u4f30\u8ba1\uff0c\u5728\u7ed9\u5b9a\u8bad\u7ec3\u6837\u672c\u70b9\u548c\u5df2\u77e5\u7684\u516c\u5f0f\u540e\uff0c\u53bb\u6c42\u89e3\u4e00\u4e2a\u6216\u591a\u4e2a\u672a\u77e5\u53c2\u6570\uff0c\u76f4\u5230\u627e\u5230\u90a3\u4e2a\u6700\u7b26\u5408\u6837\u672c\u70b9\u5206\u5e03\u7684\u53c2\u6570\uff08\u6216\u53c2\u6570\u7ec4\u5408\uff09\u3002\u6ce8\u610f\uff0c\u56de\u5f52\u7684\u524d\u63d0\u662f\u516c\u5f0f\u5df2\u77e5\uff0c\u5426\u5219\u56de\u5f52\u65e0\u6cd5\u8fdb\u884c\u3002\u6839\u636e\u516c\u5f0f\u7684\u4e0d\u540c\uff0c\u56de\u5f52\u5206\u4e3a\u7ebf\u6027\u56de\u5f52\u548c\u975e\u7ebf\u6027\u56de\u5f52\u3002\u7ebf\u6027\u56de\u5f52\u4e2d\u516c\u5f0f\u90fd\u662f\u201c\u4e00\u6b21\u201d\u7684\uff08\u4e00\u5143\u4e00\u6b21\u65b9\u7a0b\uff0c\u4e8c\u5143\u4e00\u6b21\u65b9\u7a0b...\uff09\uff0c\u800c\u975e\u7ebf\u6027\u5219\u53ef\u4ee5\u6709\u5404\u79cd\u5f62\u5f0f\uff08N\u5143N\u6b21\u65b9\u7a0b\uff0clog\u65b9\u7a0b...\uff09\u3002\n\n\n\u4e0b\u9762\u662f\u4e00\u7ec4\u5e7f\u544a\u8d39\u7528\u548c\u66dd\u5149\u6b21\u6570\u7684\u6570\u636e\uff0c\u8d39\u7528\u548c\u66dd\u5149\u6b21\u6570\u4e00\u4e00\u5bf9\u5e94\u3002\u5176\u4e2d\u66dd\u5149\u6b21\u6570\u662f\u6211\u4eec\u5e0c\u671b\u77e5\u9053\u7684\u7ed3\u679c\uff0c\u8d39\u7528\u662f\u5f71\u54cd\u66dd\u5149\u6b21\u6570\u7684\u56e0\u7d20\uff0c\u6211\u4eec\u5c06\u8d39\u7528\u8bbe\u7f6e\u4e3a\u81ea\u53d8\u91cfX\uff0c\u5c06\u66dd\u5149\u6b21\u6570\u8bbe\u7f6e\u4e3a\u56e0\u53d8\u91cfY\uff0c\u901a\u8fc7\u4e00\u5143\u7ebf\u6027\u56de\u5f52\u65b9\u7a0b\u548c\u5224\u5b9a\u7cfb\u6570\u53ef\u4ee5\u53d1\u73b0\u8d39\u7528(X)\u5bf9\u66dd\u5149\u6b21\u6570(Y)\u7684\u5f71\u54cd\u3002\n\n\n\n\n\n\u4ee5\u4e0b\u4e3a\u4e00\u5143\u56de\u5f52\u7ebf\u6027\u65b9\u5f0f\u8868\u8fbe\u5f62\u5f0f\uff0c\n\\hat{y} \\ = \\ w_0 \\ + \\ w_1 x_1\n\n\n\n\n\u5176\u4e2d\n\\bf{\\hat{y}}\n\u662f\u9884\u6d4b\u7684\u56e0\u53d8\u91cf\uff0c\n\\bf{x_1}\n\u662f\u81ea\u53d8\u91cf\n\\bf{X}\n\u7684\u4e00\u4e2a\u5177\u4f53\u503c\uff0c\u6211\u4eec\u53ea\u9700\u6c42\u51fa\u622a\u8ddd\nw_0\n\u548c\u659c\u7387\nw_1\n\u5c31\u53ef\u4ee5\u83b7\u5f97\u8d39\u7528\u548c\u66dd\u5149\u6b21\u6570\u4e4b\u95f4\u7684\u5173\u7cfb\uff0c\u5c31\u53ef\u4ee5\u5bf9\u66dd\u5149\u6b21\u6570\u8fdb\u884c\u9884\u6d4b\u3002\u901a\u5e38\uff0c\u53ef\u4ee5\u7528\u7528\u6700\u5c0f\u4e8c\u4e58\u6cd5\u6765\u8ba1\u7b97\u622a\u8dddb0\u548c\u659c\u7387b1\u3002\u6700\u5c0f\u4e8c\u4e58\u6cd5\u901a\u8fc7\u6700\u5c0f\u5316\u8bef\u5dee\u7684\u5e73\u65b9\u548c\u5bfb\u627e\u6570\u636e\u7684\u6700\u4f73\u51fd\u6570\u5339\u914d\u3002\n\n\n\n\n\u5173\u4e8e\u51e0\u4e2a\u5c0f\u4f8b\u5b50\u53ef\u4ee5\u70b9\u51fb\n\u8fd9\u91cc\n\u548c\n\u8fd9\u91cc\n\n\n\u903b\u8f91\u56de\u5f52\uff08Logistic Regression\uff09\n\n\nLogistic Regression \u662f\u7ebf\u6027\u56de\u5f52\u7684\u4e00\u79cd\uff0c\u662f\u5de5\u4e1a\u754c\u6bd4\u8f83\u5e38\u7528\u7684\u6709\u76d1\u7763\u5f0f\u7684\u5206\u7c7b\u673a\u5668\u5b66\u4e60\u7b97\u6cd5\uff0c\u7528\u4e8e\u4f30\u8ba1\u67d0\u79cd\u4e8b\u7269\u7684\u53ef\u80fd\u6027\uff0c\u6bd4\u5982\uff0c\u7528\u4e8e\u5e7f\u544a\u9884\u6d4b\uff08ctr\u9884\u4f30\uff09\uff0c\u6839\u636e\u4e0d\u540c\u5e7f\u544a\u7684\u70b9\u51fb\u7684\u5386\u53f2\u6570\u636e\uff0c\u6765\u9884\u6d4b\u67d0\u5e7f\u544a\u7684\u70b9\u51fb\u7387\u7684\u53ef\u80fd\u6027\uff0c\u7136\u540e\uff0c\u628a\u6700\u53ef\u80fd\u88ab\u7528\u6237\u70b9\u51fb\u7684\u5e7f\u544a\u6446\u5728\u7528\u6237\u80fd\u770b\u5230\u7684\u5730\u65b9\uff0c\u5f53\u7528\u6237\u70b9\u51fb\u4e86\u8be5\u5e7f\u544a\uff0c\u7f51\u7ad9\u5c31\u6709\u94b1\u6536\u4e86\u3002\n\n\n\u73b0\u5b9e\u751f\u6d3b\u4e2d\uff0c\u6211\u4eec\u4e0d\u4ec5\u9700\u8981\u56de\u5f52\u4ea7\u751f\u4e00\u4e2a\u53ef\u4ee5\u6709\u5f88\u591a\u53d8\u5316\u7684\u56e0\u53d8\u91cf\uff0c\u6709\u65f6\u8fd8\u9700\u8981\u4ea7\u751f\u7c7b\u4f3c\u6982\u7387\u503c\u76840~1\u4e4b\u95f4\u7684\u6570\u503c\uff08\u6bd4\u5982\u67d0\u4e00\u53cc\u978b\u5b50\u4eca\u5929\u80fd\u5426\u5356\u51fa\u53bb\uff1f\u6216\u8005\u67d0\u4e00\u4e2a\u5e7f\u544a\u80fd\u5426\u88ab\u7528\u6237\u70b9\u51fb? \u6211\u4eec\u5e0c\u671b\u5f97\u5230\u8fd9\u4e2a\u6570\u503c\u6765\u8f85\u52a9\u51b3\u7b56\u978b\u5b50\u4e0a\u4e0d\u4e0a\u67b6\uff0c\u4ee5\u53ca\u5e7f\u544a\u5c55\u4e0d\u5c55\u793a\uff09\u3002\u8fd9\u4e2a\u6570\u503c\u5fc5\u987b\u662f0~1\u4e4b\u95f4\uff0c\u4f46\u663e\u7136\u7ebf\u6027\u56de\u5f52\u4e0d\u6ee1\u8db3\u8fd9\u4e2a\u533a\u95f4\u8981\u6c42\u3002\u4e8e\u662f\u5f15\u5165\u4e86Logistic\u65b9\u7a0b\uff0c\u6765\u505a\u5f52\u4e00\u5316\uff0c\u5373\u4ea7\u751f\u4e86\u903b\u8f91\u56de\u5f52\u3002\n\n\n\u5728\u4ecb\u7ecd\u903b\u8f91\u56de\u5f52\u4e4b\u524d\uff0c\u6211\u4eec\u5148\u770b\u770b\u4e00\u4e2a\u5c0f\u4f8b\u5b50\uff1a\n\u9e22\u5c3e\u82b1\u6570\u636e\u96c6\u5305\u62ec\u4e09\u79cd\u9e22\u5c3e\u82b1\uff0c\u5c71\u9e22\u5c3e\u82b1(Iris Setosa)\u3001\u53d8\u8272\u9e22\u5c3e\u82b1(Iris\u3000Versicolor)\u3001\u7ef4\u5409\u5c3c\u4e9a\u9e22\u5c3e\u82b1(Iris Virginica)\n\n\n\u641e\u6e05\u51e0\u4e2a\u6982\u5ff5\uff1a\n\n\n\n\u6837\u672c\n\n\n\u7279\u5f81\n\n\n\u5206\u7c7b\u6807\u7b7e\n\n\n\u8bad\u7ec3\u96c6(train)\n\n\n\u6d4b\u8bd5\u96c6(test)\n\n\n\n\u83ba(dai)\u5c3e\u82b1\u6570\u636e\u96c6\uff1a\n150\u884c\\ \\times \\ 5\u5217\n\n\n\n\n\u7279\u5f81\uff1a4\u4e2a\uff0c\u5206\u522b\u662f\u82b1\u74e3\u957f\u5ea6\u548c\u5bbd\u5ea6\uff0c\u82b1\u843c\u957f\u5ea6\u548c\u5bbd\u5ea6\uff0c\u5355\u4f4dcm\n\n\n\u5206\u7c7b\u6807\u7b7e\uff1a\u6700\u540e\u4e00\u5217\uff0c\u4e09\u79cd\u53d6\u503c\uff0c\u5206\u522b\u4ee3\u8868\u4e09\u79cd\u7c7b\u578b\u7684\u83ba\u5c3e\u82b1\n\n\n\n\nimport pandas as pd\ndf = pd.read_excel(\n./Iris.xls\n, sheetname=\nIris\n)\nprint(type(df))\nprint(df.shape)\ndf.head(4)\n#df.tail(4)\n#df.iloc[49:54, :]\n\n\n\n\nclass 'pandas.core.frame.DataFrame'\n\n(150, 5)\n\n\n\n\n\n\n  \n\n    \n\n      \n\n      \nsepal length\n\n      \nsepal width\n\n      \npetal length\n\n      \npetal width\n\n      \niris\n\n    \n\n  \n\n  \n\n    \n\n      \n0\n\n      \n5.1\n\n      \n3.5\n\n      \n1.4\n\n      \n0.2\n\n      \nIris-setosa\n\n    \n\n    \n\n      \n1\n\n      \n4.9\n\n      \n3.0\n\n      \n1.4\n\n      \n0.2\n\n      \nIris-setosa\n\n    \n\n    \n\n      \n2\n\n      \n4.7\n\n      \n3.2\n\n      \n1.3\n\n      \n0.2\n\n      \nIris-setosa\n\n    \n\n    \n\n      \n3\n\n      \n4.6\n\n      \n3.1\n\n      \n1.5\n\n      \n0.2\n\n      \nIris-setosa\n\n    \n\n  \n\n\n\n\n\n\n\nsigmoid\u51fd\u6570\n\n\nsigmoid\u51fd\u6570\uff0c\u6570\u5b66\u8868\u8fbe\u5f0f\uff1a\n\ns\\left(h\\right) \\ = \\ \\frac{1}{1 \\ + \\ e^{-h}}\n\n\u6ce8\u610f\uff0ch\u5728\u8fd9\u4e0d\u4ec5\u4ec5\u4ee3\u8868\u6211\u4eec\u901a\u5e38\u610f\u4e49\u7684\u81ea\u53d8\u91cfx\uff0c\u8fd8\u53ef\u4ee3\u8868\u591a\u4e2a\u81ea\u53d8\u91cf\u7684\u7ec4\u5408\u3002\n\n\n\nLogistic regression\u53ef\u4ee5\u7528\u6765\u505a\u56de\u5f52\uff0c\u4e5f\u53ef\u4ee5\u7528\u6765\u5206\u7c7b\uff08\u4e3b\u8981\u7528\u4e8e\u4e8c\u5206\u7c7b\uff09\u3002\u4ece\u4e0a\u56fe\u53ef\u4ee5\u770b\u5230sigmoid\u51fd\u6570\u662f\u4e00\u4e2as\u5f62\u7684\u66f2\u7ebf\uff0c\ns\\left(h\\right)\n\u7684\u53d6\u503c\u5728(0, 1)\u4e4b\u95f4\uff0c\u5f53h=0\u65f6\uff0c\n\\ s\\left(h\\right)=0.5\\ \n,\u5728h\u8fdc\u79bb0\u7684\u5730\u65b9\u51fd\u6570\u7684\u503c\u4f1a\u5f88\u5feb\u63a5\u8fd10\u62161\u3002\u8fd9\u4e2a\u6027\u8d28\u4f7f\u6211\u4eec\u80fd\u591f\u4ee5\u6982\u7387\u7684\u65b9\u5f0f\u6765\u89e3\u91ca\u3002\n\n\nsigmoid\u51fd\u6570\u63a8\u5bfc\n\n\n\u5176\u5b9e\uff0c\u76f8\u6bd4\u7ebf\u6027\u56de\u5f52\u65b9\u7a0b\uff0c\u903b\u8f91\u56de\u5f52\u662f\u5728\u7ebf\u6027\u56de\u5f52\u7684\u57fa\u7840\u4e0a\u589e\u52a0\u4e86\u4e00\u4e2a\u903b\u8f91\u51fd\u6570\uff0c\u5373\u5c06\n\\ y \\ = \\ ax \\ + \\ b \\ \n\u4f5c\u4e3a\u81ea\u53d8\u91cf\u5e26\u5165\u4e86sigmoid\u51fd\u6570\u91cc\uff08\u6b64\u65f6\nh=y= ax \\ + \\ b \n\uff09\u3002\n\u4ece\u4e00\u4e2a\u4f8b\u5b50\u8bf4\u8d77,\u6211\u4eec\u901a\u8fc7\u7528\u6237\u7684\u5c5e\u6027\u548c\u7279\u5f81\u6765\u5224\u65ad\u7528\u6237\u6700\u7ec8\u662f\u5426\u4f1a\u8fdb\u884c\u8d2d\u4e70\u4e00\u79cd\u5546\u54c1\u3002\u5176\u4e2d\u8d2d\u4e70\u7684\u6982\u7387\u662f\u56e0\u53d8\u91cfy\uff0c\u7528\u6237\u7684\u5c5e\u6027\u548c\u7279\u5f81\u662f\u81ea\u53d8\u91cfX\u3002y\u503c\u8d8a\u5927\u8bf4\u660e\u7528\u6237\u8d2d\u4e70\u7684\u53ef\u80fd\u6027\u8d8a\u5927\u3002\u8fd9\u91cc\u6211\u4eec\u4f7f\u7528InOdds(E)\u8868\u793a\u8fd9\u4e2a\u8d2d\u4e70\u4e8b\u4ef6\uff0c\u8be5\u4e8b\u4ef6\u53d1\u751f\u7684\u53ef\u80fd\u6027\uff08odds\uff09\u6765\u8868\u793a\u8d2d\u4e70\uff08P(E) \n=\n P\uff09\u4e0e\u672a\u8d2d\u4e70\uff08P(E')\uff09\u7684\u53ef\u80fd\u6027\u6bd4\u503c\uff0c\u516c\u5f0f\u5982\u4e0b\uff1a\n\nInOdds\\left(E\\right)=W_0 + W_1 \\times X_1 + W_2 \\times X_2 + \\cdots + W_n \\times X_n +  \\epsilon\n\n\nOdds\\left(E\\right) = \\frac{P \\left(E \\right)}{P \\left(E' \\right)} = \\frac{P \\left(E \\right)}{1 - P \\left(E \\right)} = \\frac{P}{1 - P}\n\n\n\n\nOdds\u662f\u4e00\u4e2a\u4ece0\u5230\u65e0\u7a77\u7684\u6570\u5b57\uff0cOdds\u7684\u503c\u8d8a\u5927\uff0c\u8868\u660e\u4e8b\u4ef6\u53d1\u751f\u7684\u53ef\u80fd\u6027\u8d8a\u5927\u3002\u4e0b\u9762\u6211\u4eec\u8981\u5c06Odds\u8f6c\u5316\u4e3a0-1\u4e4b\u95f4\u7684\u6982\u7387\u51fd\u6570\u3002\u9996\u5148\u5bf9Odds\u53d6\u81ea\u7136\u5bf9\u6570\uff0c\u5f97\u5230logit\u65b9\u7a0b\uff0clogit\u662f\u4e00\u4e2a\u8303\u56f4\u5728\u8d1f\u65e0\u7a77\u5230\u6b63\u65e0\u7a77\u7684\u503c\u3002\n\n\n\n\nlogit(p) = lnOdds(p) = ln \\frac{p}{1 - p} = lnp - ln(1-p)\n\n\n\n\n\n\n\u57fa\u4e8e\u4e0a\u9762\u7684logit\u65b9\u7a0b\uff0c\u83b7\u5f97\u4ee5\u4e0b\u516c\u5f0f\uff1a\n\n\n\n\nlogit(\\pi) = lnOdds(\\pi) = ln\\frac{P(E)}{P(1-E)} = W_0 + W_1 \\times X_1 + W_2 \\times X_2 + \\cdots + W_n \\times X_n +  \\epsilon\n\n\n\n\n\u5176\u4e2d\u4f7f\u7528\u4e86\n\\pi\n\u66ff\u6362\u4e86\u516c\u5f0f\u4e2d\u7684P(E)\uff0c\u5373\n\\pi = P(E)\n\u3002\u6839\u636e\u6307\u6570\u51fd\u6570\u548c\u5bf9\u6570\u51fd\u6570\u89c4\u5219\u5f97\u5230\u4ee5\u4e0b\u516c\u5f0f\uff1a\n\n\n\n\n\\frac{P(E)}{1 - P(E)} = Odds(E) = e^{W_0 + W_1 \\times X_1 + W_2 \\times X_2 + \\cdots + W_n \\times X_n +  \\epsilon}\n\n\n\n\n\u79fb\u9879\uff0c\u5316\u7b80\u5f97\u5230\u903b\u8f91\u56de\u5f52\u65b9\u7a0b\uff1a\n\n\n\n\n p = P(E) = \\frac{e^{w_0 + w_1 \\times x_1 + w_2 \\times x_2 + \\cdots + w_n \\times x_n}}{1 + e^{w_0 + w_1 \\times x_1 + w_2 \\times x_2 + \\cdots + w_n \\times x_n}} = \\frac{1}{1 + e^{-(w_0 + w_1 \\times x_1 + w_2 \\times x_2 + \\cdots + w_n \\times x_n)}} \n\n\n\n\n\u903b\u8f91\u56de\u5f52\u6a21\u578b\u89e3\u8bfb\n\n\n\u903b\u8f91\u56de\u5f52\u51fd\u6570\uff1a\n \n\n\\quad s\\left(h\\right) \\ = \\ \\frac{1}{1 \\ + \\ e^{-h}}\\quad\n \u3000\n\n\u5176\u4e2d, \nh = w_0 + w_1 \\times x_1 + w_2 \\times x_2 + \\cdots + w_n \\times x_n \n \n\n\n\u5047\u8bbe\u6709n\u4e2a\u6837\u672c{\n\\bf X\n, y}\uff0cy\u662f\u5206\u7c7b\u6807\u8bb0\uff0c\u53d6\u503c\u662f0\u62161\uff0c\u8868\u793a\u8d1f\u7c7b\u8fd8\u662f\u6b63\u7c7b\uff0c\n\\bf X\n\u662fm\u7ef4\u7684\u6837\u672c\u7279\u5f81\u5411\u91cf\uff0c\u90a3\u4e48\u8fd9\u4e2a\u6837\u672c\n\\bf X\n\u5c5e\u4e8e\u6b63\u7c7b\uff0c\u4e5f\u5c31\u662fy=1\u7684\u201c\u6982\u7387\u201d\u53ef\u4ee5\u901a\u8fc7\u4e0b\u9762\u7684\u903b\u8f91\u51fd\u6570\u6765\u8868\u793a\uff1a\n\n\n\n\np(y=1 \\mid x; w) = s(w^T x) = \\frac{1}{1 + e^{- w^T x}}\n\n\u8fd9\u91cc\u7684\n\\bf w\n\u662f\u6a21\u578b\u53c2\u6570\uff0c\u4e5f\u79f0\u56de\u5f52\u7cfb\u6570\uff0c\n\\ s\n\u662fsigmoid\u51fd\u6570\u3002\n\n\n\u51b3\u7b56\u51fd\u6570\u662f\uff1a\n\n\n\\phi\\left(x\\right)=\\left\\{\n\\begin{aligned}\n1 &\\ \\quad if\\ p(y=1 \\mid x)\\geq 0.5 \\\\\n0 &\\ \\quad otherwise.\n\\end{aligned}\n\\right.\n\n\n\u901a\u5e38\uff0c\u6211\u4eec\u9009\u62e90.5\u4f5c\u4e3a\u9608\u503c\uff0c\u5f53\u6709\u7279\u5b9a\u7684\u9700\u6c42\u65f6\u53ef\u4ee5\u9009\u62e9\u4e0d\u540c\u9608\u503c\uff0c\u5982\u679c\u5bf9\u6b63\u4f8b\u7684\u5224\u522b\u51c6\u786e\u6027\u8981\u6c42\u9ad8\uff0c\u53ef\u4ee5\u9009\u62e9\u9608\u503c\u5927\u4e00\u4e9b\uff0c\u5bf9\u6b63\u4f8b\u7684\u53ec\u56de\u8981\u6c42\u9ad8\uff0c\u5219\u53ef\u4ee5\u9009\u62e9\u9608\u503c\u5c0f\u4e00\u4e9b\u3002\n\n\n\u6a21\u578b\u53c2\u6570\u6c42\u89e3\n\n\n\u6700\u5927\u4f3c\u7136\u4f30\u8ba1\n\n\n\n\u6211\u4eec\u8981\u7528\u903b\u8f91\u56de\u5f52\u51fd\u6570\u53bb\u505a\u5206\u7c7b\uff0c\u5fc5\u987b\u8981\u6c42\u51fa\u6a21\u578b\u7cfb\u6570\n\\bf w\n\uff0c\u90a3\u4e48\u5982\u4f55\u6c42\u89e3\n\\bf w\n\u5462\uff1f\n\u7b54\u6848\u662f\u6700\u5927\u4f3c\u7136\u4f30\u8ba1\uff08maximum likelihood\uff09+ \u68af\u5ea6\u4e0b\u964d\uff08gradient descent\uff09\u3002\n\n\n\u6700\u5927\u4f3c\u7136\u4f30\u8ba1\u7684\u672c\u8d28\u662f\uff0c\u9009\u62e9\u6700\u4f73\u7684\u53c2\u6570\n\\bf w\n,\u6765\u6700\u5927\u5316\u6837\u672c\u6570\u636e\u7684\u53ef\u80fd\u6027\u3002\u5047\u8bbe\u7ed9\u5b9a\u6837\u672c\nX_1, X_2 \\cdots X_n\n, \u90a3\u4e48\u5173\u4e8e\u53c2\u6570\n\\bf w\n\u7684\u53ef\u80fd\u6027\u51fd\u6570(\u53ef\u80fd\u6027\u51fd\u6570\u5c31\u662f\u6837\u672c\u6570\u636e\u4f5c\u4e3a\u53c2\u6570w\u7684\u51fd\u6570\u7684\u6982\u7387)\uff1a\n\nlik(w) = f(X_1, X_2, X_3, \\cdots X_n \\mid w)\n\n\u5982\u679c\nX_1, X_2, X_3, \\cdots X_n\n\u4e4b\u95f4\u662f\u76f8\u4e92\u72ec\u7acb\u7684\uff0c\u53ef\u80fd\u6027\u51fd\u6570\u53ef\u4ee5\u7b80\u5199\u4e3a\u5982\u4e0b\uff1a\n\nlik(w) = \\prod_{i=1}^n f(X_i \\mid w) \\quad likelihood \\ function\n\n\n\n\n\u4e00\u822c\u60c5\u51b5\uff0c\u6211\u4eec\u8981\u4f7f\u7528log\u53ef\u80fd\u6027\u51fd\u6570\uff0c\u539f\u56e0\uff1a\n\n\n1.\u5bf9\u4e0a\u9762\u7684likelihood function\u4e24\u8fb9\u540c\u65f6\u53d6\u5bf9\u6570\uff0c\u5c31\u5f97\u5230\u4e86log likelihood function\uff0c\u8fd9\u6837\u4e58\u79ef\u8f6c\u6362\u4e3a\u6c42\u548c\uff0c\u4ece\u800c\u4f7f\u5f97\u51fd\u6570\u7684\u6c42\u5bfc\u66f4\u5bb9\u6613\uff1b\n\n\n2.\u5982\u679c\u6211\u4eec\u6709\u5f88\u591a\u7684\u6837\u672c\u6570\u636e\uff0c\u82e5\u76f4\u63a5\u7528likelihood function\uff0c\u8be5\u51fd\u6570\u662f\u8fde\u4e58\u7684\uff0c\u800c\u4e14\u901a\u5e38\u8fd9\u4e9b\u9879\u90fd\u8f83\u5c0f\uff0c\u6545\u53ef\u80fd\u6027\u51fd\u6570\u5c31\u4f1a\u53d8\u5f97\u5f88\u5c0f\u3002\u6240\u4ee5\uff0c\u5e94\u8be5\u91c7\u7528log\u53ef\u80fd\u6027\u51fd\u6570\uff0c\u53ef\u4ee5\u9632\u6b62\u5f53\u6837\u672c\u53ef\u80fd\u6027\u5f88\u5c0f\u65f6\uff0c\u53ef\u80fd\u51fa\u73b0\u7684\u6570\u503c\u4e0b\u6ea2;\n\n\n3.log\u51fd\u6570\u662f\u5355\u8c03\u7684\uff0c\u6700\u5927\u5316\u53ef\u80fd\u6027\u51fd\u6570\u7684\u503c\u4e5f\u5c31\u662f\u6700\u5927\u5316log\u53ef\u80fd\u6027\u51fd\u6570\u7684\u503c\u3002log\u53ef\u80fd\u6027\u51fd\u6570\u516c\u5f0f\u5982\u4e0b\uff1a\n\nl(w) = log(\\ lik(w)\\ ) = \\sum_{i=1}^n log(\\ f(X_i \\mid w)\\ )\n\n\n\n\n\u7528\u53ef\u80fd\u6027\u51fd\u6570\u6765\u5b9a\u4e49\u4e0a\u9762\u7684\u6a21\u578b\u7cfb\u6570w\uff0c\u8981\u5229\u7528\u4e8c\u9879\u5206\u5e03\u7684\u6982\u7387\u5bc6\u5ea6\u51fd\u6570\uff0c\u516c\u5f0f\u5982\u4e0b\uff1a\n\nL(w) = \\prod_{i=1}^n p(y^{(i)} \\mid x^{(i)};w) = \n\\prod_{i=1}^n (s(h^{(i)})^{y^{(i)}} (1 - s(h^{(i)}))^{1 - y^{(i)}}\n\n\u5176\u4e2d\uff0c\ny^{(i)}\n\u8868\u793a\u7b2ci\u4e2a\u6837\u672c\u5bf9\u5e94\u7684\u5206\u7c7b\u6807\u8bb0\u503c\uff0c\nx^{(i)}\n\u8868\u793a\u7b2ci\u4e2a\u6837\u672c\u7684\u7279\u5f81\uff0c\nh^{(i)}\n\u4e3a\u7b2ci\u4e2a\u6837\u672c\u5bf9\u5e94\u7684\u5047\u8bbe\u51fd\u6570\u7684\u503c\uff0c\nh = h(w) = w_0 + w_1 \\times x_1 + w_2 \\times x_2 + \\cdots + w_n \\times x_n\\ \n\u4e0a\u9762\u5f0f\u5b50\u4e24\u8fb9\u540c\u65f6\u6c42log\uff0c\u5f97\u5230\u6700\u7ec8\u7684log\u53ef\u80fd\u6027\u51fd\u6570\uff1a\n\nl(w) = log(L(w)) = \\sum_{i=1}^n y^{(i)} log(s(h^{(i)})) + (1 - y^{(i)}) log(1 - s(h^{(i)}))\n\n\n\u903b\u8f91\u56de\u5f52\u7684cost\u51fd\u6570\n\n\n\n\u6700\u5927\u4f3c\u7136\u4f30\u8ba1\u5c31\u662f\u8981\u6c42\u5f97\u4f7fl(w)\u53d6\u6700\u5927\u503c\u65f6\u7684w\uff0c\u8fd9\u91cc\u53ef\u4ee5\u4f7f\u7528\u68af\u5ea6\u4e0a\u5347\u6cd5\u6c42\u89e3\uff0c\u82e5\u8981\u7528\u68af\u5ea6\u4e0b\u964d\u6cd5\uff0c\u5c31\u8981\u4e58\u4ee5\u4e00\u4e2a\u8d1f\u6570\uff0c\u5728\u8fd9\uff0c\u6211\u4eec\u53ef\u4ee5\u5148\u76f4\u63a5\u4e58\u4ee5-1\u5f97\u5230\u5982\u4e0b\u516c\u5f0f\uff1a\n\nJ(w) = -l(w) = -log(L(w)) = \\sum_{i=1}^n -y^{(i)} log(s(h^{(i)})) - (1 - y^{(i)}) log(1 - s(h^{(i)}))\n\n\u73b0\u5728\uff0c\u6211\u4eec\u5c31\u5206\u6790\u4e00\u4e2a\u6837\u672c\uff0c\u90a3\u4e48\u53ef\u4ee5\u628a\u4e0a\u9762\u7684cost\u51fd\u6570\u5199\u6210\u5982\u4e0b\u5f62\u5f0f\uff1a\n\n\n\n\nJ(w) = -ylog(s(h)) - (1 - y)log(1 - s(h))\n\n\n\n\n\u7576y=0\u6642\uff0c\u4e0a\u5f0f\u7684\u524d\u9762\u4e00\u9805\n-ylog(s(h)) = 0\n\uff0c\u800c\u7576y=1\u6642\uff0c\u5f8c\u9762\u4e00\u9805\n(1 - y)log(1 - s(h)) = 0\n\uff0c\u6545\u4e0a\u5f0f\u53ef\u5beb\u6210\u5982\u4e0b\u5206\u6bb5\u51fd\u6570\uff1a\n\n\n\n\n\\phi\\left(x\\right)=\\left\\{\n\\begin{aligned}\n-log(s(h)) &\\ \\quad if\\ y = 1 \\\\\n-log(1 - s(h)) &\\ \\quad if\\ y = 0\n\\end{aligned}\n\\right.\n\n\n\n\nthe previous plot illustrates the cost for the classification of a single-sample instance for different values of s(h).\n\u597d\u4e86\uff0c\u73b0\u5728\u7684\u76ee\u6807\u662f\u6700\u5c0f\u5316cost\u51fd\u6570\uff0c\u627e\u5230\u6700\u4f73\u7684\u53c2\u6570\n\\bf w\n\uff0c\u65b9\u6cd5\u662f\u68af\u5ea6\u4e0b\u964d\u6cd5\u3002\n\n\n\n\u68af\u5ea6\u4e0b\u964d\u6cd5\u6c42\u6a21\u578b\u53c2\u6570\n\\bf w\n\n\n\n\n\u5bf9l(w)\u51fd\u6570\u4e58\u4ee5\n-\\frac{1}{n}\n\uff0cn\u662f\u6837\u672c\u6570\u91cf, \u6240\u4ee5\uff0ccost\u51fd\u6570\u4e3a\uff1a\n\nJ(w) = -\\frac{1}{n}l(w)\n\n\u6b63\u56e0\u4e3a\u4e58\u4e86\u4e00\u4e2a\u8d1f\u7684\u7cfb\u6570\n-\\frac{1}{n}\n\uff0c\u6240\u4ee5J(w)\u53d6\u6700\u5c0f\u503c\u65f6\u7684w\u4e3a\u8981\u6c42\u7684\u6700\u4f73\u53c2\u6570\u3002\u6839\u636e\u68af\u5ea6\u4e0b\u964d\u6cd5\u53ef\u5f97\u5230$\\bf w$\u7684\u66f4\u65b0\u89c4\u5219\u5982\u4e0b\uff1a\n\n\\bf w_j: = w_j \\ + \\ \\Delta {\\bf w_j}\n\n\n\n\n\n\n\\Delta \\bf w_j = -\\eta \\nabla J(w)= -\\eta \\frac{\\partial J(w)}{\\partial w_j} = \\eta\\left(y^\\left(i\\right) - h_w\\left(x^{(i)}\\right) \\right)x_j^\\left(i\\right)\n\n\u5176\u4e2d\uff0c\nj = 1, 2, 3, \\cdots m \\ \n\u4ee3\u8868\u7684\u662f\u6837\u672c\u7684\u7b2cj\u7ef4\u7684\u7279\u5f81\uff0c\nx^{(i)}\n\u4ee3\u8868\u7684\u662fn\u500b\u6a23\u672c\u4e2d\u7684\u7b2ci\u500b\u6a23\u672c\uff0c\n\\eta\n\u662f\u5b66\u4e60\u7387\uff0c\u662f0~1\u4e4b\u95f4\u7684\u6570\uff0c\nh_w(x^{(i)})\n\u4e3a\u51c0\u8f93\u5165\uff0c\n\\frac{\\partial J(w)}{\\partial w_j}\n\u4e3acost\u51fd\u6570\nJ(w)\n\u7684\u68af\u5ea6\u3002\n\u5b8c\u6574\u7248\u7684\u68af\u5ea6\u4e0b\u964d\uff1a\n\n\\bf w_j: = w_j \\ - \\eta \\sum_{i=1}^n (h_w(x^{(i)}) - y^{(i)})x_j^{(i)} \\quad j = 1, 2, 3, \\cdots m\n\n\u68af\u5ea6\u4e0a\u5347\u6cd5\uff1a\n\n\n\n\n\\bf w_j: = w_j \\ + \\eta \\sum_{i=1}^n (y^{(i)} - h_w(x^{(i)})x_j^{(i)}  \\quad j = 1, 2, 3, \\cdots m\n\n\n\n\n\u56e0\u6b64\uff0c\u7ed9\u5b9a\u521d\u59cb\u7684\u6a21\u578b\u7cfb\u6570\uff08w\uff09\u540e\uff0c\u6a21\u578b\u5c31\u4f1a\u5229\u7528\u68af\u5ea6\u4e0b\u964d\u7b97\u6cd5\u81ea\u52a8\u5b66\u4e60\u5230\u5408\u9002\u7684\u6a21\u578b\u7cfb\u6570w\uff0c\u62ff\u5230\u6743\u91cd\uff08\u6a21\u578b\uff09\u7cfb\u6570\u540e\uff0c\u5c31\u53ef\u6839\u636e\u51b3\u7b56\u51fd\u6570\u7684\u8f93\u51fa\u5bf9\u6837\u672c\u6570\u636e\u8fdb\u884c\u5206\u7c7b\u5206\u6790\u4e86\u3002\n\n\n\u5173\u4e8e\u68af\u5ea6\u4e0b\u964d\u8fc7\u7a0b\u5411\u91cf\u5316\n\n\nvectorization\u540e$\\bf w$\u66f4\u65b0\u7684\u6b65\u9aa4\u5982\u4e0b\uff1a\n\uff081\uff09\u6c42\nA = \\bf X {\\bullet} {\\bf w}\n\uff1b\n\uff082\uff09\u6c42E = h(A) - y\uff1b\n\uff083\uff09\u6c42\nw: = w -\\eta {\\bullet} X' {\\bullet} E\n\uff0cX'\u8868\u793a\u77e9\u9635X\u7684\u8f6c\u7f6e\u3002\n\n\n\n\n\n\n\n\n\npython\u4ee3\u7801\u793a\u4f8b(sklearn)\n\n\n\u4e3a\u4e86\u7b80\u5316\u6d41\u7a0b\uff0c\u4ece\u56db\u4e2a\u7279\u5f81\u4e2d\u62bd\u53d6\u4e86\u4e24\u4e2a\u7279\u5f81\u7ec4\u6210\u7279\u5f81\u77e9\u9635\uff0c\u5373\u9009\u62e9\u4e86\u7b2c\u4e00\u5217\u82b1\u843c\u957f\u5ea6(sepal length) and \u7b2c\u4e09\u5217\u82b1\u74e3\u957f\u5ea6(petal length) as X\n\n\nX = df.iloc[:, [0,2]].values  # .values\u3000\u662f\u5c06pandas\u7684DataFrame\u6216Series\u6570\u636e\u7ed3\u6784\u53d8\u6210numpy\u7684array\u7684\u6570\u7ec4\u6216\u77e9\u9635\u7c7b\u578b\nX.shape\nX[-2:, :]\n\n\n\n\narray([[ 6.2,  5.4],\n       [ 5.9,  5.1]])\n\n\n\nfig, ax = plt.subplots(figsize=(7,7))\nax.scatter(X[:50, 0], X[:50, 1], marker=\no\n, label=\nsetosa\n, c=\nwhite\n, edgecolor=\npurple\n)\nax.scatter(X[50:100, 0], X[50:100, 1], c=\nblue\n, marker=\nx\n, label=\nversicolor\n)\nax.scatter(X[100:, 0], X[100:, 1], marker=\n^\n, label=\nvirginica\n, c=\nwhite\n, edgecolor=\nred\n)\nax.set_xlabel(\nsepal length [cm]\n)\nax.set_ylabel(\npetal length [cm]\n)\nax.legend(loc=\nupper left\n)\nax.grid(True)\n\n\n\n\n\n\nseaborn\u7ed8\u5236\u6563\u70b9\u56fe\n\n\n# sns.scatterplot(x=\npetal length\n, y=\nsepal length\n, data=df, hue=\niris\n,kind=\npoint\n)\ng = sns.FacetGrid(df, hue=\niris\n, size=7, legend_out=False, hue_kws=dict(marker=[\no\n, \nx\n, \n^\n]))\ng.map(plt.scatter, \nsepal length\n, \npetal length\n,  alpha=.7)\ng.add_legend();\n\n\n\n\n\n\ndf.head(3)\n\n\n\n\n\n\n\n  \n\n    \n\n      \n\n      \nsepal length\n\n      \nsepal width\n\n      \npetal length\n\n      \npetal width\n\n      \niris\n\n    \n\n  \n\n  \n\n    \n\n      \n0\n\n      \n5.1\n\n      \n3.5\n\n      \n1.4\n\n      \n0.2\n\n      \nIris-setosa\n\n    \n\n    \n\n      \n1\n\n      \n4.9\n\n      \n3.0\n\n      \n1.4\n\n      \n0.2\n\n      \nIris-setosa\n\n    \n\n    \n\n      \n2\n\n      \n4.7\n\n      \n3.2\n\n      \n1.3\n\n      \n0.2\n\n      \nIris-setosa\n\n    \n\n  \n\n\n\n\n\n\n\ny = df.iloc[:, 4]\ny.unique()\n# \u5c06\u6570\u636e\u96c6\u7684\u5b57\u7b26\u7c7b\u578b\u7684\u6570\u636e\u8f6c\u53d8\u6210\u6570\u503c\u7c7b\u578b,Iris-setosa\u6807\u8bb0\u4e3a\uff10,Iris-Versicolor\u4e3a1\uff0c\n# Iris-virginica\u4e3a2\ny.replace(y.unique(), [0, 1, 2], inplace=True)\nY = y.values\n# Y = y.values.reshape(-1, 1)\nnp.shape(Y)\n# np.unique(Y)\n# [u'Iris-setosa', u'Iris-versicolor', u'Iris-virginica'][0, 1, 2] \n\n\n\n\n(150,)\n\n\n\nX = df.iloc[:, [0,2]].values  # .values\u3000\u662f\u5c06pandas\u7684DataFrame\u6216Series\u6570\u636e\u7ed3\u6784\u53d8\u6210numpy\u7684array\u7684\u6570\u7ec4\u6216\u77e9\u9635\u7c7b\u578b\n# X[-2:, :]\nnp.shape(X)\n\n\n\n\n(150, 2)\n\n\n\n\u8c03\u7528sklearn\u5e93\u7684\u7c7bLogisticRegression\uff0c\u5b9e\u73b0\u5bf9Iris\u8bad\u7ec3\u96c6\u7684\u5b66\u4e60\uff0c\u7528\u4ea4\u53c9\u9a8c\u8bc1\u68c0\u9a8c\u5206\u7c7b\u6548\u679c\uff0c\u6700\u7ec8\u5c06\u8bad\u7ec3\u597d\u7684\u6a21\u578b\u5e94\u7528\u5728\u6d4b\u8bd5\u96c6\u8fdb\u884c\u9a8c\u8bc1\n\n\nfrom sklearn.model_selection import train_test_split    \nfrom sklearn.model_selection import cross_val_score \nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.metrics import accuracy_score\n\nX_train, X_test, y_train, y_test = train_test_split(X, Y, test_size=0.3, random_state=0)\nsc = StandardScaler()\nsc.fit(X_train)\nX_train_std = sc.transform(X_train)\nX_test_std = sc.transform(X_test)\nX_combined_std = np.vstack((X_train_std, X_test_std))\ny_combined = np.hstack((y_train, y_test))\nlr = LogisticRegression(C=100, penalty=\nl2\n, random_state=0, tol=1e-6)\nlr.fit(X_train_std, y_train)\nlr.predict_proba(X_test_std[0, :].reshape(1, -1))\n# np.shape(X_test_std[0, :]),\u8981\u6574\u5f62\u4e3a\uff08\uff11\uff0c\u3000\uff0d\uff11\uff09\n# np.shape(y_train)\ny_pred = lr.predict(X_test_std)\nprint(\nMisclassified samples: %d\n % (y_test != y_pred).sum())\nprint(\nAccuracy: %.2f\n % accuracy_score(y_test,y_pred))\nprint(\ncross validation score: %s\n % cross_val_score(lr, X_train_std, y_train, cv=5))\nprint(\nmean cross validation score: %s\n % cross_val_score(lr, X_train_std, y_train, cv=5).mean())\n\n\n\n\nMisclassified samples: 1\nAccuracy: 0.98\ncross validation score: [ 0.95454545  1.          1.          0.9047619   0.94736842]\nmean cross validation score: 0.961335156072\n\n\n\n\u67e5\u770b\u6a21\u578b\u662f\u5426\u8fc7\u62df\u5408\u53ef\u4ee5\u7528learning curve\u6765\u67e5\u770b\uff0c\u8fc7\u62df\u5408\u73b0\u8c61\u8868\u73b0\u4e3a\uff0c\u5728\u8bad\u7ec3\u96c6\u4e0a\u51c6\u786e\u7387\u5f97\u5206\u6bd4\u8f83\u9ad8\uff0c\u4f46\u4ea4\u53c9\u9a8c\u8bc1\u96c6\u4e0a\u5f97\u5206\u8f83\u4f4e\uff0c\u4e2d\u95f4gap\u8f83\u5927\uff0c\u4e00\u822c\u662f\u6a21\u578b\u8fc7\u4e8e\u590d\u6742\u5bfc\u81f4\uff0c\u4f46\u4e00\u822c\u968f\u7740\u6837\u672c\u91cf\u589e\u52a0\uff0c\u8fc7\u62df\u5408\u4f1a\u51cf\u5f31\u3002\u4e0e\u4e4b\u76f8\u53cd\u7684\u8fd8\u6709\u6b20\u62df\u5408\uff0c\u5373\u6a21\u578b\u590d\u6742\u5ea6\u4e0d\u591f\uff0c\u8bad\u7ec3\u96c6\u548c\u4ea4\u53c9\u9a8c\u8bc1\u96c6\u7684\u5f97\u5206\u5747\u8f83\u4f4e\u3002\n\n\n\n\n\u6b20\u64ec\u5408\n\u6700\u4f73\u64ec\u5408\n\u904e\u64ec\u5408\n\u3000\n\n\nfrom sklearn.model_selection import learning_curve\n# \u7528sklearn\u7684learning_curve\u5f97\u5230training_score\u548ccv_score\uff0c\u4f7f\u7528matplotlib\u753b\u51falearning curve\ndef plot_learning_curve(estimator, title, X, y, ylim=None, cv=5, n_jobs=1, \n                        train_sizes=np.linspace(.05, 1., 20), verbose=0, plot=True):\n    \n\n    \u753b\u51fadata\u5728\u67d0\u6a21\u578b\u4e0a\u7684learning curve.\n    \u53c2\u6570\u89e3\u91ca\n    ----------\n    estimator : \u4f7f\u7528\u7684\u5206\u7c7b\u5668\u3002\n    title : \u56fe\u7684\u6807\u9898\u3002\n    X : \u8f93\u5165\u7684feature\uff0cnumpy\u7c7b\u578b\n    y : \u8f93\u5165\u7684target vector\n    ylim : tuple\u683c\u5f0f\u7684(ymin, ymax), \u8bbe\u5b9a\u56fe\u50cf\u4e2d\u7eb5\u5750\u6807\u7684\u6700\u4f4e\u70b9\u548c\u6700\u9ad8\u70b9\n    cv : \u505across-validation\u7684\u65f6\u5019\uff0c\u6570\u636e\u5206\u6210\u7684\u4efd\u6570\uff0c\u5176\u4e2d\u4e00\u4efd\u4f5c\u4e3acv\u96c6\uff0c\u5176\u4f59n-1\u4efd\u4f5c\u4e3atraining(\u9ed8\u8ba4\u4e3a3\u4efd)\n    n_jobs : \u5e76\u884c\u7684\u7684\u4efb\u52a1\u6570(\u9ed8\u8ba41)\n    \n\n    train_sizes, train_scores, test_scores = learning_curve(\n        estimator, X, y, cv=cv, n_jobs=n_jobs, train_sizes=train_sizes, verbose=verbose)\n\n    train_scores_mean = np.mean(train_scores, axis=1)  # train_scores\u662f\u4e00\u4e2a\uff12\uff10\u884c\uff15\u5217\u7684ndarry,20\u4e3a\u4ece\u6837\u672c\u53d6\u7684\u4e0d\u540c\u6bd4\u4f8b\u7684\u6837\u672c\u6570\u636e\u4f5c\u4e3aX, \u800c\uff15\u8868\u793a\uff15\u6b21\u4ea4\u53c9\u9a8c\u8bc1\n    train_scores_std = np.std(train_scores, axis=1)\n    test_scores_mean = np.mean(test_scores, axis=1)\n    test_scores_std = np.std(test_scores, axis=1)\n\n    if plot:\n        plt.figure(figsize=(7,7))\n        plt.title(title)\n        if ylim is not None:\n            plt.ylim(*ylim)\n        plt.xlabel(\nsamples\n)\n        plt.ylabel(\nscores\n)\n        # plt.gca().invert_yaxis() \u4f8b\u5982y\u8f74\u5750\u68073000-10000\uff0c\u8c03\u6574\u4e3a10000-3000\u6765\u663e\u793a\n        plt.fill_between(train_sizes, train_scores_mean - train_scores_std, train_scores_mean + train_scores_std, \n                         alpha=0.2, color=\nb\n)\n        plt.fill_between(train_sizes, test_scores_mean - test_scores_std, test_scores_mean + test_scores_std, \n                         alpha=0.2, color=\nr\n)\n        plt.plot(train_sizes, train_scores_mean, '^-', color=\nblue\n, label=\ntrain score\n)\n        plt.plot(train_sizes, test_scores_mean, 'v-', color=\nred\n, label=\ncross_validation score\n)\n        plt.legend(loc=\nbest\n)\n        plt.grid(True)\n        plt.show()                \nplot_learning_curve(lr, \nlearning curve\n, X_train_std, y_train)\n\n\n\n\n\u51b3\u7b56\u8fb9\u754c\u793a\u610f\u56fe\n\n\n\n\n\n\nfrom matplotlib.colors import ListedColormap\nimport matplotlib.pyplot as plt\ndef plot_decision_regions(X, Y, classifier, test_idx=None, resolution=0.02):\n    # \u5bf9\u5e94\u5206\u7c7b\u6807\u7b7e\n    y_maps = {\n1\n:\nIris-versicolor\n, \n0\n:\nIris-setosa\n, \n2\n: \nIris-virginica\n}\n    # setup marker generator and color map\n    markers = (\n^\n, \nx\n, \ns\n, \no\n, \nv\n)\n    colors = (\npurple\n, \nred\n, \nblue\n, \ncyan\n, \nlightgreen\n, )  #\ngray\n\n    cmap = ListedColormap(colors[:len(np.unique(Y))])\n    # plot the decision surface    \n    x1_min, x1_max = X[:, 0].min() - 1, X[:, 0].max() + 1\n    x2_min, x2_max = X[:, 1].min() - 1, X[:, 1].max() + 1\n    xx1, xx2 = np.meshgrid(np.arange(x1_min, x1_max, resolution), np.arange(x2_min, x2_max, resolution))\n    Z = classifier.predict(np.array([xx1.ravel(), xx2.ravel()]).T)\n    Z = Z.reshape(xx1.shape)\n    plt.figure(figsize=(8,8))\n    plt.contourf(xx1, xx2, Z, alpha=0.4, cmap=cmap)          \n    plt.xlim(xx1.min(), xx1.max())\n    plt.ylim(xx2.min(), xx2.max())\n    # plot all samples\n    for idx, cl in enumerate(np.unique(Y)):        \n        plt.scatter(x=X[Y==cl, 0], y=X[Y==cl, 1], alpha=0.8, c=cmap(idx), marker=markers[idx],label=y_maps[str(cl)])        \n    # highlight test samples\n    if test_idx:\n        X_test, Y_test = X[test_idx, :], Y[test_idx]\n        X_test, Y_test = X[test_idx, :], Y[test_idx]\n        plt.scatter(X_test[:, 0], X_test[:, 1], c=\n, alpha=1.0, linewidth=1, marker=\no\n, s=55, label=\ntest set\n)\n\n\n\n\nplot_decision_regions(X=X_combined_std, Y=y_combined, classifier=lr, test_idx=None)\nplt.xlabel(\nsepal length [standardized] cm\n, fontsize=16)\nplt.ylabel(\npetal length [standardized] cm\n, fontsize=14)\nplt.legend(loc=\nupper left\n)\n\n\n\n\nmatplotlib.legend.Legend at 0x7fdd1fee2f50\n\n\n\n\n\n\n\u53c2\u8003\u6587\u732e\n\n\n\u3010\u673a\u5668\u5b66\u4e60\u7b14\u8bb01\u3011Logistic\u56de\u5f52\u603b\u7ed3 http://blog.csdn.net/dongtingzhizi/article/details/15962797\n\n\n\u3010\u673a\u5668\u5b66\u4e60\u7b14\u8bb02\u3011Linear Regression\u603b\u7ed3 http://blog.csdn.net/dongtingzhizi/article/details/16884215\n\n\nLogistic Regression \u6a21\u578b\u7b80\u4ecb\u3000https://tech.meituan.com/intro_to_logistic_regression.html\n\n\n\u903b\u8f91\u56de\u5f52\u7b97\u6cd5\u7684\u539f\u7406\u53ca\u5b9e\u73b0(LR) http://www.cnblogs.com/nxld/p/6124235.html\n\n\n\u903b\u8f91\u56de\u5f52\uff08Logistic regression\uff09\u8be6\u89e3-\u5e76\u7528scikit-learn\u8bad\u7ec3\u903b\u8f91\u56de\u5f52\u62df\u5408Iris\u6570\u636e\u96c6  http://blog.csdn.net/xlinsist/article/details/51289825\n\n\nSklearn-LogisticRegression\u903b\u8f91\u56de\u5f52 http://blog.csdn.net/cherdw/article/details/54891073\n\n\n\u673a\u5668\u5b66\u4e60\u7b97\u6cd5\u4e0ePython\u5b9e\u8df5\u4e4b\uff08\u4e03\uff09\u903b\u8f91\u56de\u5f52\uff08Logistic Regression\uff09 http://blog.csdn.net/zouxy09/article/details/20319673\n\n\n\u673a\u5668\u5b66\u4e60\u7b97\u6cd5\u4e0ePython\u5b9e\u8df5\u4e4b\uff08\u4e03\uff09\u903b\u8f91\u56de\u5f52\uff08Logistic Regression http://blog.csdn.net/wenyusuran/article/details/25824011\n\n\n\u6b63\u5219\u5316\u65b9\u6cd5\uff1aL1\u548cL2 regularization\u3001\u6570\u636e\u96c6\u6269\u589e\u3001dropout http://blog.csdn.net/u012162613/article/details/44261657\n\n\nLaTeX \u5404\u79cd\u547d\u4ee4\u7b26\u53f7 http://blog.csdn.net/anxiaoxi45/article/details/39449445", 
            "title": "Logistic_regression\u7684Python\u4ee3\u7801\u5b9e\u73b0"
        }, 
        {
            "location": "/machine_learning/logistic_regression/logistic regression_forshow/#mathbbpython", 
            "text": "\u903b\u8f91\u56de\u5f52(Logistic Regression, LR)\u53c8\u79f0\u4e3a\u903b\u8f91\u56de\u5f52\u5206\u6790\uff0c\u662f\u5206\u7c7b\u548c\u9884\u6d4b\u7b97\u6cd5\u4e2d\u7684\u4e00\u79cd\u3002\u901a\u8fc7\u5386\u53f2\u6570\u636e\u7684\u8868\u73b0\u5bf9\u672a\u6765\u7ed3\u679c\u53d1\u751f\u7684\u6982\u7387\u8fdb\u884c\u9884\u6d4b\u3002  \u4f8b\u5982\uff0c\u6211\u4eec\u53ef\u4ee5\u5c06\u5546\u54c1\u7684\u8d2d\u4e70\u6982\u7387\u8bbe\u7f6e\u4e3a\u56e0\u53d8\u91cf\uff0c\u5c06\u7528\u6237\u7684\u7279\u5f81\u5c5e\u6027\uff0c\u4f8b\u5982\u6027\u522b\uff0c\u5e74\u9f84\uff0c\u6ce8\u518c\u65f6\u95f4\u7b49\u8bbe\u7f6e\u4e3a\u81ea\u53d8\u91cf\u3002\u6839\u636e\u7279\u5f81\u5c5e\u6027\u9884\u6d4b\u8d2d\u4e70\u7684\u6982\u7387\u3002\u903b\u8f91\u56de\u5f52\u4e0e\u7ebf\u6027\u56de\u5f52\u5206\u6790\uff08Linear Regression\uff09\u6709\u5f88\u591a\u76f8\u4f3c\u4e4b\u5904\uff0c\u4e0b\u9762\u5148\u6765\u770b\u4e0b\u7ebf\u6027\u56de\u5f52\u5206\u6790", 
            "title": "\\mathbb{\u903b\u8f91\u56de\u5f52\u4e0epython \u4ee3\u7801\u5b9e\u73b0}"
        }, 
        {
            "location": "/machine_learning/logistic_regression/logistic regression_forshow/#_1", 
            "text": "\u9996\u5148\uff0c\u6e29\u6545\u4e00\u4e0b\u76f4\u7ebf\u65b9\u7a0b    y = ax + b    \u81ea\u53d8\u91cfx\u4e58\u4ee5\u659c\u7387a\u518d\u52a0\u4e0a\u622a\u8dddb\u5c31\u5f97\u5230\u4e86\u56e0\u53d8\u91cfy  import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\n%matplotlib inline\n# from matplotlib.font_manager import FontProperties\nx = np.arange(-10, 10)\na, b = 2, 5\nfig, ax = plt.subplots(figsize=(8, 8))\n# \u9690\u85cf\u4e0a\u8fb9\u548c\u53f3\u8fb9\nax.spines[ top ].set_color( none ) \nax.spines[ right ].set_color( none ) \n# \u79fb\u52a8\u53e6\u5916\u4e24\u4e2a\u8f74\nax.xaxis.set_ticks_position( bottom )\nax.spines['bottom'].set_position(('data', 0))\nax.yaxis.set_ticks_position('left')\nax.spines['left'].set_position(('data', 0))\nax.plot(x, a*x+b, linewidth=2, label= y=2x+5 )\nax.legend()\nax.grid(True, linestyle= : , linewidth=1.5, alpha=0.8)   \u4e00\u5143\u4e00\u6b21\u65b9\u7a0b   \\quad y \\ = \\ ax \\ + \\ b \\quad \u4f8b\u5982\uff1a\\ y = 2x + 5   \u53ef\u4ee5\u5199\u6210\uff1a   \\quad y \\ = \\ w_0 \\times x_0 \\ + \\ w_1 \\times x_1 \\quad \u5176\u4e2dw_0 =5, \\ x_0=1, \\ w_1=2, \\ x_1=x   \u4e8c\u5143\u4e00\u6b21\u65b9\u7a0b   \\quad y \\ = \\ ax \\ + \\ bx \\ + \\ c    \u53ef\u4ee5\u5199\u6210\uff1a   \\quad y \\ = \\ w_0 \\times x_0 \\ + \\ w_1 \\times x_1 \\ + \\ w_2 \\times x_2 \\quad \u5176\u4e2dx_0=1, \\ w_0=c   n\u5143\u4e00\u6b21\u65b9\u7a0b\u8868\u8fbe\u5f0f\u53ca\u77e9\u9635\u8868\u793a\uff1a   y \\ = \\ w_0\\times x_0 + w_1 \\times x_1 + w_2 \\times x_2 + \\cdot\\cdot\\cdot \\ w_n \\times x_n \\     =\\underbrace{\\begin{bmatrix} w_0 & w_1 & w_2 & \\cdots\\ &w_n \\end{bmatrix}}_{\u6743\u91cd\u7cfb\u6570\u5411\u91cf\\bf w} {\\ \\bullet}  \\underbrace{\\begin{bmatrix} x_{0} \\\\ x_{1} \\\\ x_{2} \\\\ \\vdots \\\\ x_n \\end{bmatrix}}_{\u6837\u672c\u7279\u5f81\u77e9\u9635\\bf x}    =\\ {\\bf w^T x} \\quad {\u5176\u4e2dx_0=1}   \u56de\u5f52\u5206\u6790\u7528\u6765\u63cf\u8ff0\u81ea\u53d8\u91cfx\u548c\u56e0\u53d8\u91cfY\u4e4b\u95f4\u7684\u5173\u7cfb\uff0c\u6216\u8005\u8bf4\u81ea\u53d8\u91cfX\u5bf9\u56e0\u53d8\u91cfY\u7684\u5f71\u54cd\u7a0b\u5ea6\uff0c\u5e76\u5bf9\u56e0\u53d8\u91cfY\u8fdb\u884c\u9884\u6d4b\u3002  \n\u5176\u4e2d\u56e0\u53d8\u91cf(y)\u662f\u6211\u4eec\u5e0c\u671b\u83b7\u5f97\u7684\u7ed3\u679c\uff0c\u81ea\u53d8\u91cf(x)\u662f\u5f71\u54cd\u7ed3\u679c\u7684\u6f5c\u5728\u56e0\u7d20\uff0c\u81ea\u53d8\u91cf\u53ef\u4ee5\u6709\u4e00\u4e2a\uff0c\u4e5f\u53ef\u4ee5\u6709\u591a\u4e2a\u3002\u4e00\u4e2a\u81ea\u53d8\u91cf\u7684\u53eb\u505a\u4e00\u5143\u56de\u5f52\u5206\u6790\uff0c\u8d85\u8fc7\u4e00\u4e2a\u81ea\u53d8\u91cf\u7684\u53eb\u505a\u591a\u5143\u56de\u5f52\u5206\u6790\u3002  \u56de\u5f52\u5206\u6790\u5176\u5b9e\u5c31\u662f\u5bf9\u5df2\u77e5\u516c\u5f0f\u7684\u672a\u77e5\u53c2\u6570\u8fdb\u884c\u4f30\u8ba1\uff0c\u5728\u7ed9\u5b9a\u8bad\u7ec3\u6837\u672c\u70b9\u548c\u5df2\u77e5\u7684\u516c\u5f0f\u540e\uff0c\u53bb\u6c42\u89e3\u4e00\u4e2a\u6216\u591a\u4e2a\u672a\u77e5\u53c2\u6570\uff0c\u76f4\u5230\u627e\u5230\u90a3\u4e2a\u6700\u7b26\u5408\u6837\u672c\u70b9\u5206\u5e03\u7684\u53c2\u6570\uff08\u6216\u53c2\u6570\u7ec4\u5408\uff09\u3002\u6ce8\u610f\uff0c\u56de\u5f52\u7684\u524d\u63d0\u662f\u516c\u5f0f\u5df2\u77e5\uff0c\u5426\u5219\u56de\u5f52\u65e0\u6cd5\u8fdb\u884c\u3002\u6839\u636e\u516c\u5f0f\u7684\u4e0d\u540c\uff0c\u56de\u5f52\u5206\u4e3a\u7ebf\u6027\u56de\u5f52\u548c\u975e\u7ebf\u6027\u56de\u5f52\u3002\u7ebf\u6027\u56de\u5f52\u4e2d\u516c\u5f0f\u90fd\u662f\u201c\u4e00\u6b21\u201d\u7684\uff08\u4e00\u5143\u4e00\u6b21\u65b9\u7a0b\uff0c\u4e8c\u5143\u4e00\u6b21\u65b9\u7a0b...\uff09\uff0c\u800c\u975e\u7ebf\u6027\u5219\u53ef\u4ee5\u6709\u5404\u79cd\u5f62\u5f0f\uff08N\u5143N\u6b21\u65b9\u7a0b\uff0clog\u65b9\u7a0b...\uff09\u3002  \u4e0b\u9762\u662f\u4e00\u7ec4\u5e7f\u544a\u8d39\u7528\u548c\u66dd\u5149\u6b21\u6570\u7684\u6570\u636e\uff0c\u8d39\u7528\u548c\u66dd\u5149\u6b21\u6570\u4e00\u4e00\u5bf9\u5e94\u3002\u5176\u4e2d\u66dd\u5149\u6b21\u6570\u662f\u6211\u4eec\u5e0c\u671b\u77e5\u9053\u7684\u7ed3\u679c\uff0c\u8d39\u7528\u662f\u5f71\u54cd\u66dd\u5149\u6b21\u6570\u7684\u56e0\u7d20\uff0c\u6211\u4eec\u5c06\u8d39\u7528\u8bbe\u7f6e\u4e3a\u81ea\u53d8\u91cfX\uff0c\u5c06\u66dd\u5149\u6b21\u6570\u8bbe\u7f6e\u4e3a\u56e0\u53d8\u91cfY\uff0c\u901a\u8fc7\u4e00\u5143\u7ebf\u6027\u56de\u5f52\u65b9\u7a0b\u548c\u5224\u5b9a\u7cfb\u6570\u53ef\u4ee5\u53d1\u73b0\u8d39\u7528(X)\u5bf9\u66dd\u5149\u6b21\u6570(Y)\u7684\u5f71\u54cd\u3002   \u4ee5\u4e0b\u4e3a\u4e00\u5143\u56de\u5f52\u7ebf\u6027\u65b9\u5f0f\u8868\u8fbe\u5f62\u5f0f\uff0c \\hat{y} \\ = \\ w_0 \\ + \\ w_1 x_1   \u5176\u4e2d \\bf{\\hat{y}} \u662f\u9884\u6d4b\u7684\u56e0\u53d8\u91cf\uff0c \\bf{x_1} \u662f\u81ea\u53d8\u91cf \\bf{X} \u7684\u4e00\u4e2a\u5177\u4f53\u503c\uff0c\u6211\u4eec\u53ea\u9700\u6c42\u51fa\u622a\u8ddd w_0 \u548c\u659c\u7387 w_1 \u5c31\u53ef\u4ee5\u83b7\u5f97\u8d39\u7528\u548c\u66dd\u5149\u6b21\u6570\u4e4b\u95f4\u7684\u5173\u7cfb\uff0c\u5c31\u53ef\u4ee5\u5bf9\u66dd\u5149\u6b21\u6570\u8fdb\u884c\u9884\u6d4b\u3002\u901a\u5e38\uff0c\u53ef\u4ee5\u7528\u7528\u6700\u5c0f\u4e8c\u4e58\u6cd5\u6765\u8ba1\u7b97\u622a\u8dddb0\u548c\u659c\u7387b1\u3002\u6700\u5c0f\u4e8c\u4e58\u6cd5\u901a\u8fc7\u6700\u5c0f\u5316\u8bef\u5dee\u7684\u5e73\u65b9\u548c\u5bfb\u627e\u6570\u636e\u7684\u6700\u4f73\u51fd\u6570\u5339\u914d\u3002   \u5173\u4e8e\u51e0\u4e2a\u5c0f\u4f8b\u5b50\u53ef\u4ee5\u70b9\u51fb \u8fd9\u91cc \u548c \u8fd9\u91cc", 
            "title": "\u7ebf\u6027\u56de\u5f52\u5206\u6790"
        }, 
        {
            "location": "/machine_learning/logistic_regression/logistic regression_forshow/#logistic-regression", 
            "text": "Logistic Regression \u662f\u7ebf\u6027\u56de\u5f52\u7684\u4e00\u79cd\uff0c\u662f\u5de5\u4e1a\u754c\u6bd4\u8f83\u5e38\u7528\u7684\u6709\u76d1\u7763\u5f0f\u7684\u5206\u7c7b\u673a\u5668\u5b66\u4e60\u7b97\u6cd5\uff0c\u7528\u4e8e\u4f30\u8ba1\u67d0\u79cd\u4e8b\u7269\u7684\u53ef\u80fd\u6027\uff0c\u6bd4\u5982\uff0c\u7528\u4e8e\u5e7f\u544a\u9884\u6d4b\uff08ctr\u9884\u4f30\uff09\uff0c\u6839\u636e\u4e0d\u540c\u5e7f\u544a\u7684\u70b9\u51fb\u7684\u5386\u53f2\u6570\u636e\uff0c\u6765\u9884\u6d4b\u67d0\u5e7f\u544a\u7684\u70b9\u51fb\u7387\u7684\u53ef\u80fd\u6027\uff0c\u7136\u540e\uff0c\u628a\u6700\u53ef\u80fd\u88ab\u7528\u6237\u70b9\u51fb\u7684\u5e7f\u544a\u6446\u5728\u7528\u6237\u80fd\u770b\u5230\u7684\u5730\u65b9\uff0c\u5f53\u7528\u6237\u70b9\u51fb\u4e86\u8be5\u5e7f\u544a\uff0c\u7f51\u7ad9\u5c31\u6709\u94b1\u6536\u4e86\u3002  \u73b0\u5b9e\u751f\u6d3b\u4e2d\uff0c\u6211\u4eec\u4e0d\u4ec5\u9700\u8981\u56de\u5f52\u4ea7\u751f\u4e00\u4e2a\u53ef\u4ee5\u6709\u5f88\u591a\u53d8\u5316\u7684\u56e0\u53d8\u91cf\uff0c\u6709\u65f6\u8fd8\u9700\u8981\u4ea7\u751f\u7c7b\u4f3c\u6982\u7387\u503c\u76840~1\u4e4b\u95f4\u7684\u6570\u503c\uff08\u6bd4\u5982\u67d0\u4e00\u53cc\u978b\u5b50\u4eca\u5929\u80fd\u5426\u5356\u51fa\u53bb\uff1f\u6216\u8005\u67d0\u4e00\u4e2a\u5e7f\u544a\u80fd\u5426\u88ab\u7528\u6237\u70b9\u51fb? \u6211\u4eec\u5e0c\u671b\u5f97\u5230\u8fd9\u4e2a\u6570\u503c\u6765\u8f85\u52a9\u51b3\u7b56\u978b\u5b50\u4e0a\u4e0d\u4e0a\u67b6\uff0c\u4ee5\u53ca\u5e7f\u544a\u5c55\u4e0d\u5c55\u793a\uff09\u3002\u8fd9\u4e2a\u6570\u503c\u5fc5\u987b\u662f0~1\u4e4b\u95f4\uff0c\u4f46\u663e\u7136\u7ebf\u6027\u56de\u5f52\u4e0d\u6ee1\u8db3\u8fd9\u4e2a\u533a\u95f4\u8981\u6c42\u3002\u4e8e\u662f\u5f15\u5165\u4e86Logistic\u65b9\u7a0b\uff0c\u6765\u505a\u5f52\u4e00\u5316\uff0c\u5373\u4ea7\u751f\u4e86\u903b\u8f91\u56de\u5f52\u3002  \u5728\u4ecb\u7ecd\u903b\u8f91\u56de\u5f52\u4e4b\u524d\uff0c\u6211\u4eec\u5148\u770b\u770b\u4e00\u4e2a\u5c0f\u4f8b\u5b50\uff1a\n\u9e22\u5c3e\u82b1\u6570\u636e\u96c6\u5305\u62ec\u4e09\u79cd\u9e22\u5c3e\u82b1\uff0c\u5c71\u9e22\u5c3e\u82b1(Iris Setosa)\u3001\u53d8\u8272\u9e22\u5c3e\u82b1(Iris\u3000Versicolor)\u3001\u7ef4\u5409\u5c3c\u4e9a\u9e22\u5c3e\u82b1(Iris Virginica)  \u641e\u6e05\u51e0\u4e2a\u6982\u5ff5\uff1a  \n\u6837\u672c  \u7279\u5f81  \u5206\u7c7b\u6807\u7b7e  \u8bad\u7ec3\u96c6(train)  \u6d4b\u8bd5\u96c6(test)  \u83ba(dai)\u5c3e\u82b1\u6570\u636e\u96c6\uff1a 150\u884c\\ \\times \\ 5\u5217   \u7279\u5f81\uff1a4\u4e2a\uff0c\u5206\u522b\u662f\u82b1\u74e3\u957f\u5ea6\u548c\u5bbd\u5ea6\uff0c\u82b1\u843c\u957f\u5ea6\u548c\u5bbd\u5ea6\uff0c\u5355\u4f4dcm  \u5206\u7c7b\u6807\u7b7e\uff1a\u6700\u540e\u4e00\u5217\uff0c\u4e09\u79cd\u53d6\u503c\uff0c\u5206\u522b\u4ee3\u8868\u4e09\u79cd\u7c7b\u578b\u7684\u83ba\u5c3e\u82b1   import pandas as pd\ndf = pd.read_excel( ./Iris.xls , sheetname= Iris )\nprint(type(df))\nprint(df.shape)\ndf.head(4)\n#df.tail(4)\n#df.iloc[49:54, :]  class 'pandas.core.frame.DataFrame' \n(150, 5)   \n   \n     \n       \n       sepal length \n       sepal width \n       petal length \n       petal width \n       iris \n     \n   \n   \n     \n       0 \n       5.1 \n       3.5 \n       1.4 \n       0.2 \n       Iris-setosa \n     \n     \n       1 \n       4.9 \n       3.0 \n       1.4 \n       0.2 \n       Iris-setosa \n     \n     \n       2 \n       4.7 \n       3.2 \n       1.3 \n       0.2 \n       Iris-setosa \n     \n     \n       3 \n       4.6 \n       3.1 \n       1.5 \n       0.2 \n       Iris-setosa", 
            "title": "\u903b\u8f91\u56de\u5f52\uff08Logistic Regression\uff09"
        }, 
        {
            "location": "/machine_learning/logistic_regression/logistic regression_forshow/#sigmoid", 
            "text": "sigmoid\u51fd\u6570\uff0c\u6570\u5b66\u8868\u8fbe\u5f0f\uff1a s\\left(h\\right) \\ = \\ \\frac{1}{1 \\ + \\ e^{-h}} \n\u6ce8\u610f\uff0ch\u5728\u8fd9\u4e0d\u4ec5\u4ec5\u4ee3\u8868\u6211\u4eec\u901a\u5e38\u610f\u4e49\u7684\u81ea\u53d8\u91cfx\uff0c\u8fd8\u53ef\u4ee3\u8868\u591a\u4e2a\u81ea\u53d8\u91cf\u7684\u7ec4\u5408\u3002  Logistic regression\u53ef\u4ee5\u7528\u6765\u505a\u56de\u5f52\uff0c\u4e5f\u53ef\u4ee5\u7528\u6765\u5206\u7c7b\uff08\u4e3b\u8981\u7528\u4e8e\u4e8c\u5206\u7c7b\uff09\u3002\u4ece\u4e0a\u56fe\u53ef\u4ee5\u770b\u5230sigmoid\u51fd\u6570\u662f\u4e00\u4e2as\u5f62\u7684\u66f2\u7ebf\uff0c s\\left(h\\right) \u7684\u53d6\u503c\u5728(0, 1)\u4e4b\u95f4\uff0c\u5f53h=0\u65f6\uff0c \\ s\\left(h\\right)=0.5\\  ,\u5728h\u8fdc\u79bb0\u7684\u5730\u65b9\u51fd\u6570\u7684\u503c\u4f1a\u5f88\u5feb\u63a5\u8fd10\u62161\u3002\u8fd9\u4e2a\u6027\u8d28\u4f7f\u6211\u4eec\u80fd\u591f\u4ee5\u6982\u7387\u7684\u65b9\u5f0f\u6765\u89e3\u91ca\u3002", 
            "title": "sigmoid\u51fd\u6570"
        }, 
        {
            "location": "/machine_learning/logistic_regression/logistic regression_forshow/#sigmoid_1", 
            "text": "\u5176\u5b9e\uff0c\u76f8\u6bd4\u7ebf\u6027\u56de\u5f52\u65b9\u7a0b\uff0c\u903b\u8f91\u56de\u5f52\u662f\u5728\u7ebf\u6027\u56de\u5f52\u7684\u57fa\u7840\u4e0a\u589e\u52a0\u4e86\u4e00\u4e2a\u903b\u8f91\u51fd\u6570\uff0c\u5373\u5c06 \\ y \\ = \\ ax \\ + \\ b \\  \u4f5c\u4e3a\u81ea\u53d8\u91cf\u5e26\u5165\u4e86sigmoid\u51fd\u6570\u91cc\uff08\u6b64\u65f6 h=y= ax \\ + \\ b  \uff09\u3002\n\u4ece\u4e00\u4e2a\u4f8b\u5b50\u8bf4\u8d77,\u6211\u4eec\u901a\u8fc7\u7528\u6237\u7684\u5c5e\u6027\u548c\u7279\u5f81\u6765\u5224\u65ad\u7528\u6237\u6700\u7ec8\u662f\u5426\u4f1a\u8fdb\u884c\u8d2d\u4e70\u4e00\u79cd\u5546\u54c1\u3002\u5176\u4e2d\u8d2d\u4e70\u7684\u6982\u7387\u662f\u56e0\u53d8\u91cfy\uff0c\u7528\u6237\u7684\u5c5e\u6027\u548c\u7279\u5f81\u662f\u81ea\u53d8\u91cfX\u3002y\u503c\u8d8a\u5927\u8bf4\u660e\u7528\u6237\u8d2d\u4e70\u7684\u53ef\u80fd\u6027\u8d8a\u5927\u3002\u8fd9\u91cc\u6211\u4eec\u4f7f\u7528InOdds(E)\u8868\u793a\u8fd9\u4e2a\u8d2d\u4e70\u4e8b\u4ef6\uff0c\u8be5\u4e8b\u4ef6\u53d1\u751f\u7684\u53ef\u80fd\u6027\uff08odds\uff09\u6765\u8868\u793a\u8d2d\u4e70\uff08P(E)  =  P\uff09\u4e0e\u672a\u8d2d\u4e70\uff08P(E')\uff09\u7684\u53ef\u80fd\u6027\u6bd4\u503c\uff0c\u516c\u5f0f\u5982\u4e0b\uff1a InOdds\\left(E\\right)=W_0 + W_1 \\times X_1 + W_2 \\times X_2 + \\cdots + W_n \\times X_n +  \\epsilon  Odds\\left(E\\right) = \\frac{P \\left(E \\right)}{P \\left(E' \\right)} = \\frac{P \\left(E \\right)}{1 - P \\left(E \\right)} = \\frac{P}{1 - P}   Odds\u662f\u4e00\u4e2a\u4ece0\u5230\u65e0\u7a77\u7684\u6570\u5b57\uff0cOdds\u7684\u503c\u8d8a\u5927\uff0c\u8868\u660e\u4e8b\u4ef6\u53d1\u751f\u7684\u53ef\u80fd\u6027\u8d8a\u5927\u3002\u4e0b\u9762\u6211\u4eec\u8981\u5c06Odds\u8f6c\u5316\u4e3a0-1\u4e4b\u95f4\u7684\u6982\u7387\u51fd\u6570\u3002\u9996\u5148\u5bf9Odds\u53d6\u81ea\u7136\u5bf9\u6570\uff0c\u5f97\u5230logit\u65b9\u7a0b\uff0clogit\u662f\u4e00\u4e2a\u8303\u56f4\u5728\u8d1f\u65e0\u7a77\u5230\u6b63\u65e0\u7a77\u7684\u503c\u3002   logit(p) = lnOdds(p) = ln \\frac{p}{1 - p} = lnp - ln(1-p)    \u57fa\u4e8e\u4e0a\u9762\u7684logit\u65b9\u7a0b\uff0c\u83b7\u5f97\u4ee5\u4e0b\u516c\u5f0f\uff1a   logit(\\pi) = lnOdds(\\pi) = ln\\frac{P(E)}{P(1-E)} = W_0 + W_1 \\times X_1 + W_2 \\times X_2 + \\cdots + W_n \\times X_n +  \\epsilon   \u5176\u4e2d\u4f7f\u7528\u4e86 \\pi \u66ff\u6362\u4e86\u516c\u5f0f\u4e2d\u7684P(E)\uff0c\u5373 \\pi = P(E) \u3002\u6839\u636e\u6307\u6570\u51fd\u6570\u548c\u5bf9\u6570\u51fd\u6570\u89c4\u5219\u5f97\u5230\u4ee5\u4e0b\u516c\u5f0f\uff1a   \\frac{P(E)}{1 - P(E)} = Odds(E) = e^{W_0 + W_1 \\times X_1 + W_2 \\times X_2 + \\cdots + W_n \\times X_n +  \\epsilon}   \u79fb\u9879\uff0c\u5316\u7b80\u5f97\u5230\u903b\u8f91\u56de\u5f52\u65b9\u7a0b\uff1a    p = P(E) = \\frac{e^{w_0 + w_1 \\times x_1 + w_2 \\times x_2 + \\cdots + w_n \\times x_n}}{1 + e^{w_0 + w_1 \\times x_1 + w_2 \\times x_2 + \\cdots + w_n \\times x_n}} = \\frac{1}{1 + e^{-(w_0 + w_1 \\times x_1 + w_2 \\times x_2 + \\cdots + w_n \\times x_n)}}", 
            "title": "sigmoid\u51fd\u6570\u63a8\u5bfc"
        }, 
        {
            "location": "/machine_learning/logistic_regression/logistic regression_forshow/#_2", 
            "text": "\u903b\u8f91\u56de\u5f52\u51fd\u6570\uff1a   \\quad s\\left(h\\right) \\ = \\ \\frac{1}{1 \\ + \\ e^{-h}}\\quad  \u3000 \u5176\u4e2d,  h = w_0 + w_1 \\times x_1 + w_2 \\times x_2 + \\cdots + w_n \\times x_n     \u5047\u8bbe\u6709n\u4e2a\u6837\u672c{ \\bf X , y}\uff0cy\u662f\u5206\u7c7b\u6807\u8bb0\uff0c\u53d6\u503c\u662f0\u62161\uff0c\u8868\u793a\u8d1f\u7c7b\u8fd8\u662f\u6b63\u7c7b\uff0c \\bf X \u662fm\u7ef4\u7684\u6837\u672c\u7279\u5f81\u5411\u91cf\uff0c\u90a3\u4e48\u8fd9\u4e2a\u6837\u672c \\bf X \u5c5e\u4e8e\u6b63\u7c7b\uff0c\u4e5f\u5c31\u662fy=1\u7684\u201c\u6982\u7387\u201d\u53ef\u4ee5\u901a\u8fc7\u4e0b\u9762\u7684\u903b\u8f91\u51fd\u6570\u6765\u8868\u793a\uff1a   p(y=1 \\mid x; w) = s(w^T x) = \\frac{1}{1 + e^{- w^T x}} \n\u8fd9\u91cc\u7684 \\bf w \u662f\u6a21\u578b\u53c2\u6570\uff0c\u4e5f\u79f0\u56de\u5f52\u7cfb\u6570\uff0c \\ s \u662fsigmoid\u51fd\u6570\u3002  \u51b3\u7b56\u51fd\u6570\u662f\uff1a  \\phi\\left(x\\right)=\\left\\{\n\\begin{aligned}\n1 &\\ \\quad if\\ p(y=1 \\mid x)\\geq 0.5 \\\\\n0 &\\ \\quad otherwise.\n\\end{aligned}\n\\right. \n\u901a\u5e38\uff0c\u6211\u4eec\u9009\u62e90.5\u4f5c\u4e3a\u9608\u503c\uff0c\u5f53\u6709\u7279\u5b9a\u7684\u9700\u6c42\u65f6\u53ef\u4ee5\u9009\u62e9\u4e0d\u540c\u9608\u503c\uff0c\u5982\u679c\u5bf9\u6b63\u4f8b\u7684\u5224\u522b\u51c6\u786e\u6027\u8981\u6c42\u9ad8\uff0c\u53ef\u4ee5\u9009\u62e9\u9608\u503c\u5927\u4e00\u4e9b\uff0c\u5bf9\u6b63\u4f8b\u7684\u53ec\u56de\u8981\u6c42\u9ad8\uff0c\u5219\u53ef\u4ee5\u9009\u62e9\u9608\u503c\u5c0f\u4e00\u4e9b\u3002  \u6a21\u578b\u53c2\u6570\u6c42\u89e3  \u6700\u5927\u4f3c\u7136\u4f30\u8ba1  \n\u6211\u4eec\u8981\u7528\u903b\u8f91\u56de\u5f52\u51fd\u6570\u53bb\u505a\u5206\u7c7b\uff0c\u5fc5\u987b\u8981\u6c42\u51fa\u6a21\u578b\u7cfb\u6570 \\bf w \uff0c\u90a3\u4e48\u5982\u4f55\u6c42\u89e3 \\bf w \u5462\uff1f\n\u7b54\u6848\u662f\u6700\u5927\u4f3c\u7136\u4f30\u8ba1\uff08maximum likelihood\uff09+ \u68af\u5ea6\u4e0b\u964d\uff08gradient descent\uff09\u3002  \u6700\u5927\u4f3c\u7136\u4f30\u8ba1\u7684\u672c\u8d28\u662f\uff0c\u9009\u62e9\u6700\u4f73\u7684\u53c2\u6570 \\bf w ,\u6765\u6700\u5927\u5316\u6837\u672c\u6570\u636e\u7684\u53ef\u80fd\u6027\u3002\u5047\u8bbe\u7ed9\u5b9a\u6837\u672c X_1, X_2 \\cdots X_n , \u90a3\u4e48\u5173\u4e8e\u53c2\u6570 \\bf w \u7684\u53ef\u80fd\u6027\u51fd\u6570(\u53ef\u80fd\u6027\u51fd\u6570\u5c31\u662f\u6837\u672c\u6570\u636e\u4f5c\u4e3a\u53c2\u6570w\u7684\u51fd\u6570\u7684\u6982\u7387)\uff1a lik(w) = f(X_1, X_2, X_3, \\cdots X_n \\mid w) \n\u5982\u679c X_1, X_2, X_3, \\cdots X_n \u4e4b\u95f4\u662f\u76f8\u4e92\u72ec\u7acb\u7684\uff0c\u53ef\u80fd\u6027\u51fd\u6570\u53ef\u4ee5\u7b80\u5199\u4e3a\u5982\u4e0b\uff1a lik(w) = \\prod_{i=1}^n f(X_i \\mid w) \\quad likelihood \\ function   \u4e00\u822c\u60c5\u51b5\uff0c\u6211\u4eec\u8981\u4f7f\u7528log\u53ef\u80fd\u6027\u51fd\u6570\uff0c\u539f\u56e0\uff1a  1.\u5bf9\u4e0a\u9762\u7684likelihood function\u4e24\u8fb9\u540c\u65f6\u53d6\u5bf9\u6570\uff0c\u5c31\u5f97\u5230\u4e86log likelihood function\uff0c\u8fd9\u6837\u4e58\u79ef\u8f6c\u6362\u4e3a\u6c42\u548c\uff0c\u4ece\u800c\u4f7f\u5f97\u51fd\u6570\u7684\u6c42\u5bfc\u66f4\u5bb9\u6613\uff1b  2.\u5982\u679c\u6211\u4eec\u6709\u5f88\u591a\u7684\u6837\u672c\u6570\u636e\uff0c\u82e5\u76f4\u63a5\u7528likelihood function\uff0c\u8be5\u51fd\u6570\u662f\u8fde\u4e58\u7684\uff0c\u800c\u4e14\u901a\u5e38\u8fd9\u4e9b\u9879\u90fd\u8f83\u5c0f\uff0c\u6545\u53ef\u80fd\u6027\u51fd\u6570\u5c31\u4f1a\u53d8\u5f97\u5f88\u5c0f\u3002\u6240\u4ee5\uff0c\u5e94\u8be5\u91c7\u7528log\u53ef\u80fd\u6027\u51fd\u6570\uff0c\u53ef\u4ee5\u9632\u6b62\u5f53\u6837\u672c\u53ef\u80fd\u6027\u5f88\u5c0f\u65f6\uff0c\u53ef\u80fd\u51fa\u73b0\u7684\u6570\u503c\u4e0b\u6ea2;  3.log\u51fd\u6570\u662f\u5355\u8c03\u7684\uff0c\u6700\u5927\u5316\u53ef\u80fd\u6027\u51fd\u6570\u7684\u503c\u4e5f\u5c31\u662f\u6700\u5927\u5316log\u53ef\u80fd\u6027\u51fd\u6570\u7684\u503c\u3002log\u53ef\u80fd\u6027\u51fd\u6570\u516c\u5f0f\u5982\u4e0b\uff1a l(w) = log(\\ lik(w)\\ ) = \\sum_{i=1}^n log(\\ f(X_i \\mid w)\\ )   \u7528\u53ef\u80fd\u6027\u51fd\u6570\u6765\u5b9a\u4e49\u4e0a\u9762\u7684\u6a21\u578b\u7cfb\u6570w\uff0c\u8981\u5229\u7528\u4e8c\u9879\u5206\u5e03\u7684\u6982\u7387\u5bc6\u5ea6\u51fd\u6570\uff0c\u516c\u5f0f\u5982\u4e0b\uff1a L(w) = \\prod_{i=1}^n p(y^{(i)} \\mid x^{(i)};w) = \n\\prod_{i=1}^n (s(h^{(i)})^{y^{(i)}} (1 - s(h^{(i)}))^{1 - y^{(i)}} \n\u5176\u4e2d\uff0c y^{(i)} \u8868\u793a\u7b2ci\u4e2a\u6837\u672c\u5bf9\u5e94\u7684\u5206\u7c7b\u6807\u8bb0\u503c\uff0c x^{(i)} \u8868\u793a\u7b2ci\u4e2a\u6837\u672c\u7684\u7279\u5f81\uff0c h^{(i)} \u4e3a\u7b2ci\u4e2a\u6837\u672c\u5bf9\u5e94\u7684\u5047\u8bbe\u51fd\u6570\u7684\u503c\uff0c h = h(w) = w_0 + w_1 \\times x_1 + w_2 \\times x_2 + \\cdots + w_n \\times x_n\\  \u4e0a\u9762\u5f0f\u5b50\u4e24\u8fb9\u540c\u65f6\u6c42log\uff0c\u5f97\u5230\u6700\u7ec8\u7684log\u53ef\u80fd\u6027\u51fd\u6570\uff1a l(w) = log(L(w)) = \\sum_{i=1}^n y^{(i)} log(s(h^{(i)})) + (1 - y^{(i)}) log(1 - s(h^{(i)}))  \u903b\u8f91\u56de\u5f52\u7684cost\u51fd\u6570  \n\u6700\u5927\u4f3c\u7136\u4f30\u8ba1\u5c31\u662f\u8981\u6c42\u5f97\u4f7fl(w)\u53d6\u6700\u5927\u503c\u65f6\u7684w\uff0c\u8fd9\u91cc\u53ef\u4ee5\u4f7f\u7528\u68af\u5ea6\u4e0a\u5347\u6cd5\u6c42\u89e3\uff0c\u82e5\u8981\u7528\u68af\u5ea6\u4e0b\u964d\u6cd5\uff0c\u5c31\u8981\u4e58\u4ee5\u4e00\u4e2a\u8d1f\u6570\uff0c\u5728\u8fd9\uff0c\u6211\u4eec\u53ef\u4ee5\u5148\u76f4\u63a5\u4e58\u4ee5-1\u5f97\u5230\u5982\u4e0b\u516c\u5f0f\uff1a J(w) = -l(w) = -log(L(w)) = \\sum_{i=1}^n -y^{(i)} log(s(h^{(i)})) - (1 - y^{(i)}) log(1 - s(h^{(i)})) \n\u73b0\u5728\uff0c\u6211\u4eec\u5c31\u5206\u6790\u4e00\u4e2a\u6837\u672c\uff0c\u90a3\u4e48\u53ef\u4ee5\u628a\u4e0a\u9762\u7684cost\u51fd\u6570\u5199\u6210\u5982\u4e0b\u5f62\u5f0f\uff1a   J(w) = -ylog(s(h)) - (1 - y)log(1 - s(h))   \u7576y=0\u6642\uff0c\u4e0a\u5f0f\u7684\u524d\u9762\u4e00\u9805 -ylog(s(h)) = 0 \uff0c\u800c\u7576y=1\u6642\uff0c\u5f8c\u9762\u4e00\u9805 (1 - y)log(1 - s(h)) = 0 \uff0c\u6545\u4e0a\u5f0f\u53ef\u5beb\u6210\u5982\u4e0b\u5206\u6bb5\u51fd\u6570\uff1a   \\phi\\left(x\\right)=\\left\\{\n\\begin{aligned}\n-log(s(h)) &\\ \\quad if\\ y = 1 \\\\\n-log(1 - s(h)) &\\ \\quad if\\ y = 0\n\\end{aligned}\n\\right.  \nthe previous plot illustrates the cost for the classification of a single-sample instance for different values of s(h).\n\u597d\u4e86\uff0c\u73b0\u5728\u7684\u76ee\u6807\u662f\u6700\u5c0f\u5316cost\u51fd\u6570\uff0c\u627e\u5230\u6700\u4f73\u7684\u53c2\u6570 \\bf w \uff0c\u65b9\u6cd5\u662f\u68af\u5ea6\u4e0b\u964d\u6cd5\u3002  \u68af\u5ea6\u4e0b\u964d\u6cd5\u6c42\u6a21\u578b\u53c2\u6570 \\bf w   \u5bf9l(w)\u51fd\u6570\u4e58\u4ee5 -\\frac{1}{n} \uff0cn\u662f\u6837\u672c\u6570\u91cf, \u6240\u4ee5\uff0ccost\u51fd\u6570\u4e3a\uff1a J(w) = -\\frac{1}{n}l(w) \n\u6b63\u56e0\u4e3a\u4e58\u4e86\u4e00\u4e2a\u8d1f\u7684\u7cfb\u6570 -\\frac{1}{n} \uff0c\u6240\u4ee5J(w)\u53d6\u6700\u5c0f\u503c\u65f6\u7684w\u4e3a\u8981\u6c42\u7684\u6700\u4f73\u53c2\u6570\u3002\u6839\u636e\u68af\u5ea6\u4e0b\u964d\u6cd5\u53ef\u5f97\u5230$\\bf w$\u7684\u66f4\u65b0\u89c4\u5219\u5982\u4e0b\uff1a \\bf w_j: = w_j \\ + \\ \\Delta {\\bf w_j}    \\Delta \\bf w_j = -\\eta \\nabla J(w)= -\\eta \\frac{\\partial J(w)}{\\partial w_j} = \\eta\\left(y^\\left(i\\right) - h_w\\left(x^{(i)}\\right) \\right)x_j^\\left(i\\right) \n\u5176\u4e2d\uff0c j = 1, 2, 3, \\cdots m \\  \u4ee3\u8868\u7684\u662f\u6837\u672c\u7684\u7b2cj\u7ef4\u7684\u7279\u5f81\uff0c x^{(i)} \u4ee3\u8868\u7684\u662fn\u500b\u6a23\u672c\u4e2d\u7684\u7b2ci\u500b\u6a23\u672c\uff0c \\eta \u662f\u5b66\u4e60\u7387\uff0c\u662f0~1\u4e4b\u95f4\u7684\u6570\uff0c h_w(x^{(i)}) \u4e3a\u51c0\u8f93\u5165\uff0c \\frac{\\partial J(w)}{\\partial w_j} \u4e3acost\u51fd\u6570 J(w) \u7684\u68af\u5ea6\u3002\n\u5b8c\u6574\u7248\u7684\u68af\u5ea6\u4e0b\u964d\uff1a \\bf w_j: = w_j \\ - \\eta \\sum_{i=1}^n (h_w(x^{(i)}) - y^{(i)})x_j^{(i)} \\quad j = 1, 2, 3, \\cdots m \n\u68af\u5ea6\u4e0a\u5347\u6cd5\uff1a   \\bf w_j: = w_j \\ + \\eta \\sum_{i=1}^n (y^{(i)} - h_w(x^{(i)})x_j^{(i)}  \\quad j = 1, 2, 3, \\cdots m   \u56e0\u6b64\uff0c\u7ed9\u5b9a\u521d\u59cb\u7684\u6a21\u578b\u7cfb\u6570\uff08w\uff09\u540e\uff0c\u6a21\u578b\u5c31\u4f1a\u5229\u7528\u68af\u5ea6\u4e0b\u964d\u7b97\u6cd5\u81ea\u52a8\u5b66\u4e60\u5230\u5408\u9002\u7684\u6a21\u578b\u7cfb\u6570w\uff0c\u62ff\u5230\u6743\u91cd\uff08\u6a21\u578b\uff09\u7cfb\u6570\u540e\uff0c\u5c31\u53ef\u6839\u636e\u51b3\u7b56\u51fd\u6570\u7684\u8f93\u51fa\u5bf9\u6837\u672c\u6570\u636e\u8fdb\u884c\u5206\u7c7b\u5206\u6790\u4e86\u3002  \u5173\u4e8e\u68af\u5ea6\u4e0b\u964d\u8fc7\u7a0b\u5411\u91cf\u5316  vectorization\u540e$\\bf w$\u66f4\u65b0\u7684\u6b65\u9aa4\u5982\u4e0b\uff1a\n\uff081\uff09\u6c42 A = \\bf X {\\bullet} {\\bf w} \uff1b\n\uff082\uff09\u6c42E = h(A) - y\uff1b\n\uff083\uff09\u6c42 w: = w -\\eta {\\bullet} X' {\\bullet} E \uff0cX'\u8868\u793a\u77e9\u9635X\u7684\u8f6c\u7f6e\u3002", 
            "title": "\u903b\u8f91\u56de\u5f52\u6a21\u578b\u89e3\u8bfb"
        }, 
        {
            "location": "/machine_learning/logistic_regression/logistic regression_forshow/#pythonsklearn", 
            "text": "", 
            "title": "python\u4ee3\u7801\u793a\u4f8b(sklearn)"
        }, 
        {
            "location": "/machine_learning/logistic_regression/logistic regression_forshow/#sepal-length-and-petal-length-as-x", 
            "text": "X = df.iloc[:, [0,2]].values  # .values\u3000\u662f\u5c06pandas\u7684DataFrame\u6216Series\u6570\u636e\u7ed3\u6784\u53d8\u6210numpy\u7684array\u7684\u6570\u7ec4\u6216\u77e9\u9635\u7c7b\u578b\nX.shape\nX[-2:, :]  array([[ 6.2,  5.4],\n       [ 5.9,  5.1]])  fig, ax = plt.subplots(figsize=(7,7))\nax.scatter(X[:50, 0], X[:50, 1], marker= o , label= setosa , c= white , edgecolor= purple )\nax.scatter(X[50:100, 0], X[50:100, 1], c= blue , marker= x , label= versicolor )\nax.scatter(X[100:, 0], X[100:, 1], marker= ^ , label= virginica , c= white , edgecolor= red )\nax.set_xlabel( sepal length [cm] )\nax.set_ylabel( petal length [cm] )\nax.legend(loc= upper left )\nax.grid(True)   seaborn\u7ed8\u5236\u6563\u70b9\u56fe  # sns.scatterplot(x= petal length , y= sepal length , data=df, hue= iris ,kind= point )\ng = sns.FacetGrid(df, hue= iris , size=7, legend_out=False, hue_kws=dict(marker=[ o ,  x ,  ^ ]))\ng.map(plt.scatter,  sepal length ,  petal length ,  alpha=.7)\ng.add_legend();   df.head(3)   \n   \n     \n       \n       sepal length \n       sepal width \n       petal length \n       petal width \n       iris \n     \n   \n   \n     \n       0 \n       5.1 \n       3.5 \n       1.4 \n       0.2 \n       Iris-setosa \n     \n     \n       1 \n       4.9 \n       3.0 \n       1.4 \n       0.2 \n       Iris-setosa \n     \n     \n       2 \n       4.7 \n       3.2 \n       1.3 \n       0.2 \n       Iris-setosa \n     \n      y = df.iloc[:, 4]\ny.unique()\n# \u5c06\u6570\u636e\u96c6\u7684\u5b57\u7b26\u7c7b\u578b\u7684\u6570\u636e\u8f6c\u53d8\u6210\u6570\u503c\u7c7b\u578b,Iris-setosa\u6807\u8bb0\u4e3a\uff10,Iris-Versicolor\u4e3a1\uff0c\n# Iris-virginica\u4e3a2\ny.replace(y.unique(), [0, 1, 2], inplace=True)\nY = y.values\n# Y = y.values.reshape(-1, 1)\nnp.shape(Y)\n# np.unique(Y)\n# [u'Iris-setosa', u'Iris-versicolor', u'Iris-virginica'][0, 1, 2]   (150,)  X = df.iloc[:, [0,2]].values  # .values\u3000\u662f\u5c06pandas\u7684DataFrame\u6216Series\u6570\u636e\u7ed3\u6784\u53d8\u6210numpy\u7684array\u7684\u6570\u7ec4\u6216\u77e9\u9635\u7c7b\u578b\n# X[-2:, :]\nnp.shape(X)  (150, 2)", 
            "title": "\u4e3a\u4e86\u7b80\u5316\u6d41\u7a0b\uff0c\u4ece\u56db\u4e2a\u7279\u5f81\u4e2d\u62bd\u53d6\u4e86\u4e24\u4e2a\u7279\u5f81\u7ec4\u6210\u7279\u5f81\u77e9\u9635\uff0c\u5373\u9009\u62e9\u4e86\u7b2c\u4e00\u5217\u82b1\u843c\u957f\u5ea6(sepal length) and \u7b2c\u4e09\u5217\u82b1\u74e3\u957f\u5ea6(petal length) as X"
        }, 
        {
            "location": "/machine_learning/logistic_regression/logistic regression_forshow/#sklearnlogisticregressioniris", 
            "text": "from sklearn.model_selection import train_test_split    \nfrom sklearn.model_selection import cross_val_score \nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.metrics import accuracy_score\n\nX_train, X_test, y_train, y_test = train_test_split(X, Y, test_size=0.3, random_state=0)\nsc = StandardScaler()\nsc.fit(X_train)\nX_train_std = sc.transform(X_train)\nX_test_std = sc.transform(X_test)\nX_combined_std = np.vstack((X_train_std, X_test_std))\ny_combined = np.hstack((y_train, y_test))\nlr = LogisticRegression(C=100, penalty= l2 , random_state=0, tol=1e-6)\nlr.fit(X_train_std, y_train)\nlr.predict_proba(X_test_std[0, :].reshape(1, -1))\n# np.shape(X_test_std[0, :]),\u8981\u6574\u5f62\u4e3a\uff08\uff11\uff0c\u3000\uff0d\uff11\uff09\n# np.shape(y_train)\ny_pred = lr.predict(X_test_std)\nprint( Misclassified samples: %d  % (y_test != y_pred).sum())\nprint( Accuracy: %.2f  % accuracy_score(y_test,y_pred))\nprint( cross validation score: %s  % cross_val_score(lr, X_train_std, y_train, cv=5))\nprint( mean cross validation score: %s  % cross_val_score(lr, X_train_std, y_train, cv=5).mean())  Misclassified samples: 1\nAccuracy: 0.98\ncross validation score: [ 0.95454545  1.          1.          0.9047619   0.94736842]\nmean cross validation score: 0.961335156072  \u67e5\u770b\u6a21\u578b\u662f\u5426\u8fc7\u62df\u5408\u53ef\u4ee5\u7528learning curve\u6765\u67e5\u770b\uff0c\u8fc7\u62df\u5408\u73b0\u8c61\u8868\u73b0\u4e3a\uff0c\u5728\u8bad\u7ec3\u96c6\u4e0a\u51c6\u786e\u7387\u5f97\u5206\u6bd4\u8f83\u9ad8\uff0c\u4f46\u4ea4\u53c9\u9a8c\u8bc1\u96c6\u4e0a\u5f97\u5206\u8f83\u4f4e\uff0c\u4e2d\u95f4gap\u8f83\u5927\uff0c\u4e00\u822c\u662f\u6a21\u578b\u8fc7\u4e8e\u590d\u6742\u5bfc\u81f4\uff0c\u4f46\u4e00\u822c\u968f\u7740\u6837\u672c\u91cf\u589e\u52a0\uff0c\u8fc7\u62df\u5408\u4f1a\u51cf\u5f31\u3002\u4e0e\u4e4b\u76f8\u53cd\u7684\u8fd8\u6709\u6b20\u62df\u5408\uff0c\u5373\u6a21\u578b\u590d\u6742\u5ea6\u4e0d\u591f\uff0c\u8bad\u7ec3\u96c6\u548c\u4ea4\u53c9\u9a8c\u8bc1\u96c6\u7684\u5f97\u5206\u5747\u8f83\u4f4e\u3002   \u6b20\u64ec\u5408 \u6700\u4f73\u64ec\u5408 \u904e\u64ec\u5408 \u3000  from sklearn.model_selection import learning_curve\n# \u7528sklearn\u7684learning_curve\u5f97\u5230training_score\u548ccv_score\uff0c\u4f7f\u7528matplotlib\u753b\u51falearning curve\ndef plot_learning_curve(estimator, title, X, y, ylim=None, cv=5, n_jobs=1, \n                        train_sizes=np.linspace(.05, 1., 20), verbose=0, plot=True):\n     \n    \u753b\u51fadata\u5728\u67d0\u6a21\u578b\u4e0a\u7684learning curve.\n    \u53c2\u6570\u89e3\u91ca\n    ----------\n    estimator : \u4f7f\u7528\u7684\u5206\u7c7b\u5668\u3002\n    title : \u56fe\u7684\u6807\u9898\u3002\n    X : \u8f93\u5165\u7684feature\uff0cnumpy\u7c7b\u578b\n    y : \u8f93\u5165\u7684target vector\n    ylim : tuple\u683c\u5f0f\u7684(ymin, ymax), \u8bbe\u5b9a\u56fe\u50cf\u4e2d\u7eb5\u5750\u6807\u7684\u6700\u4f4e\u70b9\u548c\u6700\u9ad8\u70b9\n    cv : \u505across-validation\u7684\u65f6\u5019\uff0c\u6570\u636e\u5206\u6210\u7684\u4efd\u6570\uff0c\u5176\u4e2d\u4e00\u4efd\u4f5c\u4e3acv\u96c6\uff0c\u5176\u4f59n-1\u4efd\u4f5c\u4e3atraining(\u9ed8\u8ba4\u4e3a3\u4efd)\n    n_jobs : \u5e76\u884c\u7684\u7684\u4efb\u52a1\u6570(\u9ed8\u8ba41)\n     \n    train_sizes, train_scores, test_scores = learning_curve(\n        estimator, X, y, cv=cv, n_jobs=n_jobs, train_sizes=train_sizes, verbose=verbose)\n\n    train_scores_mean = np.mean(train_scores, axis=1)  # train_scores\u662f\u4e00\u4e2a\uff12\uff10\u884c\uff15\u5217\u7684ndarry,20\u4e3a\u4ece\u6837\u672c\u53d6\u7684\u4e0d\u540c\u6bd4\u4f8b\u7684\u6837\u672c\u6570\u636e\u4f5c\u4e3aX, \u800c\uff15\u8868\u793a\uff15\u6b21\u4ea4\u53c9\u9a8c\u8bc1\n    train_scores_std = np.std(train_scores, axis=1)\n    test_scores_mean = np.mean(test_scores, axis=1)\n    test_scores_std = np.std(test_scores, axis=1)\n\n    if plot:\n        plt.figure(figsize=(7,7))\n        plt.title(title)\n        if ylim is not None:\n            plt.ylim(*ylim)\n        plt.xlabel( samples )\n        plt.ylabel( scores )\n        # plt.gca().invert_yaxis() \u4f8b\u5982y\u8f74\u5750\u68073000-10000\uff0c\u8c03\u6574\u4e3a10000-3000\u6765\u663e\u793a\n        plt.fill_between(train_sizes, train_scores_mean - train_scores_std, train_scores_mean + train_scores_std, \n                         alpha=0.2, color= b )\n        plt.fill_between(train_sizes, test_scores_mean - test_scores_std, test_scores_mean + test_scores_std, \n                         alpha=0.2, color= r )\n        plt.plot(train_sizes, train_scores_mean, '^-', color= blue , label= train score )\n        plt.plot(train_sizes, test_scores_mean, 'v-', color= red , label= cross_validation score )\n        plt.legend(loc= best )\n        plt.grid(True)\n        plt.show()                \nplot_learning_curve(lr,  learning curve , X_train_std, y_train)", 
            "title": "\u8c03\u7528sklearn\u5e93\u7684\u7c7bLogisticRegression\uff0c\u5b9e\u73b0\u5bf9Iris\u8bad\u7ec3\u96c6\u7684\u5b66\u4e60\uff0c\u7528\u4ea4\u53c9\u9a8c\u8bc1\u68c0\u9a8c\u5206\u7c7b\u6548\u679c\uff0c\u6700\u7ec8\u5c06\u8bad\u7ec3\u597d\u7684\u6a21\u578b\u5e94\u7528\u5728\u6d4b\u8bd5\u96c6\u8fdb\u884c\u9a8c\u8bc1"
        }, 
        {
            "location": "/machine_learning/logistic_regression/logistic regression_forshow/#_3", 
            "text": "from matplotlib.colors import ListedColormap\nimport matplotlib.pyplot as plt\ndef plot_decision_regions(X, Y, classifier, test_idx=None, resolution=0.02):\n    # \u5bf9\u5e94\u5206\u7c7b\u6807\u7b7e\n    y_maps = { 1 : Iris-versicolor ,  0 : Iris-setosa ,  2 :  Iris-virginica }\n    # setup marker generator and color map\n    markers = ( ^ ,  x ,  s ,  o ,  v )\n    colors = ( purple ,  red ,  blue ,  cyan ,  lightgreen , )  # gray \n    cmap = ListedColormap(colors[:len(np.unique(Y))])\n    # plot the decision surface    \n    x1_min, x1_max = X[:, 0].min() - 1, X[:, 0].max() + 1\n    x2_min, x2_max = X[:, 1].min() - 1, X[:, 1].max() + 1\n    xx1, xx2 = np.meshgrid(np.arange(x1_min, x1_max, resolution), np.arange(x2_min, x2_max, resolution))\n    Z = classifier.predict(np.array([xx1.ravel(), xx2.ravel()]).T)\n    Z = Z.reshape(xx1.shape)\n    plt.figure(figsize=(8,8))\n    plt.contourf(xx1, xx2, Z, alpha=0.4, cmap=cmap)          \n    plt.xlim(xx1.min(), xx1.max())\n    plt.ylim(xx2.min(), xx2.max())\n    # plot all samples\n    for idx, cl in enumerate(np.unique(Y)):        \n        plt.scatter(x=X[Y==cl, 0], y=X[Y==cl, 1], alpha=0.8, c=cmap(idx), marker=markers[idx],label=y_maps[str(cl)])        \n    # highlight test samples\n    if test_idx:\n        X_test, Y_test = X[test_idx, :], Y[test_idx]\n        X_test, Y_test = X[test_idx, :], Y[test_idx]\n        plt.scatter(X_test[:, 0], X_test[:, 1], c= , alpha=1.0, linewidth=1, marker= o , s=55, label= test set )  plot_decision_regions(X=X_combined_std, Y=y_combined, classifier=lr, test_idx=None)\nplt.xlabel( sepal length [standardized] cm , fontsize=16)\nplt.ylabel( petal length [standardized] cm , fontsize=14)\nplt.legend(loc= upper left )  matplotlib.legend.Legend at 0x7fdd1fee2f50", 
            "title": "\u51b3\u7b56\u8fb9\u754c\u793a\u610f\u56fe"
        }, 
        {
            "location": "/machine_learning/logistic_regression/logistic regression_forshow/#_4", 
            "text": "\u3010\u673a\u5668\u5b66\u4e60\u7b14\u8bb01\u3011Logistic\u56de\u5f52\u603b\u7ed3 http://blog.csdn.net/dongtingzhizi/article/details/15962797  \u3010\u673a\u5668\u5b66\u4e60\u7b14\u8bb02\u3011Linear Regression\u603b\u7ed3 http://blog.csdn.net/dongtingzhizi/article/details/16884215  Logistic Regression \u6a21\u578b\u7b80\u4ecb\u3000https://tech.meituan.com/intro_to_logistic_regression.html  \u903b\u8f91\u56de\u5f52\u7b97\u6cd5\u7684\u539f\u7406\u53ca\u5b9e\u73b0(LR) http://www.cnblogs.com/nxld/p/6124235.html  \u903b\u8f91\u56de\u5f52\uff08Logistic regression\uff09\u8be6\u89e3-\u5e76\u7528scikit-learn\u8bad\u7ec3\u903b\u8f91\u56de\u5f52\u62df\u5408Iris\u6570\u636e\u96c6  http://blog.csdn.net/xlinsist/article/details/51289825  Sklearn-LogisticRegression\u903b\u8f91\u56de\u5f52 http://blog.csdn.net/cherdw/article/details/54891073  \u673a\u5668\u5b66\u4e60\u7b97\u6cd5\u4e0ePython\u5b9e\u8df5\u4e4b\uff08\u4e03\uff09\u903b\u8f91\u56de\u5f52\uff08Logistic Regression\uff09 http://blog.csdn.net/zouxy09/article/details/20319673  \u673a\u5668\u5b66\u4e60\u7b97\u6cd5\u4e0ePython\u5b9e\u8df5\u4e4b\uff08\u4e03\uff09\u903b\u8f91\u56de\u5f52\uff08Logistic Regression http://blog.csdn.net/wenyusuran/article/details/25824011  \u6b63\u5219\u5316\u65b9\u6cd5\uff1aL1\u548cL2 regularization\u3001\u6570\u636e\u96c6\u6269\u589e\u3001dropout http://blog.csdn.net/u012162613/article/details/44261657  LaTeX \u5404\u79cd\u547d\u4ee4\u7b26\u53f7 http://blog.csdn.net/anxiaoxi45/article/details/39449445", 
            "title": "\u53c2\u8003\u6587\u732e"
        }, 
        {
            "location": "/machine_learning/perceptron_classifier/perceptron_classifier_blog/", 
            "text": "\u5355\u5c42\u611f\u77e5\u5668\u7b80\u4ecb\n\n\n\u611f\u77e5\u5668(perceptron)\u662f\u6a21\u4eff\u4eba\u8111\u795e\u7ecf\u5143\u7684\u7ebf\u6027\u5206\u7c7b\u7b97\u6cd5\n\n\n\u795e\u7ecf\u5143\u7684\u6784\u6210\u5982\u4e0b\u56fe\u6240\u793a\uff0c\u4e3b\u8981\u5305\u62ec\u6811\u7a81(Dendrites)\uff0c\u7ec6\u80de\u6838(Cell Body)\u548c\u8f74\u7a81(Axon)\u3002\n\n\n\n\u611f\u77e5\u5668\u662f\u4e00\u79cd\u7814\u7a76\u5355\u4e2a\u8bad\u7ec3\u6837\u672c\u7684\u4e8c\u5143\u5206\u7c7b\u5668\u3002\n\n\n\n\u795e\u7ecf\u5143\u53ca\u5355\u5c42\u611f\u77e5\u5668\u793a\u610f\u56fe\n\n \n\n \n\n\n\u4e3a\u5565\u8981\u626f\u6de1\u611f\u77e5\u5668\n\n\n\u7406\u89e3\u611f\u77e5\u5668\u7684\u5de5\u4f5c\u539f\u7406\uff0c\u662f\u5b66\u4e60\u4e24\u79cd\u8d85\u7ea7\u6b66\u5668\u7684\u57fa\u7840\uff0c\u5373\u652f\u6301\u5411\u91cf\u673a(support vector machines)\u548c\u4eba\u5de5\u795e\u7ecf\u7f51\u7edc(artificial neural networks)\u7684\u57fa\u7840\u4e4b\u4e00\n\n\n\u9996\u5148\uff0c\u6e29\u6545\u4e00\u4e0b\u76f4\u7ebf\u65b9\u7a0b\n\n\n\n\n\n y = ax + b \n\n\n\u81ea\u53d8\u91cfx\u4e58\u4ee5\u659c\u7387a\u518d\u52a0\u4e0a\u622a\u8dddb\u5c31\u5f97\u5230\u4e86\u56e0\u53d8\u91cfy\n\n\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\n%matplotlib inline\n\n\n\n\nx = np.arange(-10, 10)\na, b = 2, 5\nfig, ax = plt.subplots()\n# \u9690\u85cf\u4e0a\u8fb9\u548c\u53f3\u8fb9\nax.spines[\ntop\n].set_color(\nnone\n) \nax.spines[\nright\n].set_color(\nnone\n) \n# \u79fb\u52a8\u53e6\u5916\u4e24\u4e2a\u8f74\nax.xaxis.set_ticks_position(\nbottom\n)\nax.spines['bottom'].set_position(('data', 0))\nax.yaxis.set_ticks_position('left')\nax.spines['left'].set_position(('data', 0))\nax.plot(x, a*x+b, linewidth=2, label=\ny=2x+5\n)\nax.legend()\nax.grid(True, linestyle=\n:\n, linewidth=1, alpha=0.8)\n\n\n\n\n\n\nn\u5143\u4e00\u6b21\u65b9\u7a0b\n\n\n\n\u4e00\u5143\u4e00\u6b21\u65b9\u7a0b:\n\n\\quad y \\ = \\ ax \\ + \\ b \\quad \u4f8b\u5982\uff1a\\ y = 2x + 5\n\n\n\n\u53ef\u4ee5\u5199\u6210\uff1a\n\n\n\\quad y \\ = \\ w_0 \\times x_0 \\ + \\ w_1 \\times x_1 \\quad \u5176\u4e2dw_0 =5, \\ x_0=1, \\ w_1=2, \\ x_1=x \n\n\n\n\n\u4e8c\u5143\u4e00\u6b21\u65b9\u7a0b:\n\n\\quad y \\ = \\ ax \\ + \\ bx \\ + \\ c \n\n\n\n\u53ef\u4ee5\u5199\u6210\uff1a  \n\\quad y \\ = \\ w_0 \\times x_0 \\ + \\ w_1 \\times x_1 \\ + \\ w_2 \\times x_2 \\quad \u5176\u4e2dx_0=1, \\ w_0=c\n\n\n\n\nn\u5143\u4e00\u6b21\u65b9\u7a0b\u8868\u8fbe\u5f0f\u53ca\u77e9\u9635\u8868\u793a\uff1a\n\n\n\n\ny \\ = \\ w_0\\times x_0 + w_1 \\times x_1 + w_2 \\times x_2 + \\cdot\\cdot\\cdot \\ w_n \\times x_n \\ \n\n\n\n\n\n\n=\\underbrace{\\begin{bmatrix} w_0 & w_1 & w_2 & \\cdots\\ &w_n \\end{bmatrix}}_{\u6743\u91cd\u7cfb\u6570\u5411\u91cf\\bf w} {\\ \\bullet}  \\underbrace{\\begin{bmatrix} x_{0} \\\\ x_{1} \\\\ x_{2} \\\\ \\vdots \\\\ x_n \\end{bmatrix}}_{\u6837\u672c\u7279\u5f81\u77e9\u9635\\bf x}\n\n\n\n\n\n\n=\\ {\\bf w^T x} \\quad {\u5176\u4e2dx_0=1}\n\n\n\n\n\u611f\u77e5\u5668\u7684\u6982\u5ff5\u5256\u6790\n\n\n\u795e\u7ecf\u5143\u7684\u5de5\u4f5c\u539f\u7406:\n\n\n\n\u6811\u7a81\u4ece\u4e00\u4e2a\u6216\u591a\u4e2a\u5176\u4ed6\u795e\u7ecf\u5143\u63a5\u53d7\u7535\u4fe1\u53f7\uff0c\u4fe1\u53f7\u5728\u5176\u7ec6\u80de\u6838\u5904\u7406\u540e\u4ece\u8f74\u7a81\u8f93\u51fa\u3002\u4e00\u4e2a\u611f\u77e5\u5668\u5c31\u662f\u5c06\u4e00\u4e2a\u6216\u591a\u4e2a\u8f93\u5165\nx_0, x_1, x_2 \\cdot\\cdot\\cdot x_n \n\u5904\u7406\u5e76\u8f93\u51fa\u7684\u8ba1\u7b97\u5355\u5143\u3002\u6bcf\u4e2a\u8f93\u5165\u4ee3\u8868\u4e86\u4e00\u4e2a\u7279\u5f81\uff0c\u901a\u5e38\uff0c\u611f\u77e5\u5668\u7528\u4e00\u4e2a\u7279\u5b9a\u7684\u8f93\u5165\u5355\u5143\u4ee3\u8868\u8f93\u5165\u8bef\u5dee\u9879\uff0c\u5176\u8868\u8fbe\u5f0f\u662f  \n\\quad x_0\\times \\theta \\quad \u5176\u4e2dx_0=1,\\ \\theta\u4e3a\u9608\u503c\n\n\n\n\n\u51c0\u8f93\u5165:\n\n\u5c06\u6240\u6709\u7684\u8f93\u5165\u5355\u5143\u503c(\u5373\u6837\u672c\u7279\u5f81\u503c)\u4e58\u4ee5\u5bf9\u5e94\u7684\u6743\u91cd\u7cfb\u6570\u518d\u52a0\u4e0a\u8bef\u5dee\u9879\u5c31\u5f97\u5230\u4e86\u51c0\u8f93\u5165z\n\n\n\n\n\n z = \\underbrace{w_0x_0}_{=\\theta\\times1} + \\underbrace{w_1x_1 + w_2x_2 + \\cdots + w_nx_n}_{\u6837\u672c\u7279\u5f81\u503c\u4e0e\u6743\u91cd\u7cfb\u6570\u4e58\u79ef\u4e4b\u548c}= {\\bf w^T}{\\bf x}\n\n\n\n\n\u6fc0\u52b1\u51fd\u6570:\n\n\n\n\u5e38\u7528\u7684\u6fc0\u52b1\u51fd\u6570\u6709\u591a\u79cd\uff0c\u5982\u9636\u8dc3\u51fd\u6570(unit step function\u6216Heaviside step function)\u548c\u903b\u8f91S\u5f62\u51fd\u6570(logistic sigmoid)\u3002\n\n\n\u4ee5\u4e0b\u793a\u4f8b\u4f7f\u7528\u7684\u5747\u662f\u6700\u7b80\u5355\u7684\u9636\u8dc3\u51fd\u6570\u3002\n\n\\phi\\left(x\\right)=\\left\\{\n\\begin{aligned}\n1 &\\ \\quad if\\ z\\geq \\theta \\\\\n-1 &\\ \\quad otherwise.\n\\end{aligned}\n\\right.\n\n\n\n\u9636\u8dc3\u51fd\u6570\n$\\ \\theta=0$\n\n\n\u9636\u8dc3\u51fd\u6570\n\n\n\n\n\u611f\u77e5\u5668\u6267\u884c\u6d41\u7a0b:\n\n\n\n\u611f\u77e5\u5668\u662f\u4e00\u79cd\u9519\u8bef\u9a71\u52a8(error-drive)\u7684\u5b66\u4e60\u7b97\u6cd5\u3002\u611f\u77e5\u5668\u5b66\u4e60\u7b97\u6cd5\u9996\u5148\u8981\u5c06\u6743\u91cd\u7cfb\u6570 (\n\\bf w_i \n) \u8bbe\u7f6e\u6210\uff10\u6216\u5f88\u5c0f\u7684\u968f\u673a\u6570\uff0c\u7136\u540e\u9884\u6d4b\u8bad\u7ec3\u6837\u672c\u7684\u7c7b\u578b\u3002\u82e5\u611f\u77e5\u5668\u7684\u9884\u6d4b\u4e0e\u5b9e\u9645\u503c\u4e00\u81f4\uff0c\u5219\u6743\u91cd\u7cfb\u6570\u4e0d\u6539\u53d8\uff0c\u5982\u679c\u611f\u77e5\u5668\u9884\u6d4b\u9519\u8bef\uff0c\u7b97\u6cd5\u5c31\u66f4\u6539\u6743\u91cd\u7cfb\u6570\uff0c\u63a5\u7740\uff0c\u5c06\u6743\u91cd\u4f20\u9012\u7ed9\u4e0b\u4e00\u4e2a\u6837\u672c\u4f5c\u4e3a\u4e0b\u4e00\u4e2a\u6837\u672c\u7684\u521d\u59cb\u6743\u91cd\u5e76\u7ee7\u7eed\u5904\u7406\u4e0b\u4e00\u4e2a\u6837\u672c\uff1b\u5f53\u6837\u672c\u96c6\u4e2d\u7684\u6240\u6709\u6837\u672c\u5747\u88ab\u5b66\u4e60\u4e00\u904d\u540e\uff0c\u672c\u4e16\u4ee3\u5b66\u4e60\u7ed3\u675f\uff0c\u5e76\u5f00\u59cb\u4e0b\u4e00\u4e16\u4ee3\u7684\u5b66\u4e60\u548c\u8bad\u7ec3\uff0c\u5c31\u8fd9\u6837\u5faa\u73af\u6307\u5b9a\u7684\u4e16\u4ee3\u6570\u540e\uff0c\u5b66\u4e60\u7ed3\u675f\u3002\n\n\n\u6743\u91cd\u7cfb\u6570\u7684\u66f4\u65b0\u89c4\u5219\n:\n\n\\bf w_j:=w_j \\ + \\ \\Delta {\\bf w_j}\n\n\n\n\n\n\n\\Delta \\bf w_j=\\eta\\left(y^\\left(i\\right)-\\hat{y}^\\left(i\\right) \\right)x_j^\\left(i\\right)\n\n\n\n\n\u5176\u4e2d\uff0c\n\\bf w_j:\n\u662f\u6837\u672c\u96c6\u7b2cj\u7ef4\u7279\u5f81\u66f4\u65b0\u540e\u7684\u6743\u91cd\uff0c\n\\bf w_j\n\u662f\u5f53\u524d\u6837\u672c\u7684\u4e0a\u4e00\u4e2a\u6837\u672c\u8ba1\u7b97\u5f97\u5230\u7684\u6743\u91cd\uff0c\n\\Delta \\bf w_j\n\u662f\u6839\u636e\u5f53\u524d\u6837\u672c\u8ba1\u7b97\u7684\u6743\u91cd\u7684\u589e\u91cf\uff0c\n\\eta\n\u662f\u4eba\u4e3a\u6307\u5b9a\u7684\u8d85\u53c2\u6570\u2014\u2014\u5b66\u4e60\u7387(learning rate, a constant between 0.0 and 1.0)\uff0c\ny^\\left(i\\right)\n\u662f\u5f53\u524d\u6837\u672c\u7684\u5206\u7c7b\u6807\u7b7e\u503c\uff0c\n\\hat{y}^\\left(i\\right)\n\u662f\u9884\u6d4b\u7684\u5206\u7c7b\u6807\u7b7e\u7684\u503c\uff0c\nx_j^\\left(i\\right)\n\u662f\u7b2ci\u4e2a\u6837\u672c\u7684\u7b2cj\u7ef4\u7279\u5f81\u3002\n\n\n\n\n\\bf w\n\u7684\u66f4\u65b0\u89c4\u5219\u4e0e\u68af\u5ea6\u4e0b\u964d\u6cd5\u4e2d\u7684\u6743\u91cd\u66f4\u65b0\u89c4\u5219\u7c7b\u4f3c\uff0c\u90fd\u662f\u671d\u7740\u4f7f\u6837\u672c\u5f97\u5230\u6b63\u786e\u5206\u7c7b\u7684\u65b9\u5411\u66f4\u65b0\u6743\u91cd\uff0c\u4e14\u66f4\u65b0\u7684\u5e45\u5ea6\u662f\u7531\u5b66\u4e60\u901f\u7387(\n\\eta\n)\u63a7\u5236\u7684\u3002\u6bcf\u904d\u5386\u4e00\u6b21\u6837\u672c\u96c6\u7684\u6240\u6709\u6837\u672c\u79f0\u5b8c\u6210\u4e86\u4e00\u4e16\u4ee3(epoch)\u3002\u82e5\u5b66\u4e60\u5b8c\u4e00\u4e16\u4ee3\u540e\uff0c\u6240\u6709\u7684\u6837\u672c\u90fd\u5206\u7c7b\u6b63\u786e\uff0c\u90a3\u4e48\u7b97\u6cd5\u5c31\u4f1a\u6536\u655b(converge)\u3002\u8981\u6ce8\u610f\u7684\u662f\uff0c\u611f\u77e5\u5668\u7684\u5b66\u4e60\u7b97\u6cd5\u5e76\u4e0d\u4fdd\u8bc1\u7b97\u6cd5\u672c\u8eab\u7684\u6536\u655b\uff0c\u5f53\u6837\u672c\u662f\u7ebf\u6027\u4e0d\u53ef\u5206\u7684\u65f6\u5019\uff0c\u662f\u4e0d\u53ef\u80fd\u6536\u655b\u7684\u3002\u56e0\u6b64\uff0c\u8981\u6307\u5b9a\u4e00\u4e2a\u8d85\u53c2\u6570(\nn_{iter}\n)\u6765\u9650\u5236\u6743\u91cd\u66f4\u65b0\u7684\u6700\u5927\u4e16\u4ee3\u6570\u3002\n\n\n\u4e00\u4e2a\u5c0f\u6848\u4f8b:\n\n\n\n\u4ece\u4e00\u7a9d\u732b\u91cc\u5206\u8fa8\u5e7c\u732bor\u6210\u5e74\u732b\n\n\n\u641e\u6e05\u51e0\u4e2a\u6982\u5ff5\uff1a\n\n\n\n\n\n\u6837\u672c\n\n\n\u7279\u5f81\n\n\n\u5206\u7c7b\u6807\u7b7e\n\n\n\u8bad\u7ec3\u96c6(train)\n\n\n\u6d4b\u8bd5\u96c6(test)\n\n\n\n\n# \u521b\u5efa\u6837\u672c\u7279\u5f81\u77e9\u9635\nX = np.array([\n    [0.2, 0.1],\n    [0.4, 0.6],\n    [0.5, 0.6],\n    [0.7, 0.9]\n])\n# \u521b\u5efa\u5206\u7c7b\u6807\u7b7e\ny = [1, 1, 1, 0]\n# \u6563\u70b9\u56fe\nplt.grid(True, linestyle=\n:\n, linewidth=1, alpha=0.8)\nplt.scatter(X[:3, 0], X[:3, 1], marker=\no\n, c=\nwhite\n, edgecolor=\nred\n)\nplt.scatter(X[3:, 0], X[3:, 1], marker=\nx\n)\nplt.xlabel(\npro of sleep day\n, fontsize=16)\nplt.ylabel(\npro of crazy day\n, fontsize=16)\nplt.title(\ncharacter of kitten and adult cats\n, fontsize=14)\n\n\n\n\nmatplotlib.text.Text at 0x7f7920cb6190\n\n\n\n\n\n\n\u6743\u91cd\u66f4\u65b0\u8fc7\u7a0b\n\n\n\n\u4e16\u4ee3\uff11\uff0c\u5373\u7b2c\u4e00\u6b21\u5faa\u73af\uff0c\u5f00\u59cb\u7684\u65f6\u5019\uff0c\u6240\u6709\u7684\u6743\u91cd\u8bbe\u7f6e\u4e3a0,\nw_1=0,w_2=0,w_3=0\n\n\u7279\u5f81\u5206\u522b\u4e3a\nx_0=1, x_1=0.2, x_2=0.1\n\n\u6839\u636e\u51c0\u8f93\u5165\u548c\u6fc0\u52b1\u51fd\u6570\u51b3\u5b9a\u662f\u5426\u66f4\u6539\u6743\u91cd\u7cfb\u6570\n\n\n\u51c0\u8f93\u5165z\u548c\u6fc0\u52b1\u51fd\u6570 \\(\\phi\\left(x\\right)\\) \n\n\n\n\n\n z = \\underbrace{w_0x_0}_{=\\theta\\times1} + \\underbrace{w_1x_1 + w_2x_2 + \\cdot\\cdot\\cdot +w_nx_n}_{\u8f93\u5165\u5355\u5143\u503c\u4e0e\u6743\u91cd\u7cfb\u6570\u4e58\u79ef\u4e4b\u548c}= {\\bf w^T}{\\bf x}\\quad\n\n\n\\phi\\left(x\\right)=\\left\\{\n\\begin{aligned}\n1 &\\ \\quad if\\ z\\gt \\theta \\\\\n0 &\\ \\quad otherwise.\n\\end{aligned}\n\\right. \n\n\n\n\n\u6743\u91cd\u66f4\u65b0\n\n\n\n\n\n\\bf w_j:=w_j \\ + \\ \\Delta \\bf w_j \\quad\n\n\n\\quad \\Delta \\bf w_j=\\eta\\left(y^\\left(i\\right)-\\hat{y}^\\left(i\\right) \\right)x_j^\\left(i\\right)\n\n\n\n\n\u521d\u59cb\u6743\u91cd\n\\ w_0 = \\left[0, 0, 0 \\right]\n\uff0c\u4e3a\u4e86\u7b80\u5316\u8ba1\u7b97\uff0c\u4ee4\n\\eta=1.0\n\u3000\n\n\u7b2c\u4e00\u4e16\u4ee3\uff0c\u611f\u77e5\u5668\u5b66\u4e60\u7b2c\u4e00\u4e2a\u6837\u672c\u5bf9\u6743\u91cd\u7cfb\u6570\u7684\u66f4\u65b0\u8fc7\u7a0b\n\n\n\u7b2c\u4e00\u4e2a\u6837\u672c\u7279\u5f81\u503c\u4e3a\uff1a\nx_0=\\left[1.0,0.2,0.1\\right]\n\n\u6839\u636e\u6743\u91cd\u66f4\u65b0\u7684\u516c\u5f0f\uff0c\u8ba1\u7b97w\u7684\u589e\u91cf\uff1a\n\n\n\n\n\\Delta \\bf w_j=\\eta\\left(y^\\left(i\\right)-\\hat{y}^\\left(i\\right) \\right)x_j^\\left(i\\right) \n\n\n\n\n\n\n= 1.0\\times \\left(\u5b9e\u9645\u6807\u7b7e\u503c\uff0d\u9884\u6d4b\u6807\u7b7e\u503c\\right) \\times \\underbrace{\u5411\u91cf\\bf x}_{\u7b2c\u4e00\u4e2a\u6837\u672c\u7684\u7279\u5f81\u5411\u91cf} \\quad \n\n\n\n\n\n\n= 1.0\\times \\left(1\uff0d0\\right) \\times \\left[1.0, 0.2, 0.1 \\right] \n\n\n\n\n\n\n= \\left[1.0, 0.2, 0.1 \\right]\n\n\n\n\n\u56e0\u6b64\uff0c\u7531\n\\bf w_j:=w_j \\ + \\ \\Delta \\bf w_j \n\u5f97\u66f4\u65b0\u540e\u7684\u6743\u91cd: \n\\bf w = \\left[0,0,0\\right] \\ + \\ \\left[1.0,0.2,0.1\\right] = \\left[1.0,0.2,0.1\\right]\n\n\n\n\n\u7b2c\u4e00\u4e16\u4ee3\u7684\u7b2c\u4e00\u4e2a\u6837\u672c\u5b66\u4e60\u5b8c\u6bd5\uff0c\u5c06\u4ece\u7b2c\u4e00\u4e2a\u6837\u672c\u5b66\u4e60\u5230\u7684\u6743\u91cd\n\\bf w=\\left[1.0,0.2,0.1\\right]\n\u4f20\u9012\u7ed9\u4e0b\u4e00\u4e2a\u6837\u672c\u4f5c\u4e3a\u521d\u59cb\u6743\u91cd\u63a5\u7740\u5b66\u4e60\u3002\u4e0b\u9762\u63a2\u8ba8\u7b2c\u4e8c\u4e2a\u6837\u672c\u6743\u91cd\u66f4\u65b0\u8fc7\u7a0b\uff1a\n\u521d\u59cb\u6743\u91cd\nw_1 = \\left[1.0,0.2,0.1\\right]\n\uff0c\n\\eta=1.0\n\n\n\u7b2c\u4e00\u4e16\u4ee3\uff0c\u611f\u77e5\u5668\u5b66\u4e60\u7b2c\u4e8c\u4e2a\u6837\u672c\u5bf9\u6743\u91cd\u7cfb\u6570\u7684\u66f4\u65b0\u8fc7\u7a0b\n\n\n\u7b2c\u4e8c\u4e2a\u6837\u672c\u7279\u5f81\u503c\u4e3a\uff1a\nx_\uff11=\\left[1.0,0.4,0.6\\right]\n\n\n\n\n\u51c0\u8f93\u5165\uff1a\nz={\\bf w^T}{\\bf x}=w_0x_0 + w_1x_1 + w_2x_2 + \\cdot\\cdot\\cdot +w_nx_n = 1.0\\times1.0 + 0.2\\times0.4 + 0.1\\times0.6 = 1.14 \\gt0$\n\n\n\n\n\u6839\u636e\u6fc0\u52b1\u51fd\u6570\n\\phi\\left(x\\right)=\\left\\{\n\\begin{aligned}\n1 &\\ \\quad if\\ z\\geq \\theta \\\\\n0 &\\ \\quad otherwise.\n\\end{aligned}\n\\right.\n\n\n\u53ef\u77e5\u9884\u6d4b\u503c\u4e3a1,\u9884\u6d4b\u5206\u7c7b\u6807\u7b7e\u503c\u4e0e\u5b9e\u9645\u5206\u7c7b\u6807\u7b7e\u503c\u76f8\u540c\uff1b\n\n\n\u66f4\u65b0\u6743\u91cd\uff1a\n$\\Delta \\bf w_j=\\eta\\left(y^\\left(i\\right)-\\hat{y}^\\left(i\\right) \\right)x_j^\\left(i\\right)\u3000\uff1d\u30001.0\\times \\left(1.0-1.0\\right)\\times \\left[1.0,0.4,0.6\\right] = \\left[0,0,0\\right]\n\n\n\n\n\n\n\\bf w_j:=w_j \\ + \\ \\Delta \\bf w_j = \\left[1.0,0.2,0.1\\right] + \\left[0,0,0\\right] = \\left[1.0,0.2,0.1\\right]\n\n\n\n\n\u5728\u5b66\u4e60\u7b2c\u4e8c\u4e2a\u6837\u672c\u7684\u65f6\u5019\uff0c\u7531\u4e8e\u6b63\u786e\u5730\u9884\u6d4b\u4e86\u5206\u7c7b\u6807\u7b7e\uff0c\u6240\u4ee5\u6743\u91cd\u7cfb\u6570\u6ca1\u6709\u6539\u53d8\u3002\u81f3\u6b64\uff0c\u7b2c\u4e8c\u4e2a\u6837\u672c\u5b66\u4e60\u5b8c\u6bd5\uff0c\u5e76\u5c06\u6743\u91cd\nw_1=\\left[1.0,0.2,0.1\\right]\n\u4f20\u7ed9\u4e0b\u4e00\u4e2a\u6837\u672c\u4f5c\u4e3a\u521d\u59cb\u6743\u91cd\u3002\n\n\n\u7b2c\u4e00\u4e16\u4ee3\uff0c\u611f\u77e5\u5668\u5b66\u4e60\u5269\u4f59\u6837\u672c\u5bf9\u6743\u91cd\u7cfb\u6570\u7684\u66f4\u65b0\u8fc7\u7a0b\u540c\u4e0a\n\n\n\n\u5c31\u8fd9\u6837\u5bf9\u6bcf\u4e2a\u6837\u672c\u8fdb\u884c\u5b66\u4e60\u5f97\u5230\u6743\u91cd\u5e76\u4f9d\u6b21\u4f20\u9012\uff0c\u7531\u4e8e\u672c\u6848\u4f8b\u53ea\u67094\u4e2a\u6837\u672c\uff0c\u5728\u7b2c\u4e00\u4e16\u4ee3\u4e0b\uff0c\u8fd8\u9700\u8981\u5bf9\u7b2c\u4e09\u4e2a\u548c\u7b2c\u56db\u4e2a\u6837\u672c\u8fdb\u884c\u5b66\u4e60\u5f97\u5230\u76f8\u5e94\u7684\u6743\u91cd\uff0c\u8fd9\u6837\uff0c\u7b2c\u4e00\u4e16\u4ee3\u5b66\u4e60\u5b8c\u6bd5\uff0c\u63a5\u7740\u6267\u884c\u7b2c\u4e8c\u4e16\u4ee3\u7684\u5b66\u4e60\uff0c\u8fc7\u7a0b\u548c\u7b2c\u4e00\u4e16\u4ee3\u662f\u7c7b\u4f3c\u7684\uff0c\u5982\u6b64\u5faa\u73af\u76f4\u81f3\u8fbe\u5230\u8bbe\u7f6e\u7684\u6700\u5927\u4e16\u4ee3\u6570\uff0c\u6574\u4e2a\u8bad\u7ec3\u96c6\u7684\u5b66\u4e60\u8fc7\u7a0b\u5c31\u7ed3\u675f\u4e86\u3002\n\n\n\u8bad\u7ec3\u96c6\u5b66\u4e60\u5b8c\u6bd5\u540e\uff0c\u5c31\u53ef\u4ee5\u5bf9\u6d4b\u8bd5\u96c6\u8fdb\u884c\u9884\u6d4b\u3001\u8c03\u53c2\u7b49\u5de5\u4f5c\uff0c\u5728\u8fd9\uff0c\u4e3a\u4e86\u7b80\u5316\u6d41\u7a0b\uff0c\u8fd9\u91cc\u6ca1\u6709\u63d0\u53ca\u5728\u5bf9\u8bad\u7ec3\u96c6\u8fdb\u884c\u8bad\u7ec3\u4e4b\u524d\u7684\u6570\u636e\u6e05\u6d17\u3001\u7279\u5f81\u5de5\u7a0b\u7b49\u4e00\u7cfb\u5217\u5de5\u4f5c\uff0c\u5f53\u7136\u5bf9\u4e8e\u672c\u793a\u4f8b\u4e5f\u4e0d\u9700\u8981\uff0c\u56e0\u4e3a\u8be5\u6570\u636e\u96c6\u672c\u8eab\u5c31\u662f\u5e72\u51c0\u7684\u3002\n\n\n# \u6743\u91cd\u7cfb\u6570\u66f4\u65b0\u8fc7\u7a0b\ndisplay(Image('./image/cats_epoch.png'))\n\n\n\n\n\n\nnumpy\u8fdb\u884c\u77e9\u9635\u8fd0\u7b97\u5c0f\u793a\u4f8b\n\n\nimport numpy as np\na = np.array([2, -1, 3])\nb = np.array([1, 0, -1])\nprint(\n\u77e9\u9635\u52a0\u6cd5\uff1a{0} + {1} = {2}\n.format(a, b, a + b)) \nprint(\n\u77e9\u9635\u70b9\u4e58\uff1a{0} . {1} = {2}\n.format(a, b, np.dot(a, b)))\nprint(\n\u77e9\u9635\u5bf9\u5e94\u5143\u7d20\u76f8\u4e58\uff0cHadamard\u4e58\u79ef\uff1a{0} \u00d7 {1} = {2}\n.format(a, b, a*b))\nprint(\n\u77e9\u9635\u4e0e\u6807\u91cf\u76f8\u4e58\uff1a{0} \u00d7 {1} = {2}\n.format(2, a, 2*a))\n\n\n\n\n\u77e9\u9635\u52a0\u6cd5\uff1a[ 2 -1  3] + [ 1  0 -1] = [ 3 -1  2]\n\u77e9\u9635\u70b9\u4e58\uff1a[ 2 -1  3] . [ 1  0 -1] = -1\n\u77e9\u9635\u5bf9\u5e94\u5143\u7d20\u76f8\u4e58\uff0cHadamard\u4e58\u79ef\uff1a[ 2 -1  3] \u00d7 [ 1  0 -1] = [ 2  0 -3]\n\u77e9\u9635\u4e0e\u6807\u91cf\u76f8\u4e58\uff1a2 \u00d7 [ 2 -1  3] = [ 4 -2  6]\n\n\n\nHadamard\u4e58\u79ef\uff1a\n\n\u77e9\u9635\u4e0e\u77e9\u9635\u7684Hadamard\u79ef\u5c31\u662f\u4e24\u4e2a\u77e9\u9635\u5bf9\u5e94\u5143\u7d20\u7684\u4e58\u79ef\n\n\nKronecker\u4e58\u79ef\uff1a\n\nKronecker\u79ef\u662f\u4e24\u4e2a\u4efb\u610f\u5927\u5c0f\u7684\u77e9\u9635\u95f4\u7684\u8fd0\u7b97\uff0c\u514b\u7f57\u5185\u514b\u79ef\u4e5f\u6210\u4e3a\u76f4\u79ef\u6216\u5f20\u91cf\u79ef\uff0c\u4ee5\u5fb7\u56fd\u6570\u5b66\u5bb6\u5229\u5965\u6ce2\u5fb7\u00b7\u514b\u7f57\u5185\u514b\u547d\u540d\u3002\n\n\n\n\nimport numpy as np \nw3 = np.array([1, 0.2, 0.1])\nupdate = np.array([-1, -0.7, -0.9])\nw4 = w3 + update\nw4\n\n\n\n\narray([ 0. , -0.5, -0.8])\n\n\n\npython\u5b9e\u73b0\u7684\u5355\u5c42\u611f\u77e5\u5668\n\n\n\u83ba(dai)\u5c3e\u82b1\u6570\u636e\u96c6\u3000\n150\u884c\\ \\times \\ 5\u5217\n\n\n\n\n\u7279\u5f81\uff1a4\u4e2a\uff0c\u5206\u522b\u662f\u82b1\u74e3\u957f\u5ea6\u548c\u5bbd\u5ea6\uff0c\u82b1\u843c\u957f\u5ea6\u548c\u5bbd\u5ea6\uff0c\u5355\u4f4dcm\n\n\n\u5206\u7c7b\u6807\u7b7e\uff1a\u6700\u540e\u4e00\u5217\uff0c\u4e09\u79cd\u53d6\u503c\uff0c\u5206\u522b\u4ee3\u8868\u4e09\u79cd\u7c7b\u578b\u7684\u83ba\u5c3e\u82b1\n\n\ndf = pd.read_excel(\n./Iris.xls\n, sheetname=\nIris\n)\n\n\n\n\ndf.head(3)\n\n\n\n\n\n\n\n  \n\n    \n\n      \n\n      \nsepal length\n\n      \nsepal width\n\n      \npetal length\n\n      \npetal width\n\n      \niris\n\n    \n\n  \n\n  \n\n    \n\n      \n0\n\n      \n5.1\n\n      \n3.5\n\n      \n1.4\n\n      \n0.2\n\n      \nIris-setosa\n\n    \n\n    \n\n      \n1\n\n      \n4.9\n\n      \n3.0\n\n      \n1.4\n\n      \n0.2\n\n      \nIris-setosa\n\n    \n\n    \n\n      \n2\n\n      \n4.7\n\n      \n3.2\n\n      \n1.3\n\n      \n0.2\n\n      \nIris-setosa\n\n    \n\n  \n\n\n\n\n\n\n\n\u4e3a\u4e86\u53ef\u4ee5\u753b\uff12D\u56fe\uff0c\u53ea\u62bd\u53d6\u4e86\u524d100\u884c\u6570\u636e\uff0c\u5373\u4ec5\u4ec5\u5305\u542b50\u4e2a\u6837\u672c\u7684 Iris-Setosa and 50\u4e2a\u6837\u672c\u7684 Iris-Versicolor flowers\n\n\ny = df.iloc[0:100, 4].values  # get a 1-array, numpy.ndarray\ny[-5:]\n\n\n\n\narray([u'Iris-versicolor', u'Iris-versicolor', u'Iris-versicolor',\n       u'Iris-versicolor', u'Iris-versicolor'], dtype=object)\n\n\n\n# \u5c06\u6570\u636e\u96c6\u7684\u6240\u6709\u5b57\u7b26\u7c7b\u578b\u7684\u6570\u636e\u8f6c\u53d8\u6210\u6570\u503c\u7c7b\u578b\nY = np.where(y==\nIris-setosa\n, -1, 1)\nY[-5:]\n\n\n\n\narray([1, 1, 1, 1, 1])\n\n\n\n\u4e3a\u4e86\u7b80\u5316\u6d41\u7a0b\uff0c\u4ece\u56db\u4e2a\u7279\u5f81\u4e2d\u62bd\u53d6\u4e86\u4e24\u4e2a\u7279\u5f81\u7ec4\u6210\u7279\u5f81\u77e9\u9635\uff0c\u5373\u9009\u62e9\u4e86\u7b2c\u4e00\u5217(sepal length) and \u7b2c\u4e09\u5217(petal length) as X\n\n\nX = df.iloc[0:100, [0,2]].values  # .values\u3000\u662f\u5c06pandas\u7684DataFrame\u6216Series\u6570\u636e\u7ed3\u6784\u53d8\u6210numpy\u7684array\u7684\u6570\u7ec4\u6216\u77e9\u9635\u7c7b\u578b\nX.shape\nX[-2:, :]\n\n\n\n\narray([[ 5.1,  3. ],\n       [ 5.7,  4.1]])\n\n\n\n\u6837\u672c\u7279\u5f81\u7684\u6563\u70b9\u56fe\n\n\nplt.scatter(X[:50, 0], X[:50, 1], marker=\no\n, label=\nsetosa\n, c=\nwhite\n, edgecolor=\npurple\n)\nplt.scatter(X[50:100, 0], X[50:100, 1], c=\nblue\n, marker=\nx\n, label=\nversicolor\n)\nplt.xlabel(\npetal length [cm]\n)\nplt.ylabel(\nsepal length [cm]\n)\nplt.legend(loc=\nupper left\n)\nplt.show()\n\n\n\n\n\n\nPerceptron\u611f\u77e5\u5668\u5206\u7c7b\u5668\n\n\nclass Perceptron(object):\n    \nPerceptron classifier\u5355\u5c42\u611f\u77e5\u5668\n\n    def __init__(self, eta=0.01, n_iter=10):\n        self.eta = eta\n        self.n_iter = n_iter\n\n    #\u62df\u5408\n    def fit(self, X, Y):\n        self.w_ = np.zeros(1 + X.shape[1])\n        self.errors_ = []\n        print(\nlength of w_ : %i\n) % len(self.w_)\n        for i in range(self.n_iter):\n            errors = 0\n            for xi, target in zip(X, Y):\n                update = self.eta * (target - self.predict(xi)) # update\u662f\u4e00\u4e2a\u6570\u503c\u3000\n                self.w_[1:] += update * xi  # \u6570\u7ec4\u4e0a\u64cd\u4f5c\uff0c\u4e0d\u662f\u6570\u503c\u52a0\n                self.w_[0] += update\n                errors += int(update != 0.0)\n            self.errors_.append(errors)\n            print(\nepoch_\n+str(i + 1))\n            print(self.w_)\n        return self\n\n    #\u51c0\u8f93\u5165\n    def net_input(self, X):\n        return np.dot(X, self.w_[1:]) + self.w_[0]\n\n    #\u6fc0\u52b1\u51fd\u6570\u9884\u6d4b\n    def predict(self, X):\n        return np.where(self.net_input(X) \n= 0.0, 1, -1)\n\n# \u9884\u6d4b\u672a\u77e5\u6837\u672c \n#     def predict_real(self, X):\n#         y_real = {\n1\n:\nIris-versicolor\n, \n-1\n:\nIris-setosa\n}\n#         y_ = self.net_input(X)        \n#         return y_real[str(y_)]                \n\n\n\n\n\u611f\u77e5\u5668\u8bad\u7ec3\u8fc7\u7a0b\u4e2d\u5206\u7c7b\u6807\u7b7e\u9884\u6d4b\u9519\u8bef\u7684\u60c5\u51b5\n\n\nppn = Perceptron(eta=0.1, n_iter=10)\nppn.fit(X, Y)\nplt.plot(range(1, len(ppn.errors_)+1), ppn.errors_, marker=\n.\n, color=\npurple\n)\nplt.xlabel(\nEpochs\n, fontsize=16)\nplt.ylabel(\nNumber of Misclassification\n, fontsize=14)\nplt.grid(True, linestyle=\n:\n, alpha=0.8)\nplt.show()\n\n\n\n\nlength of w_ : 3\nepoch_1\n[ 0.    0.38  0.66]\nepoch_2\n[ 0.    0.76  1.32]\nepoch_3\n[-0.2   0.22  1.68]\nepoch_4\n[-0.2   0.34  2.1 ]\nepoch_5\n[-0.4  -0.68  1.82]\nepoch_6\n[-0.4  -0.68  1.82]\nepoch_7\n[-0.4  -0.68  1.82]\nepoch_8\n[-0.4  -0.68  1.82]\nepoch_9\n[-0.4  -0.68  1.82]\nepoch_10\n[-0.4  -0.68  1.82]\n\n\n\n\n\n\u611f\u77e5\u5668\u5206\u7c7b\u51b3\u7b56\u8fb9\u754c\u793a\u610f\u56fe\n\n\nimplement a small convenience function to visualize the decision boundaries for 2D datasets\n\n\nnp.meshgrid\u662f\u751f\u6210\u7f51\u683c\u91c7\u6837\u70b9\u7684\u51fd\u6578\uff0c\u5b83\u63a5\u6536\u4e24\u4e2a\u4e00\u7ef4\u6570\u7ec4,\u4ea7\u751f\u4e24\u4e2a\u4e8c\u7ef4\u77e9\u9635\n\n\ncontour:\u8f6e\u5ed3,\u7b49\u9ad8\u7ebf,f\uff1afilled\uff0c\u4e5f\u5373\u5bf9\u7b49\u9ad8\u7ebf\u95f4\u7684\u586b\u5145\u533a\u57df\u8fdb\u884c\u586b\u5145\uff08\u4f7f\u7528\u4e0d\u540c\u7684\u989c\u8272\uff09\uff1b\n\n\ncontourf\uff1a\u5c06\u4e0d\u4f1a\u518d\u7ed8\u5236\u7b49\u9ad8\u7ebf\uff08\u663e\u7136\u4e0d\u540c\u7684\u989c\u8272\u5206\u754c\u5c31\u8868\u793a\u7b49\u9ad8\u7ebf\u672c\u8eab\uff09\n\n\nfrom matplotlib.colors import ListedColormap\ndef plot_decision_regions(X, Y, classifier, resolution=0.02):\n    # \u5bf9\u5e94\u5206\u7c7b\u6807\u7b7e\n    y_maps = {\n1\n:\nIris-versicolor\n, \n-1\n:\nIris-setosa\n}\n    # setup marker generator and color map\n    markers = (\n^\n, \nx\n, \ns\n, \no\n, \nv\n)\n    colors = (\npurple\n, \nred\n, \nblue\n, \ncyan\n, \nlightgreen\n, )  #\ngray\n\n    cmap = ListedColormap(colors[:len(np.unique(Y))])\n    # plot the decision surface\n    x1_min, x1_max = X[:, 0].min() - 1, X[:, 0].max() + 1\n    x2_min, x2_max = X[:, 1].min() - 1, X[:, 1].max() + 1\n    xx1, xx2 = np.meshgrid(np.arange(x1_min, x1_max, resolution), np.arange(x2_min, x2_max, resolution))\n    Z = classifier.predict(np.array([xx1.ravel(), xx2.ravel()]).T)\n    Z = Z.reshape(xx1.shape)\n    plt.contourf(xx1, xx2, Z, alpha=0.4, cmap=cmap)  \n\n    plt.xlim(xx1.min(), xx1.max())\n    plt.ylim(xx2.min(), xx2.max())\n    # plot class samples\n    for idx, cl in enumerate(np.unique(Y)):\n        plt.scatter(x=X[Y==cl, 0], y=X[Y==cl, 1], alpha=0.8, c=cmap(idx), marker=markers[idx],label=y_maps[str(cl)])\n\n\n\n\nplot_decision_regions(X, Y, classifier=ppn)\nplt.xlabel(\nsepal length [cm]\n, fontsize=18)\nplt.ylabel(\npetal length [cm]\n, fontsize=18)\nplt.legend(loc=\nupper left\n)\nplt.show()\n\n\n\n\n\n\nsklearn\u611f\u77e5\u5668\u4ee3\u7801\u5b9e\u73b0\n\n\nfrom sklearn.preprocessing import StandardScaler  # \u6807\u6ce8\u53d8\u6362\u4e4b\u6807\u51c6\u5316\nfrom sklearn.linear_model import Perceptron as percep\nfrom sklearn.cross_validation import train_test_split as ttsplit\nfrom sklearn.metrics import accuracy_score\nX_train, X_test, Y_train, Y_test = ttsplit(X, Y, test_size=0.2, random_state=0)\n\nsc = StandardScaler()\nsc.fit(X_train)  # \u8ba1\u7b97\u5747\u503c\u548c\u65b9\u5dee\nX_train_std = sc.transform(X_train)  # \u8fdb\u884c\u6807\u51c6\u53d8\u6362\uff0c\u53d8\u6210\u6807\u51c6\u6b63\u592a\u5206\u5e03\nX_test_std = sc.transform(X_test)\nppn_ = percep(n_iter=10, eta0=0.1, random_state=0)\nppn_.fit(X_train_std, Y_train)\nY_pred = ppn_.predict(X_test_std)\nprint(\nMisclassified samples: %d\n % (Y_test != Y_pred).sum())\nprint(\nAccuracy: %.2f\n % accuracy_score(Y_test,Y_pred))\n\n\n\n\nMisclassified samples: 1\nAccuracy: 0.95\n\n\n/home/darren/anaconda2/lib/python2.7/site-packages/sklearn/cross_validation.py:44: DeprecationWarning: This module was deprecated in version 0.18 in favor of the model_selection module into which all the refactored classes and functions are moved. Also note that the interface of the new CV iterators are different from that of this module. This module will be removed in 0.20.\n  \"This module will be removed in 0.20.\", DeprecationWarning)\n\n\n\nfrom matplotlib.colors import ListedColormap\nimport matplotlib.pyplot as plt\ndef plot_decision_region(X, Y, classifier, test_idx=None, resolution=0.02):\n    # \u5bf9\u5e94\u5206\u7c7b\u6807\u7b7e\n    y_maps = {\n1\n:\nIris-versicolor\n, \n-1\n:\nIris-setosa\n}\n    # setup marker generator and color map\n    markers = (\n^\n, \nx\n, \ns\n, \no\n, \nv\n)\n    colors = (\npurple\n, \nred\n, \nblue\n, \ncyan\n, \nlightgreen\n, )  #\ngray\n\n    cmap = ListedColormap(colors[:len(np.unique(Y))])\n    # plot the decision surface    \n    x1_min, x1_max = X[:, 0].min() - 1, X[:, 0].max() + 1\n    x2_min, x2_max = X[:, 1].min() - 1, X[:, 1].max() + 1\n    xx1, xx2 = np.meshgrid(np.arange(x1_min, x1_max, resolution), np.arange(x2_min, x2_max, resolution))\n    Z = classifier.predict(np.array([xx1.ravel(), xx2.ravel()]).T)\n    Z = Z.reshape(xx1.shape)\n    plt.contourf(xx1, xx2, Z, alpha=0.4, cmap=cmap)      \n    plt.xlim(xx1.min(), xx1.max())\n    plt.ylim(xx2.min(), xx2.max())\n    # plot all samples\n    for idx, cl in enumerate(np.unique(Y)):\n        plt.scatter(x=X[Y==cl, 0], y=X[Y==cl, 1], alpha=0.8, c=cmap(idx), marker=markers[idx],label=y_maps[str(cl)])\n    # highlight test samples\n    if test_idx:\n        X_test, Y_test = X[test_idx, :], Y[test_idx]\n        X_test, Y_test = X[test_idx, :], Y[test_idx]\n        plt.scatter(X_test[:, 0], X_test[:, 1], c=\n, alpha=1.0, linewidth=1, marker=\no\n, s=55, label=\ntest set\n)\n\n\n\n\nX_combined_std = np.vstack((X_train_std, X_test_std))\nY_combined = np.hstack((Y_train, Y_test))\nplot_decision_region(X=X_combined_std, Y=Y_combined, classifier=ppn_, test_idx=None)\nplt.xlabel(\nsepal length [standardized] cm\n, fontsize=16)\nplt.ylabel(\npetal length [standardized] cm\n, fontsize=14)\nplt.legend(loc=\nupper left\n)\nplt.show()", 
            "title": "\u611f\u77e5\u5668python\u4ee3\u7801\u5b9e\u73b0"
        }, 
        {
            "location": "/machine_learning/perceptron_classifier/perceptron_classifier_blog/#_1", 
            "text": "\u611f\u77e5\u5668(perceptron)\u662f\u6a21\u4eff\u4eba\u8111\u795e\u7ecf\u5143\u7684\u7ebf\u6027\u5206\u7c7b\u7b97\u6cd5  \u795e\u7ecf\u5143\u7684\u6784\u6210\u5982\u4e0b\u56fe\u6240\u793a\uff0c\u4e3b\u8981\u5305\u62ec\u6811\u7a81(Dendrites)\uff0c\u7ec6\u80de\u6838(Cell Body)\u548c\u8f74\u7a81(Axon)\u3002  \u611f\u77e5\u5668\u662f\u4e00\u79cd\u7814\u7a76\u5355\u4e2a\u8bad\u7ec3\u6837\u672c\u7684\u4e8c\u5143\u5206\u7c7b\u5668\u3002  \u795e\u7ecf\u5143\u53ca\u5355\u5c42\u611f\u77e5\u5668\u793a\u610f\u56fe", 
            "title": "\u5355\u5c42\u611f\u77e5\u5668\u7b80\u4ecb"
        }, 
        {
            "location": "/machine_learning/perceptron_classifier/perceptron_classifier_blog/#_2", 
            "text": "\u7406\u89e3\u611f\u77e5\u5668\u7684\u5de5\u4f5c\u539f\u7406\uff0c\u662f\u5b66\u4e60\u4e24\u79cd\u8d85\u7ea7\u6b66\u5668\u7684\u57fa\u7840\uff0c\u5373\u652f\u6301\u5411\u91cf\u673a(support vector machines)\u548c\u4eba\u5de5\u795e\u7ecf\u7f51\u7edc(artificial neural networks)\u7684\u57fa\u7840\u4e4b\u4e00  \u9996\u5148\uff0c\u6e29\u6545\u4e00\u4e0b\u76f4\u7ebf\u65b9\u7a0b    y = ax + b   \u81ea\u53d8\u91cfx\u4e58\u4ee5\u659c\u7387a\u518d\u52a0\u4e0a\u622a\u8dddb\u5c31\u5f97\u5230\u4e86\u56e0\u53d8\u91cfy  import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\n%matplotlib inline  x = np.arange(-10, 10)\na, b = 2, 5\nfig, ax = plt.subplots()\n# \u9690\u85cf\u4e0a\u8fb9\u548c\u53f3\u8fb9\nax.spines[ top ].set_color( none ) \nax.spines[ right ].set_color( none ) \n# \u79fb\u52a8\u53e6\u5916\u4e24\u4e2a\u8f74\nax.xaxis.set_ticks_position( bottom )\nax.spines['bottom'].set_position(('data', 0))\nax.yaxis.set_ticks_position('left')\nax.spines['left'].set_position(('data', 0))\nax.plot(x, a*x+b, linewidth=2, label= y=2x+5 )\nax.legend()\nax.grid(True, linestyle= : , linewidth=1, alpha=0.8)   n\u5143\u4e00\u6b21\u65b9\u7a0b  \u4e00\u5143\u4e00\u6b21\u65b9\u7a0b: \\quad y \\ = \\ ax \\ + \\ b \\quad \u4f8b\u5982\uff1a\\ y = 2x + 5  \n\u53ef\u4ee5\u5199\u6210\uff1a  \\quad y \\ = \\ w_0 \\times x_0 \\ + \\ w_1 \\times x_1 \\quad \u5176\u4e2dw_0 =5, \\ x_0=1, \\ w_1=2, \\ x_1=x    \u4e8c\u5143\u4e00\u6b21\u65b9\u7a0b: \\quad y \\ = \\ ax \\ + \\ bx \\ + \\ c   \n\u53ef\u4ee5\u5199\u6210\uff1a   \\quad y \\ = \\ w_0 \\times x_0 \\ + \\ w_1 \\times x_1 \\ + \\ w_2 \\times x_2 \\quad \u5176\u4e2dx_0=1, \\ w_0=c   n\u5143\u4e00\u6b21\u65b9\u7a0b\u8868\u8fbe\u5f0f\u53ca\u77e9\u9635\u8868\u793a\uff1a   y \\ = \\ w_0\\times x_0 + w_1 \\times x_1 + w_2 \\times x_2 + \\cdot\\cdot\\cdot \\ w_n \\times x_n \\     =\\underbrace{\\begin{bmatrix} w_0 & w_1 & w_2 & \\cdots\\ &w_n \\end{bmatrix}}_{\u6743\u91cd\u7cfb\u6570\u5411\u91cf\\bf w} {\\ \\bullet}  \\underbrace{\\begin{bmatrix} x_{0} \\\\ x_{1} \\\\ x_{2} \\\\ \\vdots \\\\ x_n \\end{bmatrix}}_{\u6837\u672c\u7279\u5f81\u77e9\u9635\\bf x}    =\\ {\\bf w^T x} \\quad {\u5176\u4e2dx_0=1}", 
            "title": "\u4e3a\u5565\u8981\u626f\u6de1\u611f\u77e5\u5668"
        }, 
        {
            "location": "/machine_learning/perceptron_classifier/perceptron_classifier_blog/#_3", 
            "text": "\u795e\u7ecf\u5143\u7684\u5de5\u4f5c\u539f\u7406:  \u6811\u7a81\u4ece\u4e00\u4e2a\u6216\u591a\u4e2a\u5176\u4ed6\u795e\u7ecf\u5143\u63a5\u53d7\u7535\u4fe1\u53f7\uff0c\u4fe1\u53f7\u5728\u5176\u7ec6\u80de\u6838\u5904\u7406\u540e\u4ece\u8f74\u7a81\u8f93\u51fa\u3002\u4e00\u4e2a\u611f\u77e5\u5668\u5c31\u662f\u5c06\u4e00\u4e2a\u6216\u591a\u4e2a\u8f93\u5165 x_0, x_1, x_2 \\cdot\\cdot\\cdot x_n  \u5904\u7406\u5e76\u8f93\u51fa\u7684\u8ba1\u7b97\u5355\u5143\u3002\u6bcf\u4e2a\u8f93\u5165\u4ee3\u8868\u4e86\u4e00\u4e2a\u7279\u5f81\uff0c\u901a\u5e38\uff0c\u611f\u77e5\u5668\u7528\u4e00\u4e2a\u7279\u5b9a\u7684\u8f93\u5165\u5355\u5143\u4ee3\u8868\u8f93\u5165\u8bef\u5dee\u9879\uff0c\u5176\u8868\u8fbe\u5f0f\u662f   \\quad x_0\\times \\theta \\quad \u5176\u4e2dx_0=1,\\ \\theta\u4e3a\u9608\u503c   \u51c0\u8f93\u5165: \u5c06\u6240\u6709\u7684\u8f93\u5165\u5355\u5143\u503c(\u5373\u6837\u672c\u7279\u5f81\u503c)\u4e58\u4ee5\u5bf9\u5e94\u7684\u6743\u91cd\u7cfb\u6570\u518d\u52a0\u4e0a\u8bef\u5dee\u9879\u5c31\u5f97\u5230\u4e86\u51c0\u8f93\u5165z    z = \\underbrace{w_0x_0}_{=\\theta\\times1} + \\underbrace{w_1x_1 + w_2x_2 + \\cdots + w_nx_n}_{\u6837\u672c\u7279\u5f81\u503c\u4e0e\u6743\u91cd\u7cfb\u6570\u4e58\u79ef\u4e4b\u548c}= {\\bf w^T}{\\bf x}   \u6fc0\u52b1\u51fd\u6570:  \u5e38\u7528\u7684\u6fc0\u52b1\u51fd\u6570\u6709\u591a\u79cd\uff0c\u5982\u9636\u8dc3\u51fd\u6570(unit step function\u6216Heaviside step function)\u548c\u903b\u8f91S\u5f62\u51fd\u6570(logistic sigmoid)\u3002  \u4ee5\u4e0b\u793a\u4f8b\u4f7f\u7528\u7684\u5747\u662f\u6700\u7b80\u5355\u7684\u9636\u8dc3\u51fd\u6570\u3002 \\phi\\left(x\\right)=\\left\\{\n\\begin{aligned}\n1 &\\ \\quad if\\ z\\geq \\theta \\\\\n-1 &\\ \\quad otherwise.\n\\end{aligned}\n\\right.  \u9636\u8dc3\u51fd\u6570 $\\ \\theta=0$  \u9636\u8dc3\u51fd\u6570   \u611f\u77e5\u5668\u6267\u884c\u6d41\u7a0b:  \u611f\u77e5\u5668\u662f\u4e00\u79cd\u9519\u8bef\u9a71\u52a8(error-drive)\u7684\u5b66\u4e60\u7b97\u6cd5\u3002\u611f\u77e5\u5668\u5b66\u4e60\u7b97\u6cd5\u9996\u5148\u8981\u5c06\u6743\u91cd\u7cfb\u6570 ( \\bf w_i  ) \u8bbe\u7f6e\u6210\uff10\u6216\u5f88\u5c0f\u7684\u968f\u673a\u6570\uff0c\u7136\u540e\u9884\u6d4b\u8bad\u7ec3\u6837\u672c\u7684\u7c7b\u578b\u3002\u82e5\u611f\u77e5\u5668\u7684\u9884\u6d4b\u4e0e\u5b9e\u9645\u503c\u4e00\u81f4\uff0c\u5219\u6743\u91cd\u7cfb\u6570\u4e0d\u6539\u53d8\uff0c\u5982\u679c\u611f\u77e5\u5668\u9884\u6d4b\u9519\u8bef\uff0c\u7b97\u6cd5\u5c31\u66f4\u6539\u6743\u91cd\u7cfb\u6570\uff0c\u63a5\u7740\uff0c\u5c06\u6743\u91cd\u4f20\u9012\u7ed9\u4e0b\u4e00\u4e2a\u6837\u672c\u4f5c\u4e3a\u4e0b\u4e00\u4e2a\u6837\u672c\u7684\u521d\u59cb\u6743\u91cd\u5e76\u7ee7\u7eed\u5904\u7406\u4e0b\u4e00\u4e2a\u6837\u672c\uff1b\u5f53\u6837\u672c\u96c6\u4e2d\u7684\u6240\u6709\u6837\u672c\u5747\u88ab\u5b66\u4e60\u4e00\u904d\u540e\uff0c\u672c\u4e16\u4ee3\u5b66\u4e60\u7ed3\u675f\uff0c\u5e76\u5f00\u59cb\u4e0b\u4e00\u4e16\u4ee3\u7684\u5b66\u4e60\u548c\u8bad\u7ec3\uff0c\u5c31\u8fd9\u6837\u5faa\u73af\u6307\u5b9a\u7684\u4e16\u4ee3\u6570\u540e\uff0c\u5b66\u4e60\u7ed3\u675f\u3002  \u6743\u91cd\u7cfb\u6570\u7684\u66f4\u65b0\u89c4\u5219 : \\bf w_j:=w_j \\ + \\ \\Delta {\\bf w_j}    \\Delta \\bf w_j=\\eta\\left(y^\\left(i\\right)-\\hat{y}^\\left(i\\right) \\right)x_j^\\left(i\\right)   \u5176\u4e2d\uff0c \\bf w_j: \u662f\u6837\u672c\u96c6\u7b2cj\u7ef4\u7279\u5f81\u66f4\u65b0\u540e\u7684\u6743\u91cd\uff0c \\bf w_j \u662f\u5f53\u524d\u6837\u672c\u7684\u4e0a\u4e00\u4e2a\u6837\u672c\u8ba1\u7b97\u5f97\u5230\u7684\u6743\u91cd\uff0c \\Delta \\bf w_j \u662f\u6839\u636e\u5f53\u524d\u6837\u672c\u8ba1\u7b97\u7684\u6743\u91cd\u7684\u589e\u91cf\uff0c \\eta \u662f\u4eba\u4e3a\u6307\u5b9a\u7684\u8d85\u53c2\u6570\u2014\u2014\u5b66\u4e60\u7387(learning rate, a constant between 0.0 and 1.0)\uff0c y^\\left(i\\right) \u662f\u5f53\u524d\u6837\u672c\u7684\u5206\u7c7b\u6807\u7b7e\u503c\uff0c \\hat{y}^\\left(i\\right) \u662f\u9884\u6d4b\u7684\u5206\u7c7b\u6807\u7b7e\u7684\u503c\uff0c x_j^\\left(i\\right) \u662f\u7b2ci\u4e2a\u6837\u672c\u7684\u7b2cj\u7ef4\u7279\u5f81\u3002   \\bf w \u7684\u66f4\u65b0\u89c4\u5219\u4e0e\u68af\u5ea6\u4e0b\u964d\u6cd5\u4e2d\u7684\u6743\u91cd\u66f4\u65b0\u89c4\u5219\u7c7b\u4f3c\uff0c\u90fd\u662f\u671d\u7740\u4f7f\u6837\u672c\u5f97\u5230\u6b63\u786e\u5206\u7c7b\u7684\u65b9\u5411\u66f4\u65b0\u6743\u91cd\uff0c\u4e14\u66f4\u65b0\u7684\u5e45\u5ea6\u662f\u7531\u5b66\u4e60\u901f\u7387( \\eta )\u63a7\u5236\u7684\u3002\u6bcf\u904d\u5386\u4e00\u6b21\u6837\u672c\u96c6\u7684\u6240\u6709\u6837\u672c\u79f0\u5b8c\u6210\u4e86\u4e00\u4e16\u4ee3(epoch)\u3002\u82e5\u5b66\u4e60\u5b8c\u4e00\u4e16\u4ee3\u540e\uff0c\u6240\u6709\u7684\u6837\u672c\u90fd\u5206\u7c7b\u6b63\u786e\uff0c\u90a3\u4e48\u7b97\u6cd5\u5c31\u4f1a\u6536\u655b(converge)\u3002\u8981\u6ce8\u610f\u7684\u662f\uff0c\u611f\u77e5\u5668\u7684\u5b66\u4e60\u7b97\u6cd5\u5e76\u4e0d\u4fdd\u8bc1\u7b97\u6cd5\u672c\u8eab\u7684\u6536\u655b\uff0c\u5f53\u6837\u672c\u662f\u7ebf\u6027\u4e0d\u53ef\u5206\u7684\u65f6\u5019\uff0c\u662f\u4e0d\u53ef\u80fd\u6536\u655b\u7684\u3002\u56e0\u6b64\uff0c\u8981\u6307\u5b9a\u4e00\u4e2a\u8d85\u53c2\u6570( n_{iter} )\u6765\u9650\u5236\u6743\u91cd\u66f4\u65b0\u7684\u6700\u5927\u4e16\u4ee3\u6570\u3002  \u4e00\u4e2a\u5c0f\u6848\u4f8b:  \u4ece\u4e00\u7a9d\u732b\u91cc\u5206\u8fa8\u5e7c\u732bor\u6210\u5e74\u732b  \u641e\u6e05\u51e0\u4e2a\u6982\u5ff5\uff1a   \u6837\u672c  \u7279\u5f81  \u5206\u7c7b\u6807\u7b7e  \u8bad\u7ec3\u96c6(train)  \u6d4b\u8bd5\u96c6(test)   # \u521b\u5efa\u6837\u672c\u7279\u5f81\u77e9\u9635\nX = np.array([\n    [0.2, 0.1],\n    [0.4, 0.6],\n    [0.5, 0.6],\n    [0.7, 0.9]\n])\n# \u521b\u5efa\u5206\u7c7b\u6807\u7b7e\ny = [1, 1, 1, 0]\n# \u6563\u70b9\u56fe\nplt.grid(True, linestyle= : , linewidth=1, alpha=0.8)\nplt.scatter(X[:3, 0], X[:3, 1], marker= o , c= white , edgecolor= red )\nplt.scatter(X[3:, 0], X[3:, 1], marker= x )\nplt.xlabel( pro of sleep day , fontsize=16)\nplt.ylabel( pro of crazy day , fontsize=16)\nplt.title( character of kitten and adult cats , fontsize=14)  matplotlib.text.Text at 0x7f7920cb6190    \u6743\u91cd\u66f4\u65b0\u8fc7\u7a0b  \u4e16\u4ee3\uff11\uff0c\u5373\u7b2c\u4e00\u6b21\u5faa\u73af\uff0c\u5f00\u59cb\u7684\u65f6\u5019\uff0c\u6240\u6709\u7684\u6743\u91cd\u8bbe\u7f6e\u4e3a0, w_1=0,w_2=0,w_3=0 \n\u7279\u5f81\u5206\u522b\u4e3a x_0=1, x_1=0.2, x_2=0.1 \n\u6839\u636e\u51c0\u8f93\u5165\u548c\u6fc0\u52b1\u51fd\u6570\u51b3\u5b9a\u662f\u5426\u66f4\u6539\u6743\u91cd\u7cfb\u6570  \u51c0\u8f93\u5165z\u548c\u6fc0\u52b1\u51fd\u6570 \\(\\phi\\left(x\\right)\\)     z = \\underbrace{w_0x_0}_{=\\theta\\times1} + \\underbrace{w_1x_1 + w_2x_2 + \\cdot\\cdot\\cdot +w_nx_n}_{\u8f93\u5165\u5355\u5143\u503c\u4e0e\u6743\u91cd\u7cfb\u6570\u4e58\u79ef\u4e4b\u548c}= {\\bf w^T}{\\bf x}\\quad  \\phi\\left(x\\right)=\\left\\{\n\\begin{aligned}\n1 &\\ \\quad if\\ z\\gt \\theta \\\\\n0 &\\ \\quad otherwise.\n\\end{aligned}\n\\right.    \u6743\u91cd\u66f4\u65b0   \\bf w_j:=w_j \\ + \\ \\Delta \\bf w_j \\quad  \\quad \\Delta \\bf w_j=\\eta\\left(y^\\left(i\\right)-\\hat{y}^\\left(i\\right) \\right)x_j^\\left(i\\right)   \u521d\u59cb\u6743\u91cd \\ w_0 = \\left[0, 0, 0 \\right] \uff0c\u4e3a\u4e86\u7b80\u5316\u8ba1\u7b97\uff0c\u4ee4 \\eta=1.0 \u3000 \u7b2c\u4e00\u4e16\u4ee3\uff0c\u611f\u77e5\u5668\u5b66\u4e60\u7b2c\u4e00\u4e2a\u6837\u672c\u5bf9\u6743\u91cd\u7cfb\u6570\u7684\u66f4\u65b0\u8fc7\u7a0b  \u7b2c\u4e00\u4e2a\u6837\u672c\u7279\u5f81\u503c\u4e3a\uff1a x_0=\\left[1.0,0.2,0.1\\right] \n\u6839\u636e\u6743\u91cd\u66f4\u65b0\u7684\u516c\u5f0f\uff0c\u8ba1\u7b97w\u7684\u589e\u91cf\uff1a   \\Delta \\bf w_j=\\eta\\left(y^\\left(i\\right)-\\hat{y}^\\left(i\\right) \\right)x_j^\\left(i\\right)     = 1.0\\times \\left(\u5b9e\u9645\u6807\u7b7e\u503c\uff0d\u9884\u6d4b\u6807\u7b7e\u503c\\right) \\times \\underbrace{\u5411\u91cf\\bf x}_{\u7b2c\u4e00\u4e2a\u6837\u672c\u7684\u7279\u5f81\u5411\u91cf} \\quad     = 1.0\\times \\left(1\uff0d0\\right) \\times \\left[1.0, 0.2, 0.1 \\right]     = \\left[1.0, 0.2, 0.1 \\right]   \u56e0\u6b64\uff0c\u7531 \\bf w_j:=w_j \\ + \\ \\Delta \\bf w_j  \u5f97\u66f4\u65b0\u540e\u7684\u6743\u91cd:  \\bf w = \\left[0,0,0\\right] \\ + \\ \\left[1.0,0.2,0.1\\right] = \\left[1.0,0.2,0.1\\right]   \u7b2c\u4e00\u4e16\u4ee3\u7684\u7b2c\u4e00\u4e2a\u6837\u672c\u5b66\u4e60\u5b8c\u6bd5\uff0c\u5c06\u4ece\u7b2c\u4e00\u4e2a\u6837\u672c\u5b66\u4e60\u5230\u7684\u6743\u91cd \\bf w=\\left[1.0,0.2,0.1\\right] \u4f20\u9012\u7ed9\u4e0b\u4e00\u4e2a\u6837\u672c\u4f5c\u4e3a\u521d\u59cb\u6743\u91cd\u63a5\u7740\u5b66\u4e60\u3002\u4e0b\u9762\u63a2\u8ba8\u7b2c\u4e8c\u4e2a\u6837\u672c\u6743\u91cd\u66f4\u65b0\u8fc7\u7a0b\uff1a\n\u521d\u59cb\u6743\u91cd w_1 = \\left[1.0,0.2,0.1\\right] \uff0c \\eta=1.0  \u7b2c\u4e00\u4e16\u4ee3\uff0c\u611f\u77e5\u5668\u5b66\u4e60\u7b2c\u4e8c\u4e2a\u6837\u672c\u5bf9\u6743\u91cd\u7cfb\u6570\u7684\u66f4\u65b0\u8fc7\u7a0b  \u7b2c\u4e8c\u4e2a\u6837\u672c\u7279\u5f81\u503c\u4e3a\uff1a x_\uff11=\\left[1.0,0.4,0.6\\right]   \u51c0\u8f93\u5165\uff1a z={\\bf w^T}{\\bf x}=w_0x_0 + w_1x_1 + w_2x_2 + \\cdot\\cdot\\cdot +w_nx_n = 1.0\\times1.0 + 0.2\\times0.4 + 0.1\\times0.6 = 1.14 \\gt0$   \u6839\u636e\u6fc0\u52b1\u51fd\u6570 \\phi\\left(x\\right)=\\left\\{\n\\begin{aligned}\n1 &\\ \\quad if\\ z\\geq \\theta \\\\\n0 &\\ \\quad otherwise.\n\\end{aligned}\n\\right. \n\u53ef\u77e5\u9884\u6d4b\u503c\u4e3a1,\u9884\u6d4b\u5206\u7c7b\u6807\u7b7e\u503c\u4e0e\u5b9e\u9645\u5206\u7c7b\u6807\u7b7e\u503c\u76f8\u540c\uff1b  \u66f4\u65b0\u6743\u91cd\uff1a $\\Delta \\bf w_j=\\eta\\left(y^\\left(i\\right)-\\hat{y}^\\left(i\\right) \\right)x_j^\\left(i\\right)\u3000\uff1d\u30001.0\\times \\left(1.0-1.0\\right)\\times \\left[1.0,0.4,0.6\\right] = \\left[0,0,0\\right]    \\bf w_j:=w_j \\ + \\ \\Delta \\bf w_j = \\left[1.0,0.2,0.1\\right] + \\left[0,0,0\\right] = \\left[1.0,0.2,0.1\\right]   \u5728\u5b66\u4e60\u7b2c\u4e8c\u4e2a\u6837\u672c\u7684\u65f6\u5019\uff0c\u7531\u4e8e\u6b63\u786e\u5730\u9884\u6d4b\u4e86\u5206\u7c7b\u6807\u7b7e\uff0c\u6240\u4ee5\u6743\u91cd\u7cfb\u6570\u6ca1\u6709\u6539\u53d8\u3002\u81f3\u6b64\uff0c\u7b2c\u4e8c\u4e2a\u6837\u672c\u5b66\u4e60\u5b8c\u6bd5\uff0c\u5e76\u5c06\u6743\u91cd w_1=\\left[1.0,0.2,0.1\\right] \u4f20\u7ed9\u4e0b\u4e00\u4e2a\u6837\u672c\u4f5c\u4e3a\u521d\u59cb\u6743\u91cd\u3002  \u7b2c\u4e00\u4e16\u4ee3\uff0c\u611f\u77e5\u5668\u5b66\u4e60\u5269\u4f59\u6837\u672c\u5bf9\u6743\u91cd\u7cfb\u6570\u7684\u66f4\u65b0\u8fc7\u7a0b\u540c\u4e0a  \u5c31\u8fd9\u6837\u5bf9\u6bcf\u4e2a\u6837\u672c\u8fdb\u884c\u5b66\u4e60\u5f97\u5230\u6743\u91cd\u5e76\u4f9d\u6b21\u4f20\u9012\uff0c\u7531\u4e8e\u672c\u6848\u4f8b\u53ea\u67094\u4e2a\u6837\u672c\uff0c\u5728\u7b2c\u4e00\u4e16\u4ee3\u4e0b\uff0c\u8fd8\u9700\u8981\u5bf9\u7b2c\u4e09\u4e2a\u548c\u7b2c\u56db\u4e2a\u6837\u672c\u8fdb\u884c\u5b66\u4e60\u5f97\u5230\u76f8\u5e94\u7684\u6743\u91cd\uff0c\u8fd9\u6837\uff0c\u7b2c\u4e00\u4e16\u4ee3\u5b66\u4e60\u5b8c\u6bd5\uff0c\u63a5\u7740\u6267\u884c\u7b2c\u4e8c\u4e16\u4ee3\u7684\u5b66\u4e60\uff0c\u8fc7\u7a0b\u548c\u7b2c\u4e00\u4e16\u4ee3\u662f\u7c7b\u4f3c\u7684\uff0c\u5982\u6b64\u5faa\u73af\u76f4\u81f3\u8fbe\u5230\u8bbe\u7f6e\u7684\u6700\u5927\u4e16\u4ee3\u6570\uff0c\u6574\u4e2a\u8bad\u7ec3\u96c6\u7684\u5b66\u4e60\u8fc7\u7a0b\u5c31\u7ed3\u675f\u4e86\u3002  \u8bad\u7ec3\u96c6\u5b66\u4e60\u5b8c\u6bd5\u540e\uff0c\u5c31\u53ef\u4ee5\u5bf9\u6d4b\u8bd5\u96c6\u8fdb\u884c\u9884\u6d4b\u3001\u8c03\u53c2\u7b49\u5de5\u4f5c\uff0c\u5728\u8fd9\uff0c\u4e3a\u4e86\u7b80\u5316\u6d41\u7a0b\uff0c\u8fd9\u91cc\u6ca1\u6709\u63d0\u53ca\u5728\u5bf9\u8bad\u7ec3\u96c6\u8fdb\u884c\u8bad\u7ec3\u4e4b\u524d\u7684\u6570\u636e\u6e05\u6d17\u3001\u7279\u5f81\u5de5\u7a0b\u7b49\u4e00\u7cfb\u5217\u5de5\u4f5c\uff0c\u5f53\u7136\u5bf9\u4e8e\u672c\u793a\u4f8b\u4e5f\u4e0d\u9700\u8981\uff0c\u56e0\u4e3a\u8be5\u6570\u636e\u96c6\u672c\u8eab\u5c31\u662f\u5e72\u51c0\u7684\u3002  # \u6743\u91cd\u7cfb\u6570\u66f4\u65b0\u8fc7\u7a0b\ndisplay(Image('./image/cats_epoch.png'))", 
            "title": "\u611f\u77e5\u5668\u7684\u6982\u5ff5\u5256\u6790"
        }, 
        {
            "location": "/machine_learning/perceptron_classifier/perceptron_classifier_blog/#numpy", 
            "text": "import numpy as np\na = np.array([2, -1, 3])\nb = np.array([1, 0, -1])\nprint( \u77e9\u9635\u52a0\u6cd5\uff1a{0} + {1} = {2} .format(a, b, a + b)) \nprint( \u77e9\u9635\u70b9\u4e58\uff1a{0} . {1} = {2} .format(a, b, np.dot(a, b)))\nprint( \u77e9\u9635\u5bf9\u5e94\u5143\u7d20\u76f8\u4e58\uff0cHadamard\u4e58\u79ef\uff1a{0} \u00d7 {1} = {2} .format(a, b, a*b))\nprint( \u77e9\u9635\u4e0e\u6807\u91cf\u76f8\u4e58\uff1a{0} \u00d7 {1} = {2} .format(2, a, 2*a))  \u77e9\u9635\u52a0\u6cd5\uff1a[ 2 -1  3] + [ 1  0 -1] = [ 3 -1  2]\n\u77e9\u9635\u70b9\u4e58\uff1a[ 2 -1  3] . [ 1  0 -1] = -1\n\u77e9\u9635\u5bf9\u5e94\u5143\u7d20\u76f8\u4e58\uff0cHadamard\u4e58\u79ef\uff1a[ 2 -1  3] \u00d7 [ 1  0 -1] = [ 2  0 -3]\n\u77e9\u9635\u4e0e\u6807\u91cf\u76f8\u4e58\uff1a2 \u00d7 [ 2 -1  3] = [ 4 -2  6]  Hadamard\u4e58\u79ef\uff1a \n\u77e9\u9635\u4e0e\u77e9\u9635\u7684Hadamard\u79ef\u5c31\u662f\u4e24\u4e2a\u77e9\u9635\u5bf9\u5e94\u5143\u7d20\u7684\u4e58\u79ef  Kronecker\u4e58\u79ef\uff1a \nKronecker\u79ef\u662f\u4e24\u4e2a\u4efb\u610f\u5927\u5c0f\u7684\u77e9\u9635\u95f4\u7684\u8fd0\u7b97\uff0c\u514b\u7f57\u5185\u514b\u79ef\u4e5f\u6210\u4e3a\u76f4\u79ef\u6216\u5f20\u91cf\u79ef\uff0c\u4ee5\u5fb7\u56fd\u6570\u5b66\u5bb6\u5229\u5965\u6ce2\u5fb7\u00b7\u514b\u7f57\u5185\u514b\u547d\u540d\u3002   import numpy as np \nw3 = np.array([1, 0.2, 0.1])\nupdate = np.array([-1, -0.7, -0.9])\nw4 = w3 + update\nw4  array([ 0. , -0.5, -0.8])", 
            "title": "numpy\u8fdb\u884c\u77e9\u9635\u8fd0\u7b97\u5c0f\u793a\u4f8b"
        }, 
        {
            "location": "/machine_learning/perceptron_classifier/perceptron_classifier_blog/#python", 
            "text": "\u83ba(dai)\u5c3e\u82b1\u6570\u636e\u96c6\u3000 150\u884c\\ \\times \\ 5\u5217   \u7279\u5f81\uff1a4\u4e2a\uff0c\u5206\u522b\u662f\u82b1\u74e3\u957f\u5ea6\u548c\u5bbd\u5ea6\uff0c\u82b1\u843c\u957f\u5ea6\u548c\u5bbd\u5ea6\uff0c\u5355\u4f4dcm  \u5206\u7c7b\u6807\u7b7e\uff1a\u6700\u540e\u4e00\u5217\uff0c\u4e09\u79cd\u53d6\u503c\uff0c\u5206\u522b\u4ee3\u8868\u4e09\u79cd\u7c7b\u578b\u7684\u83ba\u5c3e\u82b1  df = pd.read_excel( ./Iris.xls , sheetname= Iris )  df.head(3)   \n   \n     \n       \n       sepal length \n       sepal width \n       petal length \n       petal width \n       iris \n     \n   \n   \n     \n       0 \n       5.1 \n       3.5 \n       1.4 \n       0.2 \n       Iris-setosa \n     \n     \n       1 \n       4.9 \n       3.0 \n       1.4 \n       0.2 \n       Iris-setosa \n     \n     \n       2 \n       4.7 \n       3.2 \n       1.3 \n       0.2 \n       Iris-setosa \n     \n      \u4e3a\u4e86\u53ef\u4ee5\u753b\uff12D\u56fe\uff0c\u53ea\u62bd\u53d6\u4e86\u524d100\u884c\u6570\u636e\uff0c\u5373\u4ec5\u4ec5\u5305\u542b50\u4e2a\u6837\u672c\u7684 Iris-Setosa and 50\u4e2a\u6837\u672c\u7684 Iris-Versicolor flowers  y = df.iloc[0:100, 4].values  # get a 1-array, numpy.ndarray\ny[-5:]  array([u'Iris-versicolor', u'Iris-versicolor', u'Iris-versicolor',\n       u'Iris-versicolor', u'Iris-versicolor'], dtype=object)  # \u5c06\u6570\u636e\u96c6\u7684\u6240\u6709\u5b57\u7b26\u7c7b\u578b\u7684\u6570\u636e\u8f6c\u53d8\u6210\u6570\u503c\u7c7b\u578b\nY = np.where(y== Iris-setosa , -1, 1)\nY[-5:]  array([1, 1, 1, 1, 1])  \u4e3a\u4e86\u7b80\u5316\u6d41\u7a0b\uff0c\u4ece\u56db\u4e2a\u7279\u5f81\u4e2d\u62bd\u53d6\u4e86\u4e24\u4e2a\u7279\u5f81\u7ec4\u6210\u7279\u5f81\u77e9\u9635\uff0c\u5373\u9009\u62e9\u4e86\u7b2c\u4e00\u5217(sepal length) and \u7b2c\u4e09\u5217(petal length) as X  X = df.iloc[0:100, [0,2]].values  # .values\u3000\u662f\u5c06pandas\u7684DataFrame\u6216Series\u6570\u636e\u7ed3\u6784\u53d8\u6210numpy\u7684array\u7684\u6570\u7ec4\u6216\u77e9\u9635\u7c7b\u578b\nX.shape\nX[-2:, :]  array([[ 5.1,  3. ],\n       [ 5.7,  4.1]])", 
            "title": "python\u5b9e\u73b0\u7684\u5355\u5c42\u611f\u77e5\u5668"
        }, 
        {
            "location": "/machine_learning/perceptron_classifier/perceptron_classifier_blog/#_4", 
            "text": "plt.scatter(X[:50, 0], X[:50, 1], marker= o , label= setosa , c= white , edgecolor= purple )\nplt.scatter(X[50:100, 0], X[50:100, 1], c= blue , marker= x , label= versicolor )\nplt.xlabel( petal length [cm] )\nplt.ylabel( sepal length [cm] )\nplt.legend(loc= upper left )\nplt.show()", 
            "title": "\u6837\u672c\u7279\u5f81\u7684\u6563\u70b9\u56fe"
        }, 
        {
            "location": "/machine_learning/perceptron_classifier/perceptron_classifier_blog/#perceptron", 
            "text": "class Perceptron(object):\n     Perceptron classifier\u5355\u5c42\u611f\u77e5\u5668 \n    def __init__(self, eta=0.01, n_iter=10):\n        self.eta = eta\n        self.n_iter = n_iter\n\n    #\u62df\u5408\n    def fit(self, X, Y):\n        self.w_ = np.zeros(1 + X.shape[1])\n        self.errors_ = []\n        print( length of w_ : %i ) % len(self.w_)\n        for i in range(self.n_iter):\n            errors = 0\n            for xi, target in zip(X, Y):\n                update = self.eta * (target - self.predict(xi)) # update\u662f\u4e00\u4e2a\u6570\u503c\u3000\n                self.w_[1:] += update * xi  # \u6570\u7ec4\u4e0a\u64cd\u4f5c\uff0c\u4e0d\u662f\u6570\u503c\u52a0\n                self.w_[0] += update\n                errors += int(update != 0.0)\n            self.errors_.append(errors)\n            print( epoch_ +str(i + 1))\n            print(self.w_)\n        return self\n\n    #\u51c0\u8f93\u5165\n    def net_input(self, X):\n        return np.dot(X, self.w_[1:]) + self.w_[0]\n\n    #\u6fc0\u52b1\u51fd\u6570\u9884\u6d4b\n    def predict(self, X):\n        return np.where(self.net_input(X)  = 0.0, 1, -1)\n\n# \u9884\u6d4b\u672a\u77e5\u6837\u672c \n#     def predict_real(self, X):\n#         y_real = { 1 : Iris-versicolor ,  -1 : Iris-setosa }\n#         y_ = self.net_input(X)        \n#         return y_real[str(y_)]", 
            "title": "Perceptron\u611f\u77e5\u5668\u5206\u7c7b\u5668"
        }, 
        {
            "location": "/machine_learning/perceptron_classifier/perceptron_classifier_blog/#_5", 
            "text": "ppn = Perceptron(eta=0.1, n_iter=10)\nppn.fit(X, Y)\nplt.plot(range(1, len(ppn.errors_)+1), ppn.errors_, marker= . , color= purple )\nplt.xlabel( Epochs , fontsize=16)\nplt.ylabel( Number of Misclassification , fontsize=14)\nplt.grid(True, linestyle= : , alpha=0.8)\nplt.show()  length of w_ : 3\nepoch_1\n[ 0.    0.38  0.66]\nepoch_2\n[ 0.    0.76  1.32]\nepoch_3\n[-0.2   0.22  1.68]\nepoch_4\n[-0.2   0.34  2.1 ]\nepoch_5\n[-0.4  -0.68  1.82]\nepoch_6\n[-0.4  -0.68  1.82]\nepoch_7\n[-0.4  -0.68  1.82]\nepoch_8\n[-0.4  -0.68  1.82]\nepoch_9\n[-0.4  -0.68  1.82]\nepoch_10\n[-0.4  -0.68  1.82]", 
            "title": "\u611f\u77e5\u5668\u8bad\u7ec3\u8fc7\u7a0b\u4e2d\u5206\u7c7b\u6807\u7b7e\u9884\u6d4b\u9519\u8bef\u7684\u60c5\u51b5"
        }, 
        {
            "location": "/machine_learning/perceptron_classifier/perceptron_classifier_blog/#_6", 
            "text": "implement a small convenience function to visualize the decision boundaries for 2D datasets  np.meshgrid\u662f\u751f\u6210\u7f51\u683c\u91c7\u6837\u70b9\u7684\u51fd\u6578\uff0c\u5b83\u63a5\u6536\u4e24\u4e2a\u4e00\u7ef4\u6570\u7ec4,\u4ea7\u751f\u4e24\u4e2a\u4e8c\u7ef4\u77e9\u9635  contour:\u8f6e\u5ed3,\u7b49\u9ad8\u7ebf,f\uff1afilled\uff0c\u4e5f\u5373\u5bf9\u7b49\u9ad8\u7ebf\u95f4\u7684\u586b\u5145\u533a\u57df\u8fdb\u884c\u586b\u5145\uff08\u4f7f\u7528\u4e0d\u540c\u7684\u989c\u8272\uff09\uff1b  contourf\uff1a\u5c06\u4e0d\u4f1a\u518d\u7ed8\u5236\u7b49\u9ad8\u7ebf\uff08\u663e\u7136\u4e0d\u540c\u7684\u989c\u8272\u5206\u754c\u5c31\u8868\u793a\u7b49\u9ad8\u7ebf\u672c\u8eab\uff09  from matplotlib.colors import ListedColormap\ndef plot_decision_regions(X, Y, classifier, resolution=0.02):\n    # \u5bf9\u5e94\u5206\u7c7b\u6807\u7b7e\n    y_maps = { 1 : Iris-versicolor ,  -1 : Iris-setosa }\n    # setup marker generator and color map\n    markers = ( ^ ,  x ,  s ,  o ,  v )\n    colors = ( purple ,  red ,  blue ,  cyan ,  lightgreen , )  # gray \n    cmap = ListedColormap(colors[:len(np.unique(Y))])\n    # plot the decision surface\n    x1_min, x1_max = X[:, 0].min() - 1, X[:, 0].max() + 1\n    x2_min, x2_max = X[:, 1].min() - 1, X[:, 1].max() + 1\n    xx1, xx2 = np.meshgrid(np.arange(x1_min, x1_max, resolution), np.arange(x2_min, x2_max, resolution))\n    Z = classifier.predict(np.array([xx1.ravel(), xx2.ravel()]).T)\n    Z = Z.reshape(xx1.shape)\n    plt.contourf(xx1, xx2, Z, alpha=0.4, cmap=cmap)  \n\n    plt.xlim(xx1.min(), xx1.max())\n    plt.ylim(xx2.min(), xx2.max())\n    # plot class samples\n    for idx, cl in enumerate(np.unique(Y)):\n        plt.scatter(x=X[Y==cl, 0], y=X[Y==cl, 1], alpha=0.8, c=cmap(idx), marker=markers[idx],label=y_maps[str(cl)])  plot_decision_regions(X, Y, classifier=ppn)\nplt.xlabel( sepal length [cm] , fontsize=18)\nplt.ylabel( petal length [cm] , fontsize=18)\nplt.legend(loc= upper left )\nplt.show()", 
            "title": "\u611f\u77e5\u5668\u5206\u7c7b\u51b3\u7b56\u8fb9\u754c\u793a\u610f\u56fe"
        }, 
        {
            "location": "/machine_learning/perceptron_classifier/perceptron_classifier_blog/#sklearn", 
            "text": "from sklearn.preprocessing import StandardScaler  # \u6807\u6ce8\u53d8\u6362\u4e4b\u6807\u51c6\u5316\nfrom sklearn.linear_model import Perceptron as percep\nfrom sklearn.cross_validation import train_test_split as ttsplit\nfrom sklearn.metrics import accuracy_score\nX_train, X_test, Y_train, Y_test = ttsplit(X, Y, test_size=0.2, random_state=0)\n\nsc = StandardScaler()\nsc.fit(X_train)  # \u8ba1\u7b97\u5747\u503c\u548c\u65b9\u5dee\nX_train_std = sc.transform(X_train)  # \u8fdb\u884c\u6807\u51c6\u53d8\u6362\uff0c\u53d8\u6210\u6807\u51c6\u6b63\u592a\u5206\u5e03\nX_test_std = sc.transform(X_test)\nppn_ = percep(n_iter=10, eta0=0.1, random_state=0)\nppn_.fit(X_train_std, Y_train)\nY_pred = ppn_.predict(X_test_std)\nprint( Misclassified samples: %d  % (Y_test != Y_pred).sum())\nprint( Accuracy: %.2f  % accuracy_score(Y_test,Y_pred))  Misclassified samples: 1\nAccuracy: 0.95\n\n\n/home/darren/anaconda2/lib/python2.7/site-packages/sklearn/cross_validation.py:44: DeprecationWarning: This module was deprecated in version 0.18 in favor of the model_selection module into which all the refactored classes and functions are moved. Also note that the interface of the new CV iterators are different from that of this module. This module will be removed in 0.20.\n  \"This module will be removed in 0.20.\", DeprecationWarning)  from matplotlib.colors import ListedColormap\nimport matplotlib.pyplot as plt\ndef plot_decision_region(X, Y, classifier, test_idx=None, resolution=0.02):\n    # \u5bf9\u5e94\u5206\u7c7b\u6807\u7b7e\n    y_maps = { 1 : Iris-versicolor ,  -1 : Iris-setosa }\n    # setup marker generator and color map\n    markers = ( ^ ,  x ,  s ,  o ,  v )\n    colors = ( purple ,  red ,  blue ,  cyan ,  lightgreen , )  # gray \n    cmap = ListedColormap(colors[:len(np.unique(Y))])\n    # plot the decision surface    \n    x1_min, x1_max = X[:, 0].min() - 1, X[:, 0].max() + 1\n    x2_min, x2_max = X[:, 1].min() - 1, X[:, 1].max() + 1\n    xx1, xx2 = np.meshgrid(np.arange(x1_min, x1_max, resolution), np.arange(x2_min, x2_max, resolution))\n    Z = classifier.predict(np.array([xx1.ravel(), xx2.ravel()]).T)\n    Z = Z.reshape(xx1.shape)\n    plt.contourf(xx1, xx2, Z, alpha=0.4, cmap=cmap)      \n    plt.xlim(xx1.min(), xx1.max())\n    plt.ylim(xx2.min(), xx2.max())\n    # plot all samples\n    for idx, cl in enumerate(np.unique(Y)):\n        plt.scatter(x=X[Y==cl, 0], y=X[Y==cl, 1], alpha=0.8, c=cmap(idx), marker=markers[idx],label=y_maps[str(cl)])\n    # highlight test samples\n    if test_idx:\n        X_test, Y_test = X[test_idx, :], Y[test_idx]\n        X_test, Y_test = X[test_idx, :], Y[test_idx]\n        plt.scatter(X_test[:, 0], X_test[:, 1], c= , alpha=1.0, linewidth=1, marker= o , s=55, label= test set )  X_combined_std = np.vstack((X_train_std, X_test_std))\nY_combined = np.hstack((Y_train, Y_test))\nplot_decision_region(X=X_combined_std, Y=Y_combined, classifier=ppn_, test_idx=None)\nplt.xlabel( sepal length [standardized] cm , fontsize=16)\nplt.ylabel( petal length [standardized] cm , fontsize=14)\nplt.legend(loc= upper left )\nplt.show()", 
            "title": "sklearn\u611f\u77e5\u5668\u4ee3\u7801\u5b9e\u73b0"
        }
    ]
}